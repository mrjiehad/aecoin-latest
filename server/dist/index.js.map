{
  "version": 3,
  "sources": ["../src/vite.ts", "../src/index.ts", "../src/routes.ts", "../../shared/schema.ts", "../src/db.ts", "../src/storage.ts", "../src/discord.ts", "../src/email.ts", "../src/fivem-db.ts", "../src/toyyibpay.ts", "../src/billplz.ts", "../src/types.ts"],
  "sourcesContent": ["import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../../vite.config.js\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"../..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n", "import \"dotenv/config\";\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { registerRoutes } from \"./routes.js\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\n\n// Simple logging utility\nfunction log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\n// Billplz callback needs raw body for X-Signature verification\napp.use(\"/api/billplz/callback\", express.text({ type: 'application/x-www-form-urlencoded' }));\n\n// Apply JSON middleware for all other routes\napp.use((req, res, next) => {\n  if (req.path === '/api/billplz/callback') {\n    return next();\n  }\n  express.json()(req, res, next);\n});\n\napp.use((req, res, next) => {\n  if (req.path === '/api/billplz/callback') {\n    return next(); // Already handled with raw text middleware\n  }\n  express.urlencoded({ extended: false })(req, res, next);\n});\n\n// Validate SESSION_SECRET exists\nif (!process.env.SESSION_SECRET) {\n  throw new Error('SESSION_SECRET environment variable is required');\n}\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'lax',\n    maxAge: 1000 * 60 * 60 * 24 * 7 // 7 days\n  }\n}));\n\n// Request logging middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const reqPath = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (reqPath.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${reqPath} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"\u2026\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Serve attached_assets folder as static files\n  app.use('/attached_assets', express.static('attached_assets'));\n\n  // Health check endpoint\n  app.get(\"/api/health\", (_req, res) => {\n    res.json({ ok: true });\n  });\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // Setup Vite dev server or static serving based on environment\n  if (process.env.NODE_ENV !== 'production') {\n    // Development: dynamically import vite (only in dev)\n    const { setupVite } = await import(\"./vite.js\");\n    await setupVite(app, server);\n  } else {\n    // Production: serve static files from client/dist\n    const distDir = path.resolve(__dirname, \"../../client/dist\");\n    \n    // Serve static assets\n    app.use(express.static(distDir));\n\n    // SPA fallback for non-API routes\n    app.get(/^\\/(?!api).*/, (_req, res) => {\n      res.sendFile(path.join(distDir, \"index.html\"));\n    });\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // For Replit dev, default to 5000. For VPS production, use PORT from .env (default 3000)\n  const port = parseInt(process.env.PORT || (process.env.NODE_ENV === 'production' ? '3000' : '5000'), 10);\n  \n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port} (NODE_ENV=${process.env.NODE_ENV || 'development'})`);\n  });\n})();\n", "import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { getDiscordAuthUrl, exchangeCodeForToken, getDiscordUserInfo } from \"./discord\";\nimport { sendOrderConfirmationEmail } from \"./email\";\nimport { insertRedemptionCodeToFiveM } from \"./fivem-db\";\nimport { createBill, getPaymentUrl, getBillTransactions } from \"./toyyibpay\";\nimport { createBill as createBillplzBill, getBill, verifyBillPayment, verifyBillplzSignature } from \"./billplz\";\nimport \"./types\";\nimport crypto from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\n\n// Middleware to check if user is authenticated\nfunction requireAuth(req: Request, res: Response, next: Function) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}\n\n// Middleware to check if user is admin\nasync function requireAdmin(req: Request, res: Response, next: Function) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || !user.isAdmin) {\n    return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n  }\n  \n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // One-time admin user creation endpoint (for initial setup)\n  app.post(\"/api/seed-admin\", async (req, res) => {\n    try {\n      const { username, email, password, setupToken } = req.body;\n\n      // Check if setup token matches (or allow if no admin exists yet)\n      const existingAdmins = await db.select().from(users).where(eq(users.isAdmin, true));\n      \n      if (existingAdmins.length > 0) {\n        return res.status(403).json({ message: \"Admin already exists. Cannot create another via seed.\" });\n      }\n\n      if (!username || !email || !password) {\n        return res.status(400).json({ message: \"Username, email, and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters\" });\n      }\n\n      // Hash password with bcrypt (cost factor 12)\n      const passwordHash = await bcrypt.hash(password, 12);\n\n      // Create admin user\n      const admin = await storage.createAdminUser(username, email, passwordHash);\n\n      res.json({ \n        message: \"Admin user created successfully\",\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          isAdmin: admin.isAdmin,\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Seed admin error:\", error);\n      res.status(500).json({ message: \"Failed to create admin user\", error: error.message });\n    }\n  });\n\n  // Discord OAuth flow - Step 1: Redirect to Discord\n  app.get(\"/api/auth/discord\", (req, res) => {\n    // Generate and store state for CSRF protection\n    const state = crypto.randomBytes(16).toString('hex');\n    req.session.oauthState = state;\n    \n    const authUrl = getDiscordAuthUrl(state);\n    res.redirect(authUrl);\n  });\n\n  // Discord OAuth flow - Step 2: Handle callback\n  app.get(\"/api/auth/discord/callback\", async (req, res) => {\n    const { code, state } = req.query;\n\n    // Verify state for CSRF protection\n    if (!state || state !== req.session.oauthState) {\n      return res.status(403).send(\"Invalid state parameter\");\n    }\n\n    // Clear state after use\n    delete req.session.oauthState;\n\n    if (!code || typeof code !== 'string') {\n      return res.status(400).send(\"No code provided\");\n    }\n\n    try {\n      // Exchange code for access token\n      const tokenData = await exchangeCodeForToken(code);\n      \n      // Get user info from Discord\n      const discordUser = await getDiscordUserInfo(tokenData.access_token);\n      \n      // Check if user exists\n      let user = await storage.getUserByDiscordId(discordUser.discordId);\n      \n      if (!user) {\n        // Create new user\n        user = await storage.createUser({\n          discordId: discordUser.discordId,\n          username: discordUser.username,\n          email: discordUser.email || \"\",\n          avatar: discordUser.avatar,\n        });\n      }\n      \n      // Regenerate session to prevent session fixation attacks\n      const oldSession = req.session;\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).send(\"Authentication failed\");\n        }\n        \n        // Set user ID in new session\n        req.session.userId = user.id;\n        \n        // Save session and redirect\n        req.session.save((err) => {\n          if (err) {\n            console.error(\"Session save error:\", err);\n            return res.status(500).send(\"Authentication failed\");\n          }\n          res.redirect('/');\n        });\n      });\n    } catch (error: any) {\n      console.error(\"OAuth callback error:\", error);\n      res.status(500).send(\"Authentication failed\");\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    res.json({ user });\n  });\n\n  // Admin login with username/password\n  const adminLoginSchema = z.object({\n    username: z.string().min(3, \"Username must be at least 3 characters\"),\n    password: z.string().min(6, \"Password must be at least 6 characters\"),\n  });\n\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = adminLoginSchema.parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || !user.isAdmin || !user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n\n        req.session.userId = user.id;\n        req.session.loginMethod = \"admin\";\n\n        res.json({ \n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            isAdmin: user.isAdmin,\n            avatar: user.avatar,\n          }\n        });\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n\n  // Package routes\n  app.get(\"/api/packages\", async (_req, res) => {\n    const packages = await storage.getAllPackages();\n    res.json(packages);\n  });\n\n  app.get(\"/api/packages/:id\", async (req, res) => {\n    const pkg = await storage.getPackage(req.params.id);\n    if (!pkg) {\n      return res.status(404).json({ message: \"Package not found\" });\n    }\n    res.json(pkg);\n  });\n\n  // Player rankings routes\n  app.get(\"/api/rankings\", async (_req, res) => {\n    const rankings = await storage.getAllPlayerRankings();\n    res.json(rankings);\n  });\n\n  app.get(\"/api/rankings/top/:limit?\", async (req, res) => {\n    const limit = parseInt(req.params.limit || \"100\");\n    const rankings = await storage.getTopPlayers(limit);\n    res.json(rankings);\n  });\n\n  // Cart routes (require authentication)\n  app.get(\"/api/cart\", requireAuth, async (req, res) => {\n    const items = await storage.getCartItems(req.session.userId!);\n    \n    // Join package data for each cart item\n    const itemsWithPackages = await Promise.all(\n      items.map(async (item) => {\n        const pkg = await storage.getPackage(item.packageId);\n        return {\n          ...item,\n          package: pkg,\n        };\n      })\n    );\n    \n    res.json(itemsWithPackages);\n  });\n\n  app.post(\"/api/cart\", requireAuth, async (req, res) => {\n    const { packageId, quantity } = req.body;\n    \n    const item = await storage.addToCart({\n      userId: req.session.userId!,\n      packageId,\n      quantity: quantity || 1,\n    });\n    \n    res.json(item);\n  });\n\n  app.patch(\"/api/cart/:id\", requireAuth, async (req, res) => {\n    const { quantity } = req.body;\n    const item = await storage.updateCartItemQuantity(req.params.id, quantity);\n    \n    if (!item) {\n      return res.status(404).json({ message: \"Cart item not found\" });\n    }\n    \n    res.json(item);\n  });\n\n  app.delete(\"/api/cart/:id\", requireAuth, async (req, res) => {\n    const success = await storage.removeFromCart(req.params.id);\n    \n    if (!success) {\n      return res.status(404).json({ message: \"Cart item not found\" });\n    }\n    \n    res.json({ message: \"Item removed from cart\" });\n  });\n\n  app.delete(\"/api/cart\", requireAuth, async (req, res) => {\n    await storage.clearCart(req.session.userId!);\n    res.json({ message: \"Cart cleared\" });\n  });\n\n  // Order routes (require authentication)\n  app.get(\"/api/orders\", requireAuth, async (req, res) => {\n    const orders = await storage.getUserOrders(req.session.userId!);\n    res.json(orders);\n  });\n\n  app.get(\"/api/orders/:id\", requireAuth, async (req, res) => {\n    const order = await storage.getOrder(req.params.id);\n    \n    if (!order || order.userId !== req.session.userId) {\n      return res.status(404).json({ message: \"Order not found\" });\n    }\n    \n    res.json(order);\n  });\n\n  // Get redemption codes for an order\n  app.get(\"/api/orders/:id/codes\", requireAuth, async (req, res) => {\n    const order = await storage.getOrder(req.params.id);\n    \n    if (!order || order.userId !== req.session.userId) {\n      return res.status(404).json({ message: \"Order not found\" });\n    }\n    \n    const codes = await storage.getOrderRedemptionCodes(req.params.id);\n    res.json(codes);\n  });\n\n  // Coupon routes\n  app.get(\"/api/coupons/:code\", async (req, res) => {\n    const coupon = await storage.getCoupon(req.params.code.toUpperCase());\n    const subtotal = req.query.subtotal ? parseFloat(req.query.subtotal as string) : 0;\n    \n    if (!coupon) {\n      return res.status(404).json({ message: \"Coupon not found\" });\n    }\n    \n    // Validate coupon\n    if (!coupon.isActive) {\n      return res.status(400).json({ message: \"Coupon is no longer active\" });\n    }\n    \n    if (coupon.expiresAt && new Date(coupon.expiresAt) < new Date()) {\n      return res.status(400).json({ message: \"Coupon has expired\" });\n    }\n    \n    if (coupon.maxUses && coupon.currentUses >= coupon.maxUses) {\n      return res.status(400).json({ message: \"Coupon usage limit reached\" });\n    }\n    \n    // Validate minimum purchase requirement\n    if (coupon.minPurchase && parseFloat(coupon.minPurchase) > subtotal) {\n      return res.status(400).json({ \n        message: `Minimum purchase of RM${coupon.minPurchase} required` \n      });\n    }\n    \n    res.json(coupon);\n  });\n\n  // Helper function to generate unique AECOIN redemption codes\n  // Format: AE{VALUE}-XXXX-XXXX-XXXX (e.g., AE1000-ABCD-EFGH-JKLM)\n  function generateRedemptionCode(aecoinAmount: number): string {\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ'; // Only letters, no numbers\n    const segments = 3; // Three segments of random letters\n    const segmentLength = 4;\n    const code = [`AE${aecoinAmount}`]; // Start with AE{VALUE}\n    \n    for (let i = 0; i < segments; i++) {\n      let segment = '';\n      for (let j = 0; j < segmentLength; j++) {\n        segment += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      code.push(segment);\n    }\n    \n    return code.join('-'); // Format: AE{VALUE}-XXXX-XXXX-XXXX\n  }\n\n\n\n  // ToyyibPay payment intent endpoint - With PendingPayment security\n  app.post(\"/api/create-toyyibpay-bill\", requireAuth, async (req, res) => {\n    try {\n      const { couponCode, billingInfo } = req.body;\n      const userId = req.session.userId!;\n\n      // Validate billing information\n      if (!billingInfo || !billingInfo.fullName || !billingInfo.fullName.trim()) {\n        return res.status(400).json({ message: \"Full name is required\" });\n      }\n      \n      if (!billingInfo.email || !billingInfo.email.trim()) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Get cart items and calculate total SERVER-SIDE (security: never trust client amounts)\n      const cartItems = await storage.getCartItems(userId);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n\n      // Calculate subtotal from server-side cart data\n      let subtotal = 0;\n      for (const item of cartItems) {\n        const pkg = await storage.getPackage(item.packageId);\n        if (pkg) {\n          subtotal += parseFloat(pkg.price) * item.quantity;\n        }\n      }\n\n      // Validate coupon if provided\n      let discount = 0;\n      let validatedCoupon = null;\n      if (couponCode) {\n        const coupon = await storage.getCoupon(couponCode.toUpperCase());\n        \n        if (coupon && coupon.isActive) {\n          const isExpired = coupon.expiresAt && new Date(coupon.expiresAt) < new Date();\n          const isOverUsed = coupon.maxUses && coupon.currentUses >= coupon.maxUses;\n          const belowMinPurchase = coupon.minPurchase && parseFloat(coupon.minPurchase) > subtotal;\n\n          if (!isExpired && !isOverUsed && !belowMinPurchase) {\n            validatedCoupon = coupon;\n            if (coupon.discountType === 'percentage') {\n              discount = (subtotal * parseFloat(coupon.discountValue)) / 100;\n            } else {\n              discount = parseFloat(coupon.discountValue);\n            }\n          }\n        }\n      }\n\n      const total = Math.max(0, subtotal - discount);\n\n      if (total <= 0) {\n        return res.status(400).json({ message: \"Invalid order total\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n        : `http://localhost:5000`;\n\n      // Generate unique external reference ID for ToyyibPay\n      const externalReferenceNo = crypto.randomUUID();\n\n      // Create ToyyibPay bill (billing info is already validated above)\n      const billCode = await createBill({\n        billName: `AECOIN Order #${externalReferenceNo.substring(0, 8)}`,\n        billDescription: `AECOIN Package Purchase`,\n        billAmount: total,\n        billTo: billingInfo.fullName.trim(),\n        billEmail: billingInfo.email.trim(),\n        billPhone: billingInfo.phoneNumber && billingInfo.phoneNumber.trim() ? billingInfo.phoneNumber.trim() : '0000000000',\n        billExternalReferenceNo: externalReferenceNo,\n        billReturnUrl: `${baseUrl}/api/toyyibpay/return`,\n        billCallbackUrl: `${baseUrl}/api/toyyibpay/callback`,\n      });\n\n      // Create cart snapshot for security verification\n      const cartSnapshot = await Promise.all(\n        cartItems.map(async (item) => {\n          const pkg = await storage.getPackage(item.packageId);\n          return {\n            packageId: item.packageId,\n            packageName: pkg?.name || '',\n            quantity: item.quantity,\n            price: pkg?.price || '0',\n            aecoinAmount: pkg?.aecoinAmount || 0,\n          };\n        })\n      );\n\n      // Create PendingPayment record for security and tracking (CRITICAL SECURITY)\n      await storage.createPendingPayment({\n        userId,\n        provider: 'toyyibpay',\n        externalId: billCode,\n        amount: total.toFixed(2),\n        currency: 'MYR',\n        status: 'created',\n        cartSnapshot: JSON.stringify(cartSnapshot),\n        couponCode: validatedCoupon?.code || null,\n        metadata: JSON.stringify({\n          subtotal: subtotal.toFixed(2),\n          discount: discount.toFixed(2),\n          externalReferenceNo,\n        }),\n      });\n\n      const paymentUrl = getPaymentUrl(billCode);\n\n      res.json({\n        billCode,\n        paymentUrl,\n        amount: total,\n        metadata: {\n          couponCode: validatedCoupon?.code || \"\",\n          subtotal: Math.round(subtotal),\n          discount: Math.round(discount),\n          total: Math.round(total),\n        }\n      });\n    } catch (error: any) {\n      console.error(\"ToyyibPay bill creation error:\", error);\n      res.status(500).json({ \n        message: \"Error creating ToyyibPay bill: \" + error.message \n      });\n    }\n  });\n\n  // ToyyibPay callback handler (called by ToyyibPay when payment completes)\n  app.get(\"/api/toyyibpay/callback\", async (req, res) => {\n    try {\n      const { status_id, billcode } = req.query;\n\n      console.log(\"ToyyibPay callback received:\", { status_id, billcode });\n\n      if (!billcode) {\n        return res.status(200).send('OK');\n      }\n\n      // Check if payment already processed (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(billcode as string);\n      if (existingOrder) {\n        console.log(`Order already exists for ToyyibPay bill ${billcode}`);\n        return res.status(200).send('OK');\n      }\n\n      // Verify payment succeeded\n      if (status_id === '1') {\n        // Server-side verification: Query ToyyibPay to confirm payment\n        const transactions = await getBillTransactions(billcode as string);\n        \n        if (transactions && transactions.length > 0 && transactions[0].billpaymentStatus === '1') {\n          console.log(\"\u2713 ToyyibPay payment verified:\", billcode);\n          // Actual order fulfillment happens in return handler with session context\n        }\n      }\n\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"ToyyibPay callback error:\", error);\n      res.status(200).send('OK');\n    }\n  });\n\n  // ToyyibPay return handler (user redirected here after payment) - SECURE VERSION\n  app.get(\"/api/toyyibpay/return\", async (req, res) => {\n    try {\n      const { status_id, billcode } = req.query;\n\n      console.log(\"ToyyibPay return:\", { status_id, billcode });\n\n      if (!billcode || status_id !== '1') {\n        return res.redirect(`/payment/failed?reason=invalid_status`);\n      }\n\n      // Check if order already exists (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(billcode as string);\n      if (existingOrder) {\n        console.log(`Order already fulfilled for ToyyibPay bill ${billcode}`);\n        return res.redirect(`/orders?payment=success&provider=toyyibpay`);\n      }\n\n      // Get PendingPayment record - CRITICAL SECURITY CHECK\n      const pendingPayment = await storage.getPendingPaymentByExternalId(billcode as string);\n      if (!pendingPayment) {\n        console.error(`No pending payment found for ToyyibPay bill ${billcode}`);\n        return res.redirect(`/payment/failed?reason=pending_not_found`);\n      }\n\n      // Server-side transaction verification - NEVER trust URL params\n      const transactions = await getBillTransactions(billcode as string);\n      \n      if (!transactions || transactions.length === 0 || transactions[0].billpaymentStatus !== '1') {\n        console.error(`ToyyibPay transaction verification failed for ${billcode}`);\n        await storage.updatePendingPaymentStatus(billcode as string, 'failed');\n        return res.redirect(`/payment/failed?reason=verification_failed`);\n      }\n\n      const transaction = transactions[0];\n\n      // Verify amount matches (ToyyibPay returns cents)\n      const paidAmountMYR = parseFloat(transaction.billpaymentAmount) / 100;\n      const expectedAmountMYR = parseFloat(pendingPayment.amount);\n      \n      if (Math.abs(paidAmountMYR - expectedAmountMYR) > 0.01) {\n        console.error(`ToyyibPay amount mismatch: paid RM${paidAmountMYR}, expected RM${expectedAmountMYR}`);\n        await storage.updatePendingPaymentStatus(billcode as string, 'failed');\n        return res.redirect(`/payment/failed?reason=amount_mismatch`);\n      }\n\n      // Reconstruct order from cart snapshot (prevents cart tampering)\n      const cartSnapshot = JSON.parse(pendingPayment.cartSnapshot);\n      const metadata = pendingPayment.metadata ? JSON.parse(pendingPayment.metadata) : {};\n\n      // Create order with verified data\n      const order = await storage.createOrder({\n        userId: pendingPayment.userId,\n        totalAmount: metadata.subtotal || pendingPayment.amount,\n        discountAmount: metadata.discount || '0',\n        finalAmount: pendingPayment.amount,\n        status: \"paid\",\n        paymentMethod: \"toyyibpay\",\n        paymentId: billcode as string,\n        couponCode: pendingPayment.couponCode,\n      });\n\n      // Generate redemption codes from snapshot\n      for (const item of cartSnapshot) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          packageId: item.packageId,\n          quantity: item.quantity,\n          priceAtPurchase: item.price,\n        });\n\n        for (let i = 0; i < item.quantity; i++) {\n          const code = generateRedemptionCode(item.aecoinAmount);\n          await storage.createRedemptionCode({\n            code,\n            packageId: item.packageId,\n            orderId: order.id,\n            aecoinAmount: item.aecoinAmount,\n            status: \"active\",\n          });\n\n          try {\n            await insertRedemptionCodeToFiveM(code, item.aecoinAmount);\n          } catch (fivemError) {\n            console.error(`Failed to insert code ${code} into FiveM:`, fivemError);\n          }\n        }\n      }\n\n      // Update order status to fulfilled\n      await storage.updateOrderStatus(order.id, 'fulfilled');\n\n      // Increment coupon usage if applied\n      if (pendingPayment.couponCode) {\n        const coupon = await storage.getCoupon(pendingPayment.couponCode);\n        if (coupon) {\n          await storage.incrementCouponUse(coupon.id);\n        }\n      }\n\n      // Clear cart and mark payment succeeded\n      await storage.clearCart(pendingPayment.userId);\n      await storage.updatePendingPaymentStatus(billcode as string, 'succeeded');\n\n      // Send email confirmation (soft fail)\n      try {\n        const user = await storage.getUser(pendingPayment.userId);\n        if (user?.email) {\n          const redemptionCodes = await storage.getOrderRedemptionCodes(order.id);\n          const codesWithPackageNames = redemptionCodes.map((code, idx) => ({\n            code: code.code,\n            packageName: cartSnapshot[idx]?.packageName || 'AECOIN Package'\n          }));\n          \n          await sendOrderConfirmationEmail(\n            user.email,\n            order.id,\n            order.finalAmount,\n            codesWithPackageNames\n          );\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send order confirmation email:\", emailError);\n      }\n\n      console.log(`\u2713 Order ${order.id} fulfilled via ToyyibPay`);\n      res.redirect(`/orders?payment=success&provider=toyyibpay`);\n    } catch (error) {\n      console.error(\"ToyyibPay return error:\", error);\n      res.redirect(`/payment/failed?reason=server_error`);\n    }\n  });\n\n  // Billplz payment intent endpoint - With PendingPayment security\n  app.post(\"/api/create-billplz-bill\", requireAuth, async (req, res) => {\n    try {\n      const { couponCode, billingInfo } = req.body;\n      const userId = req.session.userId!;\n      \n      console.log(\"Billplz bill creation - billing info received:\", billingInfo);\n\n      // Validate billing information\n      if (!billingInfo || !billingInfo.fullName || !billingInfo.fullName.trim()) {\n        return res.status(400).json({ message: \"Full name is required\" });\n      }\n      \n      if (!billingInfo.email || !billingInfo.email.trim()) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Get cart items and calculate total SERVER-SIDE (security: never trust client amounts)\n      const cartItems = await storage.getCartItems(userId);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n\n      // Calculate subtotal from server-side cart data\n      let subtotal = 0;\n      for (const item of cartItems) {\n        const pkg = await storage.getPackage(item.packageId);\n        if (pkg) {\n          subtotal += parseFloat(pkg.price) * item.quantity;\n        }\n      }\n\n      // Validate coupon if provided\n      let discount = 0;\n      let validatedCoupon = null;\n      if (couponCode) {\n        const coupon = await storage.getCoupon(couponCode.toUpperCase());\n        \n        if (coupon && coupon.isActive) {\n          const isExpired = coupon.expiresAt && new Date(coupon.expiresAt) < new Date();\n          const isOverUsed = coupon.maxUses && coupon.currentUses >= coupon.maxUses;\n          const belowMinPurchase = coupon.minPurchase && parseFloat(coupon.minPurchase) > subtotal;\n\n          if (!isExpired && !isOverUsed && !belowMinPurchase) {\n            validatedCoupon = coupon;\n            if (coupon.discountType === 'percentage') {\n              discount = (subtotal * parseFloat(coupon.discountValue)) / 100;\n            } else {\n              discount = parseFloat(coupon.discountValue);\n            }\n          }\n        }\n      }\n\n      const total = Math.max(0, subtotal - discount);\n\n      if (total <= 0) {\n        return res.status(400).json({ message: \"Invalid order total\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n        : `http://localhost:5000`;\n\n      // Generate unique external reference ID for Billplz\n      const externalReferenceNo = crypto.randomUUID();\n\n      // Create Billplz bill (billing info is already validated above)\n      const billResponse = await createBillplzBill({\n        description: `AECOIN Order #${externalReferenceNo.substring(0, 8)}`,\n        amount: total,\n        name: billingInfo.fullName.trim(),\n        email: billingInfo.email.trim(),\n        mobile: billingInfo.phoneNumber && billingInfo.phoneNumber.trim() ? billingInfo.phoneNumber.trim() : undefined,\n        callbackUrl: `${baseUrl}/api/billplz/callback`,\n        redirectUrl: `${baseUrl}/api/billplz/return`,\n        reference1Label: 'Order ID',\n        reference1: externalReferenceNo,\n      });\n\n      // Create cart snapshot for security verification\n      const cartSnapshot = await Promise.all(\n        cartItems.map(async (item) => {\n          const pkg = await storage.getPackage(item.packageId);\n          return {\n            packageId: item.packageId,\n            packageName: pkg?.name || '',\n            quantity: item.quantity,\n            price: pkg?.price || '0',\n            aecoinAmount: pkg?.aecoinAmount || 0,\n          };\n        })\n      );\n\n      // Create PendingPayment record for security and tracking (CRITICAL SECURITY)\n      await storage.createPendingPayment({\n        userId,\n        provider: 'billplz',\n        externalId: billResponse.id,\n        amount: total.toFixed(2),\n        currency: 'MYR',\n        status: 'created',\n        cartSnapshot: JSON.stringify(cartSnapshot),\n        couponCode: validatedCoupon?.code || null,\n        metadata: JSON.stringify({\n          subtotal: subtotal.toFixed(2),\n          discount: discount.toFixed(2),\n          externalReferenceNo,\n        }),\n      });\n\n      res.json({\n        billId: billResponse.id,\n        paymentUrl: billResponse.url,\n        amount: total,\n        metadata: {\n          couponCode: validatedCoupon?.code || \"\",\n          subtotal: Math.round(subtotal),\n          discount: Math.round(discount),\n          total: Math.round(total),\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Billplz bill creation error:\", error);\n      res.status(500).json({ \n        message: \"Error creating Billplz bill: \" + error.message \n      });\n    }\n  });\n\n  // Billplz callback handler (called by Billplz when payment completes)\n  app.post(\"/api/billplz/callback\", async (req, res) => {\n    try {\n      // req.body is raw text string due to express.text() middleware\n      const rawBody = typeof req.body === 'string' ? req.body : '';\n      const signature = req.headers['x-signature'] as string;\n\n      // SECURITY: Verify X-Signature to ensure callback is from Billplz (uses raw body)\n      const isValidSignature = verifyBillplzSignature(rawBody, signature || '');\n      \n      if (!isValidSignature) {\n        console.error('Invalid Billplz callback signature - possible fraud attempt');\n        return res.status(200).send('OK'); // Return 200 to prevent retries\n      }\n\n      // Parse the URL-encoded body manually\n      const params = new URLSearchParams(rawBody);\n      const id = params.get('id');\n      const paid = params.get('paid');\n\n      console.log(\"Billplz callback received:\", { id, paid, hasSignature: !!signature });\n\n      if (!id) {\n        return res.status(200).send('OK');\n      }\n\n      // Check if payment already processed (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(id);\n      if (existingOrder) {\n        console.log(`Order already exists for Billplz bill ${id}`);\n        return res.status(200).send('OK');\n      }\n\n      // Verify PendingPayment exists - SECURITY CHECK\n      const pendingPayment = await storage.getPendingPaymentByExternalId(id);\n      if (!pendingPayment) {\n        console.error(`No pending payment found for Billplz bill ${id}`);\n        return res.status(200).send('OK');\n      }\n\n      // Verify payment succeeded\n      if (paid === 'true' || paid === '1') {\n        // Server-side verification: Query Billplz to confirm payment\n        const billStatus = await verifyBillPayment(id);\n        \n        if (billStatus) {\n          console.log(\"\u2713 Billplz payment verified:\", id);\n          // Actual order fulfillment happens in return handler with session context\n        }\n      }\n\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"Billplz callback error:\", error);\n      res.status(200).send('OK');\n    }\n  });\n\n  // Billplz return handler (user redirected here after payment) - SECURE VERSION\n  app.get(\"/api/billplz/return\", async (req, res) => {\n    try {\n      const { billplz } = req.query;\n\n      console.log(\"Billplz return:\", { billplz });\n\n      if (!billplz) {\n        return res.redirect(`/payment/failed?reason=invalid_request`);\n      }\n\n      // Parse the billplz data (it comes as a JSON object)\n      let billData: any;\n      try {\n        billData = typeof billplz === 'string' ? JSON.parse(billplz) : billplz;\n      } catch (parseError) {\n        console.error(\"Failed to parse Billplz data:\", parseError);\n        return res.redirect(`/payment/failed?reason=invalid_data`);\n      }\n\n      const billId = billData.id;\n      \n      if (!billId || billData.paid !== true) {\n        return res.redirect(`/payment/failed?reason=payment_not_completed`);\n      }\n\n      // Check if order already exists (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(billId);\n      if (existingOrder) {\n        console.log(`Order already fulfilled for Billplz bill ${billId}`);\n        return res.redirect(`/orders?payment=success&provider=billplz`);\n      }\n\n      // Get PendingPayment record - CRITICAL SECURITY CHECK\n      const pendingPayment = await storage.getPendingPaymentByExternalId(billId);\n      if (!pendingPayment) {\n        console.error(`No pending payment found for Billplz bill ${billId}`);\n        return res.redirect(`/payment/failed?reason=pending_not_found`);\n      }\n\n      // Server-side transaction verification - NEVER trust URL params\n      const bill = await getBill(billId);\n      \n      if (!bill.paid || bill.state !== 'paid') {\n        console.error(`Billplz transaction verification failed for ${billId}`);\n        await storage.updatePendingPaymentStatus(billId, 'failed');\n        return res.redirect(`/payment/failed?reason=verification_failed`);\n      }\n\n      // Verify amount matches (Billplz returns cents)\n      const paidAmountMYR = bill.amount / 100;\n      const expectedAmountMYR = parseFloat(pendingPayment.amount);\n      \n      if (Math.abs(paidAmountMYR - expectedAmountMYR) > 0.01) {\n        console.error(`Billplz amount mismatch: paid RM${paidAmountMYR}, expected RM${expectedAmountMYR}`);\n        await storage.updatePendingPaymentStatus(billId, 'failed');\n        return res.redirect(`/payment/failed?reason=amount_mismatch`);\n      }\n\n      // Reconstruct order from cart snapshot (prevents cart tampering)\n      const cartSnapshot = JSON.parse(pendingPayment.cartSnapshot);\n      const metadata = pendingPayment.metadata ? JSON.parse(pendingPayment.metadata) : {};\n\n      // Create order with verified data\n      const order = await storage.createOrder({\n        userId: pendingPayment.userId,\n        totalAmount: metadata.subtotal || pendingPayment.amount,\n        discountAmount: metadata.discount || '0',\n        finalAmount: pendingPayment.amount,\n        status: \"paid\",\n        paymentMethod: \"billplz\",\n        paymentId: billId,\n        couponCode: pendingPayment.couponCode,\n      });\n\n      // Generate redemption codes from snapshot\n      for (const item of cartSnapshot) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          packageId: item.packageId,\n          quantity: item.quantity,\n          priceAtPurchase: item.price,\n        });\n\n        for (let i = 0; i < item.quantity; i++) {\n          const code = generateRedemptionCode(item.aecoinAmount);\n          await storage.createRedemptionCode({\n            code,\n            packageId: item.packageId,\n            orderId: order.id,\n            aecoinAmount: item.aecoinAmount,\n            status: \"active\",\n          });\n\n          try {\n            await insertRedemptionCodeToFiveM(code, item.aecoinAmount);\n          } catch (fivemError) {\n            console.error(`Failed to insert code ${code} into FiveM:`, fivemError);\n          }\n        }\n      }\n\n      // Update order status to fulfilled\n      await storage.updateOrderStatus(order.id, 'fulfilled');\n\n      // Increment coupon usage if applied\n      if (pendingPayment.couponCode) {\n        const coupon = await storage.getCoupon(pendingPayment.couponCode);\n        if (coupon) {\n          await storage.incrementCouponUse(coupon.id);\n        }\n      }\n\n      // Clear cart and mark payment succeeded\n      await storage.clearCart(pendingPayment.userId);\n      await storage.updatePendingPaymentStatus(billId, 'succeeded');\n\n      // Send email confirmation (soft fail)\n      try {\n        const user = await storage.getUser(pendingPayment.userId);\n        if (user?.email) {\n          const redemptionCodes = await storage.getOrderRedemptionCodes(order.id);\n          const codesWithPackageNames = redemptionCodes.map((code, idx) => ({\n            code: code.code,\n            packageName: cartSnapshot[idx]?.packageName || 'AECOIN Package'\n          }));\n          \n          await sendOrderConfirmationEmail(\n            user.email,\n            order.id,\n            order.finalAmount,\n            codesWithPackageNames\n          );\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send order confirmation email:\", emailError);\n      }\n\n      console.log(`\u2713 Order ${order.id} fulfilled via Billplz`);\n      res.redirect(`/orders?payment=success&provider=billplz`);\n    } catch (error) {\n      console.error(\"Billplz return error:\", error);\n      res.redirect(`/payment/failed?reason=server_error`);\n    }\n  });\n\n  // ============================================\n  // ADMIN ROUTES - Protected by requireAdmin middleware\n  // ============================================\n\n  // Admin: Get all orders with filters\n  app.get(\"/api/admin/orders\", requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      \n      // Enrich orders with user information\n      const enrichedOrders = await Promise.all(\n        orders.map(async (order) => {\n          const user = await storage.getUser(order.userId);\n          const orderItems = await storage.getOrderItems(order.id);\n          const redemptionCodes = await storage.getOrderRedemptionCodes(order.id);\n          \n          // Fetch package names for each order item\n          const enrichedOrderItems = await Promise.all(\n            orderItems.map(async (item) => {\n              const pkg = await storage.getPackage(item.packageId);\n              return {\n                packageName: pkg?.name || \"Unknown Package\",\n                quantity: item.quantity,\n                price: item.priceAtPurchase\n              };\n            })\n          );\n          \n          return {\n            ...order,\n            userName: user?.username || \"Unknown User\",\n            userEmail: user?.email || \"no-email@example.com\",\n            orderItems: enrichedOrderItems,\n            redemptionCodes: redemptionCodes.map(code => ({\n              code: code.code\n            }))\n          };\n        })\n      );\n      \n      res.json(enrichedOrders);\n    } catch (error: any) {\n      console.error(\"Admin orders fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Admin: Update order status\n  app.patch(\"/api/admin/orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error: any) {\n      console.error(\"Admin order update error:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Admin: Create package\n  app.post(\"/api/admin/packages\", requireAdmin, async (req, res) => {\n    try {\n      const pkg = await storage.createPackage(req.body);\n      res.json(pkg);\n    } catch (error: any) {\n      console.error(\"Admin package creation error:\", error);\n      res.status(500).json({ message: \"Failed to create package\" });\n    }\n  });\n\n  // Admin: Update package\n  app.patch(\"/api/admin/packages/:id\", requireAdmin, async (req, res) => {\n    try {\n      const pkg = await storage.updatePackage(req.params.id, req.body);\n      if (!pkg) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json(pkg);\n    } catch (error: any) {\n      console.error(\"Admin package update error:\", error);\n      res.status(500).json({ message: \"Failed to update package\" });\n    }\n  });\n\n  // Admin: Delete package\n  app.delete(\"/api/admin/packages/:id\", requireAdmin, async (req, res) => {\n    try {\n      const success = await storage.deletePackage(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json({ message: \"Package deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Admin package deletion error:\", error);\n      res.status(500).json({ message: \"Failed to delete package\" });\n    }\n  });\n\n  // Admin: Get all coupons\n  app.get(\"/api/admin/coupons\", requireAdmin, async (req, res) => {\n    try {\n      const coupons = await storage.getAllCoupons();\n      res.json(coupons);\n    } catch (error: any) {\n      console.error(\"Admin coupons fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch coupons\" });\n    }\n  });\n\n  // Admin: Create coupon\n  app.post(\"/api/admin/coupons\", requireAdmin, async (req, res) => {\n    try {\n      const coupon = await storage.createCoupon(req.body);\n      res.json(coupon);\n    } catch (error: any) {\n      console.error(\"Admin coupon creation error:\", error);\n      res.status(500).json({ message: \"Failed to create coupon\" });\n    }\n  });\n\n  // Admin: Update coupon\n  app.patch(\"/api/admin/coupons/:id\", requireAdmin, async (req, res) => {\n    try {\n      const coupon = await storage.updateCoupon(req.params.id, req.body);\n      if (!coupon) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json(coupon);\n    } catch (error: any) {\n      console.error(\"Admin coupon update error:\", error);\n      res.status(500).json({ message: \"Failed to update coupon\" });\n    }\n  });\n\n  // Admin: Delete coupon\n  app.delete(\"/api/admin/coupons/:id\", requireAdmin, async (req, res) => {\n    try {\n      const success = await storage.deleteCoupon(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json({ message: \"Coupon deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Admin coupon deletion error:\", error);\n      res.status(500).json({ message: \"Failed to delete coupon\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n", "import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - Discord OAuth for regular users, username/password for admins\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  discordId: varchar(\"discord_id\").unique(), // nullable for admin users\n  email: text(\"email\").notNull(),\n  username: text(\"username\").notNull().unique(), // unique for admin login\n  avatar: text(\"avatar\"),\n  passwordHash: text(\"password_hash\"), // for admin users only\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Packages table - AECOIN packages for sale\nexport const packages = pgTable(\"packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }), // Original price before discount\n  aecoinAmount: integer(\"aecoin_amount\").notNull(), // Amount of AECOIN\n  codesPerPackage: integer(\"codes_per_package\").notNull().default(1), // How many codes to generate\n  featured: boolean(\"featured\").default(false),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertPackageSchema = createInsertSchema(packages).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertPackage = z.infer<typeof insertPackageSchema>;\nexport type Package = typeof packages.$inferSelect;\n\n// Cart items table\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id, { onDelete: \"cascade\" }),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\n\n// Pending payments table - Tracks payment intent/bill creation before completion\nexport const pendingPayments = pgTable(\"pending_payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  provider: text(\"provider\").notNull(), // toyyibpay, billplz\n  externalId: text(\"external_id\").notNull().unique(), // paymentIntentId or billCode\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"MYR\"),\n  status: text(\"status\").notNull().default(\"created\"), // created, processing, succeeded, failed, cancelled, expired\n  cartSnapshot: text(\"cart_snapshot\").notNull(), // JSON string of cart items\n  couponCode: text(\"coupon_code\"),\n  metadata: text(\"metadata\"), // JSON string for additional data\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertPendingPaymentSchema = createInsertSchema(pendingPayments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertPendingPayment = z.infer<typeof insertPendingPaymentSchema>;\nexport type PendingPayment = typeof pendingPayments.$inferSelect;\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  finalAmount: decimal(\"final_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, fulfilled, failed, cancelled\n  paymentMethod: text(\"payment_method\").notNull(), // toyyibpay, billplz\n  paymentId: text(\"payment_id\").unique(), // External payment ID from ToyyibPay/Billplz - must be unique for idempotency\n  couponCode: text(\"coupon_code\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id, { onDelete: \"cascade\" }),\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id),\n  quantity: integer(\"quantity\").notNull(),\n  priceAtPurchase: decimal(\"price_at_purchase\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\n\n// Redemption codes table - Auto-generated AECOIN codes\nexport const redemptionCodes = pgTable(\"redemption_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(), // The actual redemption code\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id),\n  aecoinAmount: integer(\"aecoin_amount\").notNull(), // AECOIN value for this code\n  status: text(\"status\").notNull().default(\"active\"), // active, redeemed, expired\n  redeemedAt: timestamp(\"redeemed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\"), // Optional expiry\n});\n\nexport const insertRedemptionCodeSchema = createInsertSchema(redemptionCodes).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertRedemptionCode = z.infer<typeof insertRedemptionCodeSchema>;\nexport type RedemptionCode = typeof redemptionCodes.$inferSelect;\n\n// Coupons table - Discount codes\nexport const coupons = pgTable(\"coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  discountType: text(\"discount_type\").notNull(), // percentage, fixed\n  discountValue: decimal(\"discount_value\", { precision: 10, scale: 2 }).notNull(),\n  minPurchase: decimal(\"min_purchase\", { precision: 10, scale: 2 }).default(\"0\"),\n  maxUses: integer(\"max_uses\"), // null = unlimited\n  currentUses: integer(\"current_uses\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  currentUses: true,\n  createdAt: true,\n});\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type Coupon = typeof coupons.$inferSelect;\n\n// Player rankings table - Leaderboard data\nexport const playerRankings = pgTable(\"player_rankings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  playerName: text(\"player_name\").notNull(), // In-game name\n  stars: integer(\"stars\").notNull().default(0), // Achievement/score system\n  rank: integer(\"rank\").notNull(), // Position in leaderboard\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertPlayerRankingSchema = createInsertSchema(playerRankings).omit({\n  id: true,\n  updatedAt: true,\n});\nexport type InsertPlayerRanking = z.infer<typeof insertPlayerRankingSchema>;\nexport type PlayerRanking = typeof playerRankings.$inferSelect;\n", "import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\nimport ws from \"ws\";\n\n// Configure WebSocket for Neon - disable SSL verification for self-signed certs\nclass WebSocketWithoutSSLVerification extends ws {\n  constructor(address: string, protocols?: string | string[]) {\n    super(address, protocols, {\n      rejectUnauthorized: false\n    });\n  }\n}\n\nneonConfig.webSocketConstructor = WebSocketWithoutSSLVerification as any;\n\nconst pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle(pool, { schema });\n", "import { \n  type User, type InsertUser,\n  type Package, type InsertPackage,\n  type CartItem, type InsertCartItem,\n  type Order, type InsertOrder,\n  type OrderItem, type InsertOrderItem,\n  type RedemptionCode, type InsertRedemptionCode,\n  type Coupon, type InsertCoupon,\n  type PendingPayment, type InsertPendingPayment,\n  type PlayerRanking, type InsertPlayerRanking,\n  users, packages, cartItems, orders, orderItems, redemptionCodes, coupons, pendingPayments, playerRankings\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByDiscordId(discordId: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createAdminUser(username: string, email: string, passwordHash: string): Promise<User>;\n  \n  // Package operations\n  getAllPackages(): Promise<Package[]>;\n  getPackage(id: string): Promise<Package | undefined>;\n  createPackage(pkg: InsertPackage): Promise<Package>;\n  updatePackage(id: string, pkg: Partial<InsertPackage>): Promise<Package | undefined>;\n  deletePackage(id: string): Promise<boolean>;\n  \n  // Cart operations\n  getCartItems(userId: string): Promise<CartItem[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItemQuantity(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(userId: string): Promise<boolean>;\n  \n  // Order operations\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrderByPaymentId(paymentId: string): Promise<Order | undefined>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string, paymentId?: string): Promise<Order | undefined>;\n  \n  // Order items operations\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  \n  // Redemption code operations\n  createRedemptionCode(code: InsertRedemptionCode): Promise<RedemptionCode>;\n  getOrderRedemptionCodes(orderId: string): Promise<RedemptionCode[]>;\n  redeemCode(code: string): Promise<RedemptionCode | undefined>;\n  \n  // Coupon operations\n  getCoupon(code: string): Promise<Coupon | undefined>;\n  getAllCoupons(): Promise<Coupon[]>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon | undefined>;\n  deleteCoupon(id: string): Promise<boolean>;\n  incrementCouponUse(id: string): Promise<boolean>;\n  \n  // Pending payment operations\n  createPendingPayment(payment: InsertPendingPayment): Promise<PendingPayment>;\n  getPendingPaymentByExternalId(externalId: string): Promise<PendingPayment | undefined>;\n  updatePendingPaymentStatus(externalId: string, status: string): Promise<PendingPayment | undefined>;\n  \n  // Player rankings operations\n  getAllPlayerRankings(): Promise<PlayerRanking[]>;\n  getPlayerRanking(userId: string): Promise<PlayerRanking | undefined>;\n  createOrUpdatePlayerRanking(ranking: InsertPlayerRanking): Promise<PlayerRanking>;\n  getTopPlayers(limit: number): Promise<PlayerRanking[]>;\n}\n\nexport class DbStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByDiscordId(discordId: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.discordId, discordId)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async createAdminUser(username: string, email: string, passwordHash: string): Promise<User> {\n    const result = await db.insert(users).values({\n      username,\n      email,\n      passwordHash,\n      isAdmin: true,\n      discordId: null,\n      avatar: null,\n    }).returning();\n    return result[0];\n  }\n\n  // Package operations\n  async getAllPackages(): Promise<Package[]> {\n    return await db.select().from(packages).orderBy(asc(packages.price));\n  }\n\n  async getPackage(id: string): Promise<Package | undefined> {\n    const result = await db.select().from(packages).where(eq(packages.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPackage(pkg: InsertPackage): Promise<Package> {\n    const result = await db.insert(packages).values(pkg).returning();\n    return result[0];\n  }\n\n  async updatePackage(id: string, pkg: Partial<InsertPackage>): Promise<Package | undefined> {\n    const result = await db.update(packages).set(pkg).where(eq(packages.id, id)).returning();\n    return result[0];\n  }\n\n  async deletePackage(id: string): Promise<boolean> {\n    const result = await db.delete(packages).where(eq(packages.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<CartItem[]> {\n    return await db.select().from(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const existing = await db.select().from(cartItems)\n      .where(and(\n        eq(cartItems.userId, item.userId),\n        eq(cartItems.packageId, item.packageId)\n      ))\n      .limit(1);\n\n    if (existing[0]) {\n      // Update quantity\n      const updated = await db.update(cartItems)\n        .set({ quantity: existing[0].quantity + (item.quantity || 1) })\n        .where(eq(cartItems.id, existing[0].id))\n        .returning();\n      return updated[0];\n    } else {\n      // Insert new\n      const result = await db.insert(cartItems).values(item).returning();\n      return result[0];\n    }\n  }\n\n  async updateCartItemQuantity(id: string, quantity: number): Promise<CartItem | undefined> {\n    const result = await db.update(cartItems).set({ quantity }).where(eq(cartItems.id, id)).returning();\n    return result[0];\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.userId, userId));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getOrderByPaymentId(paymentId: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.paymentId, paymentId)).limit(1);\n    return result[0];\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId)).orderBy(sql`${orders.createdAt} DESC`);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(sql`${orders.createdAt} DESC`);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async updateOrderStatus(id: string, status: string, paymentId?: string): Promise<Order | undefined> {\n    const updateData: any = { status };\n    if (paymentId) {\n      updateData.paymentId = paymentId;\n    }\n    if (status === 'fulfilled' || status === 'completed') {\n      updateData.completedAt = new Date();\n    }\n    const result = await db.update(orders).set(updateData).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n  // Order items operations\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const result = await db.insert(orderItems).values(orderItem).returning();\n    return result[0];\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return await db.select().from(orderItems).where(eq(orderItems.orderId, orderId));\n  }\n\n  // Redemption code operations\n  async createRedemptionCode(code: InsertRedemptionCode): Promise<RedemptionCode> {\n    const result = await db.insert(redemptionCodes).values(code).returning();\n    return result[0];\n  }\n\n  async getOrderRedemptionCodes(orderId: string): Promise<RedemptionCode[]> {\n    return await db.select().from(redemptionCodes).where(eq(redemptionCodes.orderId, orderId));\n  }\n\n  async redeemCode(code: string): Promise<RedemptionCode | undefined> {\n    const result = await db.update(redemptionCodes)\n      .set({ status: 'redeemed', redeemedAt: new Date() })\n      .where(and(\n        eq(redemptionCodes.code, code),\n        eq(redemptionCodes.status, 'active')\n      ))\n      .returning();\n    return result[0];\n  }\n\n  // Coupon operations\n  async getCoupon(code: string): Promise<Coupon | undefined> {\n    const result = await db.select().from(coupons).where(eq(coupons.code, code)).limit(1);\n    return result[0];\n  }\n\n  async getAllCoupons(): Promise<Coupon[]> {\n    return await db.select().from(coupons).orderBy(sql`${coupons.createdAt} DESC`);\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const result = await db.insert(coupons).values(coupon).returning();\n    return result[0];\n  }\n\n  async updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon | undefined> {\n    const result = await db.update(coupons).set(coupon).where(eq(coupons.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCoupon(id: string): Promise<boolean> {\n    const result = await db.delete(coupons).where(eq(coupons.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async incrementCouponUse(id: string): Promise<boolean> {\n    const result = await db.update(coupons)\n      .set({ currentUses: sql`${coupons.currentUses} + 1` })\n      .where(eq(coupons.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Pending payment operations\n  async createPendingPayment(payment: InsertPendingPayment): Promise<PendingPayment> {\n    const result = await db.insert(pendingPayments).values(payment).returning();\n    return result[0];\n  }\n\n  async getPendingPaymentByExternalId(externalId: string): Promise<PendingPayment | undefined> {\n    const result = await db.select().from(pendingPayments).where(eq(pendingPayments.externalId, externalId)).limit(1);\n    return result[0];\n  }\n\n  async updatePendingPaymentStatus(externalId: string, status: string): Promise<PendingPayment | undefined> {\n    const result = await db.update(pendingPayments)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(pendingPayments.externalId, externalId))\n      .returning();\n    return result[0];\n  }\n\n  // Player rankings operations\n  async getAllPlayerRankings(): Promise<PlayerRanking[]> {\n    return await db.select().from(playerRankings).orderBy(sql`${playerRankings.rank} ASC`);\n  }\n\n  async getPlayerRanking(userId: string): Promise<PlayerRanking | undefined> {\n    const result = await db.select().from(playerRankings).where(eq(playerRankings.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async createOrUpdatePlayerRanking(ranking: InsertPlayerRanking): Promise<PlayerRanking> {\n    const existing = await this.getPlayerRanking(ranking.userId);\n    \n    if (existing) {\n      const result = await db.update(playerRankings)\n        .set({ ...ranking, updatedAt: new Date() })\n        .where(eq(playerRankings.userId, ranking.userId))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(playerRankings).values(ranking).returning();\n      return result[0];\n    }\n  }\n\n  async getTopPlayers(limit: number = 100): Promise<PlayerRanking[]> {\n    return await db.select()\n      .from(playerRankings)\n      .orderBy(sql`${playerRankings.rank} ASC`)\n      .limit(limit);\n  }\n}\n\nexport const storage = new DbStorage();\n", "const DISCORD_CLIENT_ID = process.env.DISCORD_CLIENT_ID!;\nconst DISCORD_CLIENT_SECRET = process.env.DISCORD_CLIENT_SECRET!;\n\n// Construct redirect URI based on environment\nconst getRedirectUri = () => {\n  if (process.env.DISCORD_REDIRECT_URI) {\n    return process.env.DISCORD_REDIRECT_URI;\n  }\n  \n  // Use REPLIT_DEV_DOMAIN for development, or fallback to localhost\n  if (process.env.REPLIT_DEV_DOMAIN) {\n    return `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/discord/callback`;\n  }\n  \n  return 'http://localhost:5000/api/auth/discord/callback';\n};\n\nconst DISCORD_REDIRECT_URI = getRedirectUri();\n\nexport function getDiscordAuthUrl(state: string): string {\n  const params = new URLSearchParams({\n    client_id: DISCORD_CLIENT_ID,\n    redirect_uri: DISCORD_REDIRECT_URI,\n    response_type: 'code',\n    scope: 'identify email',\n    state,\n  });\n\n  return `https://discord.com/api/oauth2/authorize?${params.toString()}`;\n}\n\nexport async function exchangeCodeForToken(code: string) {\n  const params = new URLSearchParams({\n    client_id: DISCORD_CLIENT_ID,\n    client_secret: DISCORD_CLIENT_SECRET,\n    grant_type: 'authorization_code',\n    code,\n    redirect_uri: DISCORD_REDIRECT_URI,\n  });\n\n  const response = await fetch('https://discord.com/api/oauth2/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to exchange code for token');\n  }\n\n  return await response.json();\n}\n\nexport async function getDiscordUserInfo(accessToken: string) {\n  const response = await fetch('https://discord.com/api/v10/users/@me', {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch Discord user info');\n  }\n\n  const user = await response.json();\n  return {\n    discordId: user.id,\n    username: user.username,\n    discriminator: user.discriminator,\n    avatar: user.avatar ? `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png` : null,\n    email: user.email,\n  };\n}\n", "import { Resend } from 'resend';\n\nlet connectionSettings: any;\n\nasync function getCredentials() {\n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=resend',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  if (!connectionSettings || (!connectionSettings.settings.api_key)) {\n    throw new Error('Resend not connected');\n  }\n  return {apiKey: connectionSettings.settings.api_key, fromEmail: connectionSettings.settings.from_email};\n}\n\nasync function getUncachableResendClient() {\n  const { apiKey, fromEmail } = await getCredentials();\n  return {\n    client: new Resend(apiKey),\n    fromEmail: fromEmail\n  };\n}\n\nexport async function sendOrderConfirmationEmail(\n  toEmail: string,\n  orderId: string,\n  orderTotal: string,\n  redemptionCodes: { code: string; packageName: string }[]\n) {\n  try {\n    const { client, fromEmail } = await getUncachableResendClient();\n\n    const codesHtml = redemptionCodes.map(({ code, packageName }) => `\n      <div style=\"background-color: #1a2942; border: 2px solid #FFD700; border-radius: 12px; padding: 16px; margin-bottom: 12px;\">\n        <p style=\"color: #9ca3af; margin: 0 0 8px 0; font-size: 14px;\">${packageName}</p>\n        <code style=\"color: #FFD700; font-size: 18px; font-weight: bold; letter-spacing: 2px;\">${code}</code>\n      </div>\n    `).join('');\n\n    const html = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Order Confirmation - AECOIN Store</title>\n        </head>\n        <body style=\"margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #0a0f1e;\">\n          <div style=\"max-width: 600px; margin: 0 auto; padding: 40px 20px;\">\n            <div style=\"background: linear-gradient(135deg, #1a2942 0%, #0d1d35 100%); border: 3px solid #FFD700; border-radius: 24px; padding: 40px; text-align: center;\">\n              <h1 style=\"color: #FFD700; font-size: 48px; margin: 0 0 16px 0; font-family: 'Bebas Neue', sans-serif; letter-spacing: 3px; text-shadow: 0 0 20px rgba(255, 215, 0, 0.5);\">\n                AECOIN STORE\n              </h1>\n              <div style=\"width: 60px; height: 4px; background-color: #FFD700; margin: 0 auto 32px auto;\"></div>\n              \n              <h2 style=\"color: #ffffff; font-size: 28px; margin: 0 0 24px 0;\">\n                Order Confirmed!\n              </h2>\n              \n              <div style=\"background-color: #0a0f1e; border-radius: 16px; padding: 24px; margin-bottom: 32px;\">\n                <p style=\"color: #9ca3af; margin: 0 0 8px 0; font-size: 14px;\">Order ID</p>\n                <p style=\"color: #ffffff; margin: 0 0 16px 0; font-size: 16px;\">#${orderId.slice(0, 8)}</p>\n                \n                <p style=\"color: #9ca3af; margin: 0 0 8px 0; font-size: 14px;\">Total Paid</p>\n                <p style=\"color: #FFD700; margin: 0; font-size: 32px; font-weight: bold;\">RM${orderTotal}</p>\n              </div>\n              \n              <h3 style=\"color: #FFD700; font-size: 24px; margin: 0 0 20px 0;\">\n                Your Redemption Codes\n              </h3>\n              \n              <p style=\"color: #9ca3af; margin: 0 0 24px 0; font-size: 14px;\">\n                Use these codes in GTA 5 to redeem your AECOIN\n              </p>\n              \n              ${codesHtml}\n              \n              <div style=\"margin-top: 40px; padding-top: 32px; border-top: 1px solid rgba(255, 215, 0, 0.2);\">\n                <p style=\"color: #9ca3af; font-size: 14px; margin: 0 0 16px 0;\">\n                  Thank you for your purchase! If you have any questions, please contact our support team.\n                </p>\n                <p style=\"color: #6b7280; font-size: 12px; margin: 0;\">\n                  This is an automated email. Please do not reply to this message.\n                </p>\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    const { data, error } = await client.emails.send({\n      from: fromEmail,\n      to: toEmail,\n      subject: `Order Confirmation #${orderId.slice(0, 8)} - AECOIN Store`,\n      html: html,\n    });\n\n    if (error) {\n      console.error('Failed to send email:', error);\n      throw error;\n    }\n\n    console.log('Order confirmation email sent:', data);\n    return data;\n  } catch (error) {\n    console.error('Error sending order confirmation email:', error);\n    throw error;\n  }\n}\n", "import mysql from 'mysql2/promise';\n\nlet pool: mysql.Pool | null = null;\n\nfunction createPool() {\n  if (!process.env.FIVEM_DB_HOST) {\n    throw new Error('FiveM database credentials not configured');\n  }\n\n  return mysql.createPool({\n    host: process.env.FIVEM_DB_HOST,\n    user: process.env.FIVEM_DB_USER,\n    password: process.env.FIVEM_DB_PASSWORD,\n    database: process.env.FIVEM_DB_NAME,\n    port: parseInt(process.env.FIVEM_DB_PORT || '3306'),\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n}\n\nexport function getPool() {\n  if (!pool) {\n    pool = createPool();\n  }\n  return pool;\n}\n\nexport async function insertRedemptionCodeToFiveM(code: string, creditValue: number) {\n  try {\n    const connection = getPool();\n    const table = process.env.FIVEM_DB_TABLE || 'ak4y_donatesystem_codes';\n    const codeColumn = process.env.FIVEM_DB_COLUMN_CODE || 'code';\n    const creditColumn = process.env.FIVEM_DB_COLUMN_CREDITSVALUE || 'credit';\n\n    const query = `INSERT INTO ${table} (${codeColumn}, ${creditColumn}) VALUES (?, ?)`;\n    \n    await connection.execute(query, [code, creditValue]);\n    \n    console.log(`\u2713 Inserted code ${code} with ${creditValue} credits into FiveM database`);\n    return true;\n  } catch (error) {\n    console.error('Failed to insert code into FiveM database:', error);\n    throw error;\n  }\n}\n\nexport async function testFiveMConnection() {\n  try {\n    const connection = getPool();\n    await connection.query('SELECT 1');\n    console.log('\u2713 FiveM database connection successful');\n    return true;\n  } catch (error) {\n    console.error('\u2717 FiveM database connection failed:', error);\n    return false;\n  }\n}\n", "const TOYYIBPAY_BASE_URL = 'https://toyyibpay.com';\n\ninterface CreateCategoryResponse {\n  CategoryCode: string;\n}\n\ninterface CreateBillResponse {\n  BillCode: string;\n}\n\ninterface BillTransaction {\n  billpaymentStatus: string;\n  billpaymentAmount: string;\n  billpaymentInvoiceNo: string;\n}\n\nlet categoryCode: string | null = null;\n\nasync function ensureCategoryExists(): Promise<string> {\n  if (categoryCode) {\n    return categoryCode;\n  }\n\n  if (!process.env.TOYYIBPAY_SECRET_KEY) {\n    throw new Error('TOYYIBPAY_SECRET_KEY not configured');\n  }\n\n  try {\n    const response = await fetch(`${TOYYIBPAY_BASE_URL}/index.php/api/createCategory`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        catname: 'AECOIN Store',\n        catdescription: 'GTA Online virtual currency packages',\n        userSecretKey: process.env.TOYYIBPAY_SECRET_KEY,\n      }),\n    });\n\n    const responseText = await response.text();\n    \n    let data: any;\n    try {\n      data = JSON.parse(responseText);\n    } catch (parseError) {\n      console.error('Failed to parse ToyyibPay response:', responseText);\n      throw new Error(`ToyyibPay API error: ${responseText}`);\n    }\n    \n    const catCode: string | undefined = Array.isArray(data) ? data[0]?.CategoryCode : data?.CategoryCode;\n    \n    if (!catCode) {\n      console.error('Invalid category response:', data);\n      throw new Error(`Failed to create ToyyibPay category: ${responseText}`);\n    }\n\n    categoryCode = catCode as string;\n    console.log('\u2713 ToyyibPay category created:', categoryCode);\n    \n    return categoryCode;\n  } catch (error) {\n    console.error('ToyyibPay category creation error:', error);\n    throw error;\n  }\n}\n\nexport async function createBill(params: {\n  billName: string;\n  billDescription: string;\n  billAmount: number;\n  billTo: string;\n  billEmail: string;\n  billPhone: string;\n  billExternalReferenceNo: string;\n  billReturnUrl: string;\n  billCallbackUrl: string;\n}): Promise<string> {\n  if (!process.env.TOYYIBPAY_SECRET_KEY) {\n    throw new Error('TOYYIBPAY_SECRET_KEY not configured');\n  }\n\n  const catCode = await ensureCategoryExists();\n\n  try {\n    const response = await fetch(`${TOYYIBPAY_BASE_URL}/index.php/api/createBill`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        userSecretKey: process.env.TOYYIBPAY_SECRET_KEY,\n        categoryCode: catCode,\n        billName: params.billName,\n        billDescription: params.billDescription,\n        billPriceSetting: '1',\n        billPayorInfo: '1',\n        billAmount: String(Math.round(params.billAmount * 100)),\n        billReturnUrl: params.billReturnUrl,\n        billCallbackUrl: params.billCallbackUrl,\n        billExternalReferenceNo: params.billExternalReferenceNo,\n        billTo: params.billTo,\n        billEmail: params.billEmail,\n        billPhone: params.billPhone || '0000000000',\n        billPaymentChannel: '2',\n        billChargeToCustomer: '1',\n      }),\n    });\n\n    const data = await response.json() as CreateBillResponse[];\n    \n    if (!data || !data[0]?.BillCode) {\n      throw new Error('Failed to create ToyyibPay bill');\n    }\n\n    const billCode = data[0].BillCode;\n    console.log('\u2713 ToyyibPay bill created:', billCode);\n    \n    return billCode;\n  } catch (error) {\n    console.error('ToyyibPay bill creation error:', error);\n    throw error;\n  }\n}\n\nexport function getPaymentUrl(billCode: string): string {\n  return `${TOYYIBPAY_BASE_URL}/${billCode}`;\n}\n\nexport async function getBillTransactions(billCode: string): Promise<BillTransaction[]> {\n  try {\n    const response = await fetch(`${TOYYIBPAY_BASE_URL}/index.php/api/getBillTransactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        billCode: billCode,\n        billpaymentStatus: '1',\n      }),\n    });\n\n    const data = await response.json() as BillTransaction[];\n    return data || [];\n  } catch (error) {\n    console.error('ToyyibPay transaction check error:', error);\n    return [];\n  }\n}\n", "import crypto from 'crypto';\n\nconst BILLPLZ_BASE_URL = 'https://www.billplz.com/api';\n\ninterface CreateCollectionResponse {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n}\n\ninterface CreateBillResponse {\n  id: string;\n  collection_id: string;\n  paid: boolean;\n  state: string;\n  amount: number;\n  paid_amount: number;\n  due_at: string;\n  email: string;\n  mobile: string | null;\n  name: string;\n  url: string;\n  reference_1_label: string | null;\n  reference_1: string | null;\n  reference_2_label: string | null;\n  reference_2: string | null;\n  redirect_url: string | null;\n  callback_url: string | null;\n  description: string;\n}\n\ninterface GetBillResponse {\n  id: string;\n  collection_id: string;\n  paid: boolean;\n  state: string;\n  amount: number;\n  paid_amount: number;\n  due_at: string;\n  email: string;\n  mobile: string | null;\n  name: string;\n  url: string;\n  paid_at: string | null;\n}\n\nlet collectionId: string | null = null;\n\nasync function ensureCollectionExists(): Promise<string> {\n  if (collectionId) {\n    return collectionId;\n  }\n\n  if (!process.env.BILLPLZ_SECRET_KEY) {\n    throw new Error('BILLPLZ_SECRET_KEY not configured');\n  }\n\n  try {\n    // Create collection for AECOIN Store\n    const response = await fetch(`${BILLPLZ_BASE_URL}/v3/collections`, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(process.env.BILLPLZ_SECRET_KEY + ':').toString('base64'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: 'AECOIN Store',\n        description: 'GTA Online virtual currency packages',\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Billplz collection creation failed:', errorText);\n      throw new Error(`Failed to create Billplz collection: ${errorText}`);\n    }\n\n    const data = await response.json() as CreateCollectionResponse;\n    \n    if (!data.id) {\n      console.error('Invalid collection response:', data);\n      throw new Error('Failed to create Billplz collection: No ID returned');\n    }\n\n    collectionId = data.id;\n    console.log('\u2713 Billplz collection created:', collectionId);\n    \n    return collectionId;\n  } catch (error) {\n    console.error('Billplz collection creation error:', error);\n    throw error;\n  }\n}\n\nexport async function createBill(params: {\n  description: string;\n  amount: number; // in MYR (will be converted to cents)\n  name: string;\n  email: string;\n  mobile?: string;\n  callbackUrl: string;\n  redirectUrl: string;\n  reference1Label?: string;\n  reference1?: string;\n}): Promise<CreateBillResponse> {\n  if (!process.env.BILLPLZ_SECRET_KEY) {\n    throw new Error('BILLPLZ_SECRET_KEY not configured');\n  }\n\n  const collId = await ensureCollectionExists();\n\n  try {\n    // Convert amount to cents (Billplz expects amount in cents)\n    const amountInCents = Math.round(params.amount * 100);\n\n    const billData: any = {\n      collection_id: collId,\n      description: params.description,\n      email: params.email,\n      name: params.name,\n      amount: amountInCents,\n      callback_url: params.callbackUrl,\n      redirect_url: params.redirectUrl,\n    };\n\n    if (params.mobile) {\n      billData.mobile = params.mobile;\n    }\n\n    if (params.reference1Label && params.reference1) {\n      billData.reference_1_label = params.reference1Label;\n      billData.reference_1 = params.reference1;\n    }\n\n    const response = await fetch(`${BILLPLZ_BASE_URL}/v3/bills`, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(process.env.BILLPLZ_SECRET_KEY + ':').toString('base64'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(billData),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Billplz bill creation failed:', errorText);\n      throw new Error(`Failed to create Billplz bill: ${errorText}`);\n    }\n\n    const data = await response.json() as CreateBillResponse;\n    \n    if (!data.id || !data.url) {\n      console.error('Invalid bill response:', data);\n      throw new Error('Failed to create Billplz bill: Invalid response');\n    }\n\n    console.log('\u2713 Billplz bill created:', data.id);\n    return data;\n  } catch (error) {\n    console.error('Billplz bill creation error:', error);\n    throw error;\n  }\n}\n\nexport async function getBill(billId: string): Promise<GetBillResponse> {\n  if (!process.env.BILLPLZ_SECRET_KEY) {\n    throw new Error('BILLPLZ_SECRET_KEY not configured');\n  }\n\n  try {\n    const response = await fetch(`${BILLPLZ_BASE_URL}/v3/bills/${billId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(process.env.BILLPLZ_SECRET_KEY + ':').toString('base64'),\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Billplz get bill failed:', errorText);\n      throw new Error(`Failed to get Billplz bill: ${errorText}`);\n    }\n\n    const data = await response.json() as GetBillResponse;\n    return data;\n  } catch (error) {\n    console.error('Billplz get bill error:', error);\n    throw error;\n  }\n}\n\nexport async function verifyBillPayment(billId: string): Promise<boolean> {\n  try {\n    const bill = await getBill(billId);\n    return bill.paid === true && bill.state === 'paid';\n  } catch (error) {\n    console.error('Billplz payment verification error:', error);\n    return false;\n  }\n}\n\n/**\n * Verify Billplz X-Signature callback authenticity\n * @param payload - The callback payload (as string)\n * @param signature - The X-Billplz-Signature header value\n * @returns true if signature is valid\n */\nexport function verifyBillplzSignature(payload: string, signature: string): boolean {\n  if (!process.env.BILLPLZ_SIGNATURE_KEY) {\n    console.warn('BILLPLZ_SIGNATURE_KEY not configured - skipping signature verification (DEVELOPMENT ONLY)');\n    return true; // Allow in development\n  }\n\n  try {\n    const expectedSignature = crypto\n      .createHmac('sha256', process.env.BILLPLZ_SIGNATURE_KEY)\n      .update(payload)\n      .digest('hex');\n    \n    return expectedSignature === signature;\n  } catch (error) {\n    console.error('Billplz signature verification error:', error);\n    return false;\n  }\n}\n", "import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    oauthState?: string;\n    loginMethod?: string;\n  }\n}\n"],
  "mappings": "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",
  "names": ["app", "express", "path", "sql", "eq", "redemptionCodes", "pool", "createBill", "crypto", "app", "eq", "err", "packages", "orders", "cartItems", "redemptionCodes", "createBill", "orderItems", "coupons", "path", "express", "log", "setupVite"]
}
