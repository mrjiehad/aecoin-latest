{"file_contents":{"DEPLOYMENT.md":{"content":"# AECOIN Store - Deployment Guide\n\nThis guide provides step-by-step instructions for deploying the AECOIN Store e-commerce website to production using Replit's deployment platform.\n\n---\n\n## Table of Contents\n\n1. [Pre-Deployment Checklist](#pre-deployment-checklist)\n2. [Environment Variables Setup](#environment-variables-setup)\n3. [Database Configuration](#database-configuration)\n4. [Stripe Integration Setup](#stripe-integration-setup)\n5. [Discord OAuth Setup](#discord-oauth-setup)\n6. [FiveM Database Integration](#fivem-database-integration)\n7. [Publishing the Application](#publishing-the-application)\n8. [Post-Deployment Configuration](#post-deployment-configuration)\n9. [Verification & Testing](#verification--testing)\n10. [Troubleshooting](#troubleshooting)\n\n---\n\n## Pre-Deployment Checklist\n\nBefore deploying, ensure you have:\n\n- [ ] Replit account with payment method added (required for deployments)\n- [ ] Stripe account with live API keys\n- [ ] Discord application credentials for OAuth\n- [ ] FiveM server database access credentials\n- [ ] Domain name (optional, for custom domain setup)\n- [ ] Neon PostgreSQL database or Replit database\n- [ ] Admin account credentials ready\n\n---\n\n## Environment Variables Setup\n\n### Required Environment Variables\n\nAll environment variables must be set as **Secrets** in Replit before deployment.\n\n#### 1. Stripe Configuration (REQUIRED)\n\n```\nSTRIPE_SECRET_KEY=sk_live_xxxxxxxxxxxxxxxxxxxxx\nVITE_STRIPE_PUBLIC_KEY=pk_live_xxxxxxxxxxxxxxxxxxxxx\nSTRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxxxxxxx\n```\n\n**How to get these:**\n1. Go to [Stripe Dashboard](https://dashboard.stripe.com)\n2. Navigate to Developers → API Keys\n3. Copy your **Live mode** Secret key and Publishable key\n4. For webhook secret: Go to Developers → Webhooks (see [Stripe Integration Setup](#stripe-integration-setup))\n\n#### 2. Discord OAuth (OPTIONAL - gracefully fails if not configured)\n\n```\nDISCORD_CLIENT_ID=your_discord_client_id\nDISCORD_CLIENT_SECRET=your_discord_client_secret\n```\n\n**How to get these:**\n1. Go to [Discord Developer Portal](https://discord.com/developers/applications)\n2. Create a new application or select existing one\n3. Copy Client ID from OAuth2 → General\n4. Generate and copy Client Secret\n\n#### 3. Database Configuration (REQUIRED)\n\nThe application uses Neon PostgreSQL. If you're using the built-in database:\n\n```\nDATABASE_URL=postgresql://username:password@host/database?sslmode=require\n```\n\nThis is automatically set if you created a Neon database in development.\n\n#### 4. FiveM Database Integration (OPTIONAL)\n\n```\nFIVEM_DB_HOST=your_fivem_mysql_host\nFIVEM_DB_PORT=3306\nFIVEM_DB_USER=your_fivem_db_user\nFIVEM_DB_PASSWORD=your_fivem_db_password\nFIVEM_DB_NAME=your_fivem_database_name\nFIVEM_DB_TABLE=redemption_codes\nFIVEM_DB_COLUMN_CODE=code\nFIVEM_DB_COLUMN_CREDITSVALUE=credits_value\n```\n\n#### 5. ToyyibPay Integration (OPTIONAL - Malaysian payment gateway)\n\n```\nTOYYIBPAY_SECRET_KEY=your_toyyibpay_secret_key\n```\n\n### Setting Secrets in Replit\n\n1. Open your Repl\n2. Click on \"Tools\" in the left sidebar\n3. Select \"Secrets\"\n4. Click \"New Secret\"\n5. Enter the key name and value\n6. Click \"Add Secret\"\n7. Repeat for all required environment variables\n\n**Note:** Secrets are automatically available to your deployed application.\n\n---\n\n## Database Configuration\n\n### Option 1: Using Existing Neon Database\n\nIf you already have a Neon database with data:\n\n1. Ensure `DATABASE_URL` is set in Secrets\n2. The database should already have all tables and data from development\n3. No additional steps needed\n\n### Option 2: Setting Up New Database for Production\n\n1. Create a new Neon database for production:\n   - Go to [Neon Console](https://console.neon.tech)\n   - Create a new project\n   - Copy the connection string\n\n2. Update the `DATABASE_URL` secret with the new connection string\n\n3. Run database migrations:\n   ```bash\n   npm run db:push\n   ```\n\n4. Import your data (if migrating from development):\n   - Export data from development database\n   - Import to production database using the provided SQL backup\n\n### Database Backup & Migration\n\nThe project includes sample data. To import:\n\n```bash\n# Connect to your production database and run the backup SQL file\npsql $DATABASE_URL < backup.sql\n```\n\n---\n\n## Stripe Integration Setup\n\n### Critical: Webhook Configuration\n\nStripe webhooks are REQUIRED for automatic order fulfillment.\n\n#### Step 1: Create Webhook Endpoint\n\n1. Go to [Stripe Dashboard → Webhooks](https://dashboard.stripe.com/webhooks)\n2. Click \"Add endpoint\"\n3. Enter your webhook URL:\n   ```\n   https://your-deployment-url.replit.app/api/webhooks/stripe\n   ```\n   (Replace with your actual deployment URL - you'll get this after publishing)\n\n4. Select events to listen for:\n   - `payment_intent.succeeded` (REQUIRED)\n   - `payment_intent.payment_failed` (RECOMMENDED)\n\n5. Click \"Add endpoint\"\n\n#### Step 2: Copy Webhook Secret\n\n1. Click on your newly created webhook\n2. Click \"Reveal\" next to \"Signing secret\"\n3. Copy the secret (starts with `whsec_`)\n4. Add it to your Replit Secrets as `STRIPE_WEBHOOK_SECRET`\n\n#### Step 3: Test Webhook\n\nAfter deployment:\n1. Go to Stripe Dashboard → Webhooks\n2. Click on your webhook\n3. Click \"Send test webhook\"\n4. Select `payment_intent.succeeded`\n5. Check your application logs for successful processing\n\n### Important Notes\n\n- **Development vs Production**: Always use **Live mode** keys for production\n- **Security**: Never commit API keys to code - always use Secrets\n- **Testing**: Test payments in Stripe's test mode before going live\n- **Webhook Fallback**: The app has a fallback mechanism that checks payment status if webhooks fail\n\n---\n\n## Discord OAuth Setup\n\n### Step 1: Configure OAuth Redirect URI\n\n1. Go to [Discord Developer Portal](https://discord.com/developers/applications)\n2. Select your application\n3. Go to OAuth2 → General\n4. Add redirect URI:\n   ```\n   https://your-deployment-url.replit.app/api/auth/discord/callback\n   ```\n\n5. Save changes\n\n### Step 2: Configure Scopes\n\nIn Discord OAuth2 settings, ensure these scopes are enabled:\n- `identify` (to get user ID and username)\n- `email` (to get user email)\n\n### Step 3: Test Login\n\nAfter deployment:\n1. Visit your deployed site\n2. Click \"Login with Discord\"\n3. Authorize the application\n4. Verify you're redirected back and logged in\n\n---\n\n## FiveM Database Integration\n\nThis integration automatically inserts redemption codes into your FiveM game server's database.\n\n### Configuration\n\n1. Set all FiveM database environment variables in Replit Secrets\n2. Ensure your FiveM MySQL database is accessible from the internet\n3. The table structure should match:\n\n```sql\nCREATE TABLE redemption_codes (\n    code VARCHAR(255) PRIMARY KEY,\n    credits_value INT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n```\n\n### Testing FiveM Integration\n\nAfter deployment:\n1. Make a test purchase\n2. Check your FiveM database for the new redemption codes\n3. Verify codes work in-game\n\n**Note:** FiveM integration is optional and will gracefully fail if not configured.\n\n---\n\n## Publishing the Application\n\n### Step 1: Prepare for Deployment\n\n1. Verify all secrets are set (see [Environment Variables Setup](#environment-variables-setup))\n2. Test the application in development mode:\n   ```bash\n   npm run dev\n   ```\n3. Ensure there are no errors in the console\n\n### Step 2: Configure Deployment Settings\n\nThe project is already configured for deployment:\n- Deployment type: **Autoscale** (recommended for e-commerce)\n- Build command: `npm run build`\n- Run command: `npm run start`\n\nThese are set in `.replit` file and don't need changes.\n\n### Step 3: Publish the Application\n\n1. Click the \"Publish\" button in Replit (top right corner)\n2. Or open \"Publishing\" tool from Tools menu\n3. Replit will automatically:\n   - Detect the deployment type (Autoscale)\n   - Build your application\n   - Deploy to production\n\n4. Review the deployment settings:\n   - Machine Type: Leave as default (recommended)\n   - Environment: Production\n   - Build: Automatic\n\n5. Click \"Publish\" to deploy\n\n### Step 4: Note Your Deployment URL\n\nAfter publishing, you'll receive a URL like:\n```\nhttps://your-repl-name.replit.app\n```\n\nCopy this URL - you'll need it for:\n- Stripe webhook configuration\n- Discord OAuth redirect URI\n- Sharing with customers\n\n### Deployment Types Explained\n\n**Autoscale (Recommended for AECOIN Store)**\n- Automatically scales based on traffic\n- Cost-effective (only pay for actual usage)\n- Best for e-commerce with variable traffic\n- Handles sudden traffic spikes\n\n**Alternative: Reserved VM**\n- Always running\n- Fixed monthly cost\n- Use if you need 24/7 uptime for other features\n- Better for high, consistent traffic\n\n---\n\n## Post-Deployment Configuration\n\n### 1. Update Stripe Webhook URL\n\n1. Go to Stripe Dashboard → Webhooks\n2. Update the endpoint URL with your deployment URL\n3. Test the webhook (see [Stripe Integration Setup](#stripe-integration-setup))\n\n### 2. Update Discord OAuth Redirect\n\n1. Go to Discord Developer Portal\n2. Update redirect URI with your deployment URL\n3. Test Discord login\n\n### 3. Create Admin Account\n\nIf you haven't already:\n\n1. Login via Discord OAuth or create regular account\n2. Access the database (via Neon Console or Replit Database tool)\n3. Update a user to be admin:\n\n```sql\nUPDATE users \nSET is_admin = true \nWHERE email = 'your-admin-email@example.com';\n```\n\n4. Set admin password:\n```sql\nUPDATE users\nSET password_hash = '$2b$10$...'  -- Use bcrypt to hash your password\nWHERE email = 'your-admin-email@example.com';\n```\n\nOr use the existing admin account from development:\n- Email: `admin@aeofficial.my`\n- Password: (from your database backup)\n\n### 4. Configure Custom Domain (Optional)\n\n1. In Replit Publishing tool, go to \"Domains\"\n2. Click \"Add custom domain\"\n3. Enter your domain name\n4. Follow DNS configuration instructions\n5. Update Stripe and Discord URIs with custom domain\n\n---\n\n## Verification & Testing\n\n### Production Checklist\n\nAfter deployment, verify:\n\n#### Frontend\n- [ ] Website loads correctly at deployment URL\n- [ ] All images and assets load\n- [ ] Navigation works properly\n- [ ] Responsive design works on mobile\n\n#### Authentication\n- [ ] Discord login works\n- [ ] Admin login works\n- [ ] Session persists across pages\n- [ ] Logout works correctly\n\n#### E-commerce Flow\n- [ ] Products display with correct prices\n- [ ] Add to cart works\n- [ ] Cart persists across pages\n- [ ] Coupon codes apply correctly\n- [ ] Checkout page loads\n\n#### Stripe Payment\n- [ ] Payment form displays\n- [ ] Test payment succeeds (use test card: 4242 4242 4242 4242)\n- [ ] Payment intent created in Stripe dashboard\n- [ ] Webhook receives payment_intent.succeeded event\n- [ ] Order created in database\n- [ ] Redemption codes generated\n- [ ] Email confirmation sent (if configured)\n\n#### Admin Panel\n- [ ] Admin can login\n- [ ] Can view all orders\n- [ ] Can manage packages\n- [ ] Can manage coupons\n- [ ] Can view redemption codes\n\n#### Database\n- [ ] Orders save correctly\n- [ ] Redemption codes created\n- [ ] FiveM database updated (if configured)\n- [ ] User data persists\n\n### Test Payment\n\nUse Stripe test cards:\n- Success: `4242 4242 4242 4242`\n- Decline: `4000 0000 0000 0002`\n- 3D Secure: `4000 0027 6000 3184`\n\n**Important:** Switch to live mode keys for real payments.\n\n---\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. Deployment Fails to Start\n\n**Symptoms:** Application shows error after publishing\n\n**Solutions:**\n- Check deployment logs in Replit Publishing tool\n- Verify all required secrets are set\n- Ensure `DATABASE_URL` is correct\n- Check for build errors\n\n#### 2. Database Connection Errors\n\n**Symptoms:** \"self-signed certificate\" or \"connection refused\"\n\n**Solutions:**\n- Verify `DATABASE_URL` is correct\n- Check Neon database is active (not suspended)\n- Ensure connection string includes `?sslmode=require`\n- The app already handles SSL certificate issues\n\n#### 3. Stripe Webhooks Not Working\n\n**Symptoms:** Payment succeeds but order not created\n\n**Solutions:**\n- Verify webhook URL is correct (use deployment URL)\n- Check webhook secret is set correctly\n- View webhook logs in Stripe Dashboard\n- The app has a fallback that creates orders even without webhooks\n\n#### 4. Discord Login Fails\n\n**Symptoms:** OAuth redirect error\n\n**Solutions:**\n- Verify redirect URI matches exactly (including https://)\n- Check Discord client ID and secret are correct\n- Ensure scopes are configured correctly\n\n#### 5. Orders Created but No Redemption Codes\n\n**Symptoms:** Order shows in admin but codes missing\n\n**Solutions:**\n- Check server logs for errors\n- Verify package has `codesPerPackage` set\n- Check database constraints\n\n#### 6. FiveM Integration Fails\n\n**Symptoms:** Codes not appearing in FiveM database\n\n**Solutions:**\n- Check FiveM database credentials\n- Verify FiveM database is accessible from internet\n- Check table structure matches expected format\n- Review server logs for connection errors\n\n### Viewing Logs\n\nTo debug issues:\n\n1. In Replit, open \"Publishing\" tool\n2. Click on your deployment\n3. View \"Logs\" tab\n4. Filter by error level\n5. Look for error messages and stack traces\n\n### Getting Help\n\nIf you encounter issues:\n\n1. Check this deployment guide\n2. Review application logs\n3. Check Stripe Dashboard for webhook logs\n4. Verify all environment variables are set\n5. Contact Replit support for platform issues\n\n---\n\n## Updating the Deployment\n\nTo update your deployed application:\n\n1. Make changes in your development environment\n2. Test thoroughly in development\n3. Click \"Publish\" again\n4. Replit will create a new deployment with your changes\n\n**Note:** Redeploying creates a snapshot of your current code.\n\n---\n\n## Security Best Practices\n\n1. **Never commit secrets** to code - always use Replit Secrets\n2. **Use HTTPS** - Replit provides this automatically\n3. **Validate webhooks** - Always verify Stripe webhook signatures\n4. **Secure admin routes** - Admin authentication is required\n5. **Database backups** - Regularly backup your Neon database\n6. **Monitor logs** - Check for suspicious activity\n7. **Update dependencies** - Keep packages up to date\n\n---\n\n## Cost Estimate\n\n### Replit Autoscale Deployment\n\nCosts based on usage:\n- Compute Units (CPU/Memory usage)\n- Requests served\n- Data transfer\n\nExpected costs for AECOIN Store:\n- Small traffic (< 1000 orders/month): $5-15/month\n- Medium traffic (1000-5000 orders/month): $15-40/month\n- High traffic (> 5000 orders/month): $40+/month\n\n### External Services\n\n- **Stripe**: 2.9% + RM 0.50 per transaction (Malaysia pricing)\n- **Neon Database**: Free tier available, paid plans from $19/month\n- **Discord OAuth**: Free\n- **FiveM Server**: Your existing hosting costs\n\n---\n\n## Maintenance & Monitoring\n\n### Regular Tasks\n\n**Weekly:**\n- Check deployment logs for errors\n- Monitor Stripe dashboard for failed payments\n- Review order completion rate\n\n**Monthly:**\n- Database backup\n- Review and update dependencies\n- Check for security updates\n- Monitor deployment costs\n\n**As Needed:**\n- Update package prices\n- Create new coupon codes\n- Manage user accounts\n- Review redemption code usage\n\n### Monitoring Tools\n\n- Replit deployment logs\n- Stripe Dashboard\n- Neon Database metrics\n- Application admin panel\n\n---\n\n## Support & Resources\n\n### Documentation Links\n\n- [Replit Deployments](https://docs.replit.com/hosting/deployments/about-deployments)\n- [Stripe Documentation](https://stripe.com/docs)\n- [Discord OAuth2](https://discord.com/developers/docs/topics/oauth2)\n- [Neon Postgres](https://neon.tech/docs/introduction)\n\n### Project Resources\n\n- Source code: This Replit project\n- Database schema: `shared/schema.ts`\n- API routes: `server/routes.ts`\n- Environment config: `.replit`\n\n---\n\n## Conclusion\n\nYour AECOIN Store is now ready for production deployment! Follow this guide step-by-step to ensure a smooth deployment process.\n\n**Remember:**\n- Test thoroughly before going live\n- Use production API keys (not test keys)\n- Monitor your deployment after launch\n- Keep secrets secure and never share them\n\nGood luck with your deployment! 🚀\n","size_bytes":16072},"design_guidelines.md":{"content":"# AECOIN STORE - Design Guidelines\n\n## Design Approach: Custom Gaming E-Commerce (Cyberpunk/Neon Aesthetic)\n\nThe design draws inspiration from cyberpunk gaming aesthetics, GTA Online visual style, and modern arcade culture, optimized for high conversion in the gaming e-commerce space.\n\n---\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode Primary Colors:**\n- Background: Deep black `#0A0A0A` with subtle dark gradients and textures\n- Primary Accent: Neon yellow `#FFD700` / `#FFCC00` with glowing effects\n- Secondary Accent: Electric cyan `#00E0FF` for highlights\n- Text: White with yellow hover states\n- Status: Neon green for operational indicators\n\n### B. Typography\n\n**Fonts:**\n- Headers: Bold futuristic fonts (Orbitron, Bungee, Montserrat Black)\n- Body: Clean sans-serif\n- Logo: Neon yellow with glow effect\n\n**Hierarchy:**\n- Large bold titles in neon yellow glowing text\n- Subtitles in white\n- Body text in clean sans-serif for readability\n\n### C. Layout System\n\n**Spacing:** Use Tailwind units of 4, 6, 8, 12, 16, 20, 24 (e.g., `p-4`, `h-8`, `m-12`)\n\n**Grid Systems:**\n- Package cards: 5-column grid (responsive stacking)\n- Gallery: Masonry grid layout\n- Features: 4-column icon layout\n- Mobile-first responsive design\n\n### D. Component Library\n\n**Navigation:**\n- Sticky header with subtle shadow on scroll\n- Logo text \"AECOIN STORE\" (left)\n- Navigation links with white → yellow hover\n- Shopping cart icon with yellow badge counter (right)\n\n**Buttons:**\n- Primary: Solid yellow with neon glow on hover\n- Secondary: Outlined yellow with glow on hover\n- Large CTAs throughout for high conversion\n\n**Cards:**\n- Dark background with yellow border glow\n- Product images with pricing\n- Hover effects: enhanced glow\n- Strike-through pricing for discounts\n\n**Accordions:**\n- Black background with yellow headers\n- Clean expand/collapse animations\n\n**Images:**\n- Gallery images with yellow border glow on hover\n- Hero: Full-width cinematic GTA-style cityscape/arcade with dark overlay gradient\n- Product cards: Gaming visuals (controllers, PCs, GTA scenes)\n- Parallax background effects\n\n### E. Visual Effects\n\n**Animations:**\n- Soft glowing shadows on interactive elements\n- Hover animations with neon glow\n- Floating coin animation/neon particles in hero\n- Smooth scroll\n- Micro-animations on hover\n- Parallax hero background\n\n**Effects:**\n- Neon button glow\n- Yellow border glow on cards\n- Dark overlay gradients for readability\n- Blurred backgrounds for outline buttons on images\n\n---\n\n## Page Structure\n\n### 1. Header/Navbar\nSticky with logo left, navigation center, cart icon right, yellow hover states\n\n### 2. Hero Section\nFull-width cinematic background (GTA city/arcade), centered title in neon yellow glow, subtitle, two large CTA buttons (solid + outlined), floating coin animation\n\n### 3. Packages Section\nTitle in bold neon, highlight bar with limited offer, 5 package cards with product images, pricing (strike-through), \"Add to Cart\" buttons with glow\n\n### 4. Gallery Section\n\"GTA GALLERY\" title, masonry grid with hover glow, full-width CTA button below\n\n### 5. How It Works\n4-step icons with yellow circle glow, 3 highlight features with neon badges (Instant Delivery, 100% Secure, 24/7 Support)\n\n### 6. FAQ Section\nTitle, accordion cards with black background and yellow headers, gaming-focused Q&As\n\n### 7. Footer\nThree-column layout (company info, quick links, info links), bottom bar with copyright, operational status in neon green, \"GET IN TOUCH\" CTA button\n\n---\n\n## UX Principles\n\n- Always keep CTAs visible and glowing\n- Responsive mobile-first design (cards stack, hero text centered)\n- Smooth transitions and micro-interactions\n- High contrast for readability against dark backgrounds\n- Strategic use of neon accents to guide user flow\n- Parallax and floating elements for depth and engagement\n\n---\n\n## Images\n\n**Hero Image:** Large full-width cinematic GTA-style cityscape or neon arcade background with dark overlay gradient for text readability\n\n**Product Cards:** Gaming-themed visuals (neon controllers, arcade machines, gaming desk setups, GTA scenes)\n\n**Gallery:** Collection of neon-style gaming images (controllers, gaming PCs, GTA Online scenes) in masonry layout","size_bytes":4214},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AECOIN Store\n\n## Overview\n\nAECOIN Store is a gaming e-commerce platform for selling virtual GTA Online currency (AECOIN packages). The application features a cyberpunk/neon-themed dark interface, Discord OAuth authentication, dual payment gateways (ToyyibPay + Billplz), and automated code delivery via email and FiveM database integration.\n\n## Recent Updates (Production Hardening & Payment Gateway Optimization - COMPLETED)\n\n### Completed (Critical Security Fixes):\n1. **PendingPayment System** - Prevents cart tampering and payment fraud\n   - Database table tracks payment intent before completion\n   - Stores cart snapshot, amount, currency for verification\n   - Unique constraint on externalId (paymentIntentId/billCode)\n\n2. **Payment Result Pages** - Better user experience\n   - /payment/pending - Loading state during verification\n   - /payment/cancelled - Payment cancellation handling\n   - /payment/failed - Error page with troubleshooting\n\n3. **Stripe Removal** - Streamlined to Malaysian payment gateways only ✅\n   - Removed Stripe payment gateway completely\n   - Updated all frontend/backend code to remove Stripe references\n   - Updated environment variables and documentation\n   - Simplified payment flow to focus on local payment methods\n\n4. **ToyyibPay Production Security** - Malaysian payment gateway hardening ✅\n   - PendingPayment integration with cart snapshot\n   - Server-side transaction verification via getBillTransactions\n   - Amount matching with ToyyibPay cents format handling\n   - Idempotency checks prevent duplicate order creation\n   - Removed vulnerable /api/complete-toyyibpay-order endpoint\n   - Return handler validates against PendingPayment, not live cart\n   - Proper error handling with user-friendly redirects\n\n5. **Admin Dashboard** - Complete operations management system ✅\n   - Admin role system with isAdmin column in users table\n   - requireAdmin middleware protecting all admin routes\n   - Admin Orders Page: View all orders, filter by status, search, update status, view codes\n   - Admin Packages Page: Full CRUD operations, mark popular packages\n   - Admin Coupons Page: Full CRUD operations with validation (code format, expiry, limits)\n   - Admin navigation in header dropdown (visible only to admins)\n   - Access control: Non-admin users shown \"ACCESS DENIED\"\n   - Cyberpunk aesthetic matching main site design\n\n6. **Billplz Production Security** - Second Malaysian payment gateway ✅\n   - PendingPayment integration with cart snapshot (prevents cart tampering)\n   - X-Signature callback verification using raw body and HMAC-SHA256\n   - Raw body middleware (express.text) for signature verification\n   - Server-side bill verification via Billplz API\n   - Amount matching with Billplz cents format handling\n   - Idempotency checks prevent duplicate order creation\n   - Return handler validates against PendingPayment, not live cart\n   - Security parity with ToyyibPay flow\n   - Required environment variables: BILLPLZ_SECRET_KEY, BILLPLZ_SIGNATURE_KEY\n\n### Next Phase:\n7. Email domain verification (aeofficial.my on Resend)\n8. End-to-end testing of both payment gateways\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Tooling**\n- React with TypeScript for type safety and component development\n- Vite for fast development builds and hot module replacement\n- Wouter for lightweight client-side routing\n- TanStack Query for server state management and data fetching\n- shadcn/ui component library with Radix UI primitives for accessible UI components\n- Tailwind CSS for utility-first styling with custom cyberpunk/neon design tokens\n\n**Design System**\n- Dark mode with cyberpunk aesthetic (deep black backgrounds, neon yellow/cyan accents)\n- Custom fonts: Bebas Neue, Rajdhani, Teko for headers; sans-serif for body text\n- Neon glow effects and hover animations throughout\n- Mobile-first responsive grid layouts\n\n**Key Pages & Components**\n- Home page with hero slider, package cards, gallery, FAQ, and \"how it works\" sections\n- Rankings page with player leaderboard and top 3 podium display\n- Checkout page with two payment options: ToyyibPay (Malaysia), Billplz (Malaysia)\n- Orders page for viewing purchase history and redemption codes\n- Reusable components: Header with cart, PackageCard, CartDrawer, Footer\n\n### Backend Architecture\n\n**Server Framework**\n- Express.js server with TypeScript\n- Session-based authentication using express-session\n- Middleware for JSON parsing, URL encoding, and CORS handling\n\n**API Structure**\n- RESTful endpoints under `/api` namespace\n- Authentication routes: `/api/auth/discord`, `/api/auth/discord/callback`, `/api/auth/me`, `/api/auth/logout`\n- Resource routes: packages, cart, orders, coupons, checkout, rankings\n- Rankings routes: `/api/rankings` (all players), `/api/rankings/top/:limit` (top N players)\n- All routes require authentication via session middleware except OAuth flow and rankings (public)\n\n**Business Logic Flow**\n1. User authenticates via Discord OAuth\n2. Browses and adds AECOIN packages to cart\n3. Proceeds to checkout with optional coupon codes\n4. Stripe creates payment intent and processes payment\n5. Upon successful payment, system generates unique redemption codes\n6. Codes are inserted into FiveM MySQL database for in-game redemption\n7. Order confirmation email sent with redemption codes via Resend\n\n### Data Storage\n\n**Primary Database (PostgreSQL via Neon)**\n- Drizzle ORM for type-safe database queries\n- Schema includes: users, packages, cart_items, orders, order_items, redemption_codes, coupons, player_rankings\n- UUID primary keys with automatic generation\n- Foreign key constraints with cascade deletes for data integrity\n- Player rankings table stores leaderboard data with stars (achievement points) and rank positions\n\n**FiveM Database (MySQL)**\n- Separate MySQL connection pool for external FiveM game server\n- Inserts redemption codes with credit values into `ak4y_donatesystem_codes` table\n- Configurable table/column names via environment variables\n\n### Authentication & Authorization\n\n**Discord OAuth 2.0**\n- PKCE flow with state parameter for CSRF protection\n- Scopes: `identify`, `email`\n- Stores Discord ID, username, email, and avatar in user table\n- Session-based authentication with secure HTTP-only cookies\n- 7-day session expiration\n\n**Session Management**\n- PostgreSQL session store via connect-pg-simple (if configured)\n- In-memory store fallback for development\n- Secure cookies in production with SameSite and HTTPS enforcement\n\n### Payment Processing\n\n**Malaysian Payment Gateways**\n- ToyyibPay and Billplz for local payment methods (FPX, online banking, cards, e-wallets)\n- Server-side bill creation and verification\n- Callback handling for payment completion\n- Automatic order status updates upon successful payment\n\n**Flow**\n1. Frontend requests bill creation with order total and optional coupon\n2. Backend creates ToyyibPay/Billplz bill and returns payment URL\n3. User is redirected to payment gateway to complete payment\n4. Gateway processes payment and sends callback to backend\n5. Backend verifies payment, creates order, generates codes\n6. Codes inserted into FiveM database and emailed to user\n\n## External Dependencies\n\n### Third-Party Services\n\n**ToyyibPay** - Malaysian payment gateway (FPX, online banking)\n- Required environment variable: `TOYYIBPAY_SECRET_KEY`\n- Bills API integration with server-side transaction verification\n\n**Billplz** - Malaysian payment gateway (FPX, cards, e-wallets)\n- Required environment variables: `BILLPLZ_SECRET_KEY`, `BILLPLZ_SIGNATURE_KEY`\n- Bills API v3 with X-Signature HMAC verification\n\n**Discord** - OAuth authentication provider\n- Required environment variables: `DISCORD_CLIENT_ID`, `DISCORD_CLIENT_SECRET`, `DISCORD_REDIRECT_URI`\n- OAuth scopes: identify, email\n\n**Resend** - Transactional email service for order confirmations\n- Uses Replit Connectors API to fetch credentials dynamically\n- Sends HTML emails with redemption codes and order details\n\n**Neon** - Serverless PostgreSQL database\n- Required environment variable: `DATABASE_URL`\n- WebSocket-based connection pooling\n\n**FiveM** - Game server database integration (MySQL)\n- Required environment variables: `FIVEM_DB_HOST`, `FIVEM_DB_USER`, `FIVEM_DB_PASSWORD`, `FIVEM_DB_NAME`, `FIVEM_DB_PORT`\n- Optional: `FIVEM_DB_TABLE`, `FIVEM_DB_COLUMN_CODE`, `FIVEM_DB_COLUMN_CREDITSVALUE`\n\n### Key NPM Packages\n\n**UI & Styling**\n- `@radix-ui/*` - Headless UI primitives (dialogs, dropdowns, tooltips, etc.)\n- `tailwindcss` - Utility-first CSS framework\n- `class-variance-authority` - Type-safe component variants\n- `lucide-react` - Icon library\n\n**State & Data Fetching**\n- `@tanstack/react-query` - Server state management\n- `react-hook-form` - Form validation\n- `zod` - Schema validation\n\n**Database & ORM**\n- `drizzle-orm` - TypeScript ORM\n- `@neondatabase/serverless` - Neon database driver\n- `mysql2` - MySQL client for FiveM database\n\n**Authentication & Payments**\n- `express-session` - Session middleware\n- `connect-pg-simple` - PostgreSQL session store\n\n**Email**\n- `resend` - Email API client","size_bytes":9161},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".25rem\", /* 4px */\n        md: \".25rem\", /* 4px */\n        sm: \".125rem\", /* 2px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n        neon: {\n          yellow: \"#FFD700\",  // Gold yellow\n          gold: \"#FFD700\",    // Alias for gold\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        bebas: [\"Bebas Neue\", \"sans-serif\"],\n        rajdhani: [\"Rajdhani\", \"sans-serif\"],\n        teko: [\"Teko\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-20px)\" },\n        },\n        \"pulse-glow\": {\n          \"0%, 100%\": { opacity: \"1\", filter: \"drop-shadow(0 0 8px #FFD700)\" },\n          \"50%\": { opacity: \"0.8\", filter: \"drop-shadow(0 0 20px #FFD700)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"float\": \"float 3s ease-in-out infinite\",\n        \"pulse-glow\": \"pulse-glow 2s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4737},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/content-1759279646910.md":{"content":"Premium AECOIN Currency\n\n# DOMINATE SANTOS\n\nBuild your criminal empire with instant AECOIN delivery. From luxury penthouses to military-grade vehicles.\n\nSTART EARNINGVIEW PACKAGES\n\nINSTANT DELIVERY\n\nCodes delivered in seconds\n\n100% SECURE\n\nBank-level encryption\n\n24/7 SUPPORT\n\nAlways here to help\n\n![GTA Character](https://mocha-cdn.com/01997b46-64bf-72b8-a931-56bdf004c711/1d2959c80fa027aeb3adbac881157b712171a194.png)\n\nGTA\n\nPREMIUM CURRENCY\n\n## CHOOSE YOUR POWER\n\nUnlock the full potential of Los Santos with our instant AECOIN packages\n\nLIMITED TIME - BONUS AECOIN ON ALL PACKAGES\n\n![500 AECOIN](https://images.unsplash.com/photo-1511512578047-dfb367046420?w=400&h=300&fit=crop)\n\n500\n\nAECOIN\n\nRM60RM65\n\nBUY NOW\n\n![1000 AECOIN](https://images.unsplash.com/photo-1542751371-adc38448a05e?w=400&h=300&fit=crop)\n\n1000\n\nAECOIN\n\nRM98RM110\n\nBUY NOW\n\n![3000 AECOIN](https://images.unsplash.com/photo-1493711662062-fa541adb3fc8?w=400&h=300&fit=crop)\n\n3000\n\nAECOIN\n\nRM295RM310\n\nBUY NOW\n\n![5000 AECOIN](https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop)\n\n5000\n\nAECOIN\n\nRM490RM510\n\nBUY NOW\n\n![10000 AECOIN](https://images.unsplash.com/photo-1550745165-9bc0b252726f?w=400&h=300&fit=crop)\n\n10000\n\nAECOIN\n\nRM980RM1000\n\nBUY NOW\n\nNeed a custom package? Contact our team for bulk discounts\n\nCONTACT SALES\n\nSHOWCASE\n\n## LOS SANTOS LIFESTYLE\n\nSee what awaits you in the most dangerous and lucrative city in the world\n\nAllVehiclesPropertiesWeaponsHeistsBusinessRacingTerritoryLifestyle\n\n![Luxury Supercars](https://images.unsplash.com/photo-1511512578047-dfb367046420?w=600&h=400&fit=crop)\n\nVehicles\n\n### Luxury Supercars\n\n![High-End Apartments](https://images.unsplash.com/photo-1542751371-adc38448a05e?w=600&h=400&fit=crop)\n\nProperties\n\n### High-End Apartments\n\n![Military Equipment](https://images.unsplash.com/photo-1493711662062-fa541adb3fc8?w=600&h=400&fit=crop)\n\nWeapons\n\n### Military Equipment\n\n![Criminal Operations](https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=600&h=400&fit=crop)\n\nHeists\n\n### Criminal Operations\n\n![Nightclub Empire](https://images.unsplash.com/photo-1550745165-9bc0b252726f?w=600&h=400&fit=crop)\n\nBusiness\n\n### Nightclub Empire\n\n![Street Racing](https://images.unsplash.com/photo-1556075798-4825dfaaf498?w=600&h=400&fit=crop)\n\nRacing\n\n### Street Racing\n\n![Gang Territory](https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=600&h=400&fit=crop)\n\nTerritory\n\n### Gang Territory\n\n![Penthouse Living](https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=600&h=400&fit=crop)\n\nLifestyle\n\n### Penthouse Living\n\n![GTA Character](https://images.unsplash.com/photo-1542751371-adc38448a05e?w=600&h=700&fit=crop)\n\n### YOUR STORY BEGINS\n\nRise from nothing to everything\n\n### BUILD YOUR CRIMINAL EMPIRE\n\nStart your journey in Los Santos with the resources you need. Our AECOIN packages give you the financial foundation to build the criminal empire you've always dreamed of.\n\n1\n\nPurchase your AECOIN package\n\n2\n\nRedeem codes in GTA Online\n\n3\n\nDominate Los Santos\n\nSTART YOUR EMPIRE\n\nSIMPLE PROCESS\n\n## HOW IT WORKS\n\nFrom purchase to playing – your journey to Los Santos dominance in four simple steps\n\n01\n\n### Choose Package\n\nSelect your desired AECOIN package from our premium collection\n\n02\n\n### Secure Payment\n\nPay safely with our trusted and encrypted payment gateway\n\n03\n\n### Instant Delivery\n\nReceive your activation codes immediately after payment\n\n04\n\n### Redeem & Dominate\n\nEnter codes in GTA Online and start your criminal empire\n\n### READY TO RULE LOS SANTOS?\n\nJoin thousands of players who trust us for their AECOIN needs\n\nSTART YOUR EMPIRE NOW\n\nSUPPORT\n\n## NEED ANSWERS?\n\nEverything you need to know about AECOIN and our services\n\n### How fast will I receive my AECOIN codes?\n\n### What payment methods are accepted?\n\n### Can I get a refund if needed?\n\n### How do I redeem my AECOIN codes?\n\n### Are the codes region-locked or platform-specific?\n\n### What if my code doesn't work?\n\n### Do you offer bulk discounts for large orders?\n\n### Is my personal information secure?\n\n### Still Have Questions?\n\nOur expert support team is available 24/7 to help you with any issues\n\nLIVE CHAT SUPPORTEMAIL SUPPORT\n\nStripeM-Inner","size_bytes":4195},"attached_assets/content-1759279843538.md":{"content":"Premium AECOIN Currency\n\n# DOMINATE SANTOS\n\nBuild your criminal empire with instant AECOIN delivery. From luxury penthouses to military-grade vehicles.\n\nSTART EARNINGVIEW PACKAGES\n\nINSTANT DELIVERY\n\nCodes delivered in seconds\n\n100% SECURE\n\nBank-level encryption\n\n24/7 SUPPORT\n\nAlways here to help\n\n![GTA Character](https://mocha-cdn.com/01997b46-64bf-72b8-a931-56bdf004c711/1d2959c80fa027aeb3adbac881157b712171a194.png)\n\nGTA\n\nPREMIUM CURRENCY\n\n## CHOOSE YOUR POWER\n\nUnlock the full potential of Los Santos with our instant AECOIN packages\n\nLIMITED TIME - BONUS AECOIN ON ALL PACKAGES\n\n![500 AECOIN](https://images.unsplash.com/photo-1511512578047-dfb367046420?w=400&h=300&fit=crop)\n\n500\n\nAECOIN\n\nRM60RM65\n\nBUY NOW\n\n![1000 AECOIN](https://images.unsplash.com/photo-1542751371-adc38448a05e?w=400&h=300&fit=crop)\n\n1000\n\nAECOIN\n\nRM98RM110\n\nBUY NOW\n\n![3000 AECOIN](https://images.unsplash.com/photo-1493711662062-fa541adb3fc8?w=400&h=300&fit=crop)\n\n3000\n\nAECOIN\n\nRM295RM310\n\nBUY NOW\n\n![5000 AECOIN](https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?w=400&h=300&fit=crop)\n\n5000\n\nAECOIN\n\nRM490RM510\n\nBUY NOW\n\n![10000 AECOIN](https://images.unsplash.com/photo-1550745165-9bc0b252726f?w=400&h=300&fit=crop)\n\n10000\n\nAECOIN\n\nRM980RM1000\n\nBUY NOW\n\nNeed a custom package? Contact our team for bulk discounts\n\nCONTACT SALES\n\nSHOWCASE\n\n## LOS SANTOS LIFESTYLE\n\nSee what awaits you in the most dangerous and lucrative city in the world\n\nAllVehiclesPropertiesWeaponsHeistsBusinessRacingTerritoryLifestyle\n\n![Luxury Supercars](https://images.unsplash.com/photo-1511512578047-dfb367046420?w=600&h=400&fit=crop)\n\nVehicles\n\n### Luxury Supercars\n\n![High-End Apartments](https://images.unsplash.com/photo-1542751371-adc38448a05e?w=600&h=400&fit=crop)\n\nProperties\n\n### High-End Apartments\n\n![Military Equipment](https://images.unsplash.com/photo-1493711662062-fa541adb3fc8?w=600&h=400&fit=crop)\n\nWeapons\n\n### Military Equipment\n\n![Criminal Operations](https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=600&h=400&fit=crop)\n\nHeists\n\n### Criminal Operations\n\n![Nightclub Empire](https://images.unsplash.com/photo-1550745165-9bc0b252726f?w=600&h=400&fit=crop)\n\nBusiness\n\n### Nightclub Empire\n\n![Street Racing](https://images.unsplash.com/photo-1556075798-4825dfaaf498?w=600&h=400&fit=crop)\n\nRacing\n\n### Street Racing\n\n![Gang Territory](https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=600&h=400&fit=crop)\n\nTerritory\n\n### Gang Territory\n\n![Penthouse Living](https://images.unsplash.com/photo-1606144042614-b2417e99c4e3?w=600&h=400&fit=crop)\n\nLifestyle\n\n### Penthouse Living\n\n![GTA Character](https://images.unsplash.com/photo-1542751371-adc38448a05e?w=600&h=700&fit=crop)\n\n### YOUR STORY BEGINS\n\nRise from nothing to everything\n\n### BUILD YOUR CRIMINAL EMPIRE\n\nStart your journey in Los Santos with the resources you need. Our AECOIN packages give you the financial foundation to build the criminal empire you've always dreamed of.\n\n1\n\nPurchase your AECOIN package\n\n2\n\nRedeem codes in GTA Online\n\n3\n\nDominate Los Santos\n\nSTART YOUR EMPIRE\n\nSIMPLE PROCESS\n\n## HOW IT WORKS\n\nFrom purchase to playing – your journey to Los Santos dominance in four simple steps\n\n01\n\n### Choose Package\n\nSelect your desired AECOIN package from our premium collection\n\n02\n\n### Secure Payment\n\nPay safely with our trusted and encrypted payment gateway\n\n03\n\n### Instant Delivery\n\nReceive your activation codes immediately after payment\n\n04\n\n### Redeem & Dominate\n\nEnter codes in GTA Online and start your criminal empire\n\n### READY TO RULE LOS SANTOS?\n\nJoin thousands of players who trust us for their AECOIN needs\n\nSTART YOUR EMPIRE NOW\n\nSUPPORT\n\n## NEED ANSWERS?\n\nEverything you need to know about AECOIN and our services\n\n### How fast will I receive my AECOIN codes?\n\n### What payment methods are accepted?\n\n### Can I get a refund if needed?\n\n### How do I redeem my AECOIN codes?\n\n### Are the codes region-locked or platform-specific?\n\n### What if my code doesn't work?\n\n### Do you offer bulk discounts for large orders?\n\n### Is my personal information secure?\n\n### Still Have Questions?\n\nOur expert support team is available 24/7 to help you with any issues\n\nLIVE CHAT SUPPORTEMAIL SUPPORT","size_bytes":4180},"attached_assets/content-1759461457850.md":{"content":"# An Error Occurred\n\nParking is currently unavailable. We'll be right back.","size_bytes":75},"attached_assets/content-1759553712375.md":{"content":"![](https://cdn.tebex.io/store/1554195/templates/219348/assets/2e17b28676f9594ea607af92bc4490391d974318.png)![](https://cdn.tebex.io/store/1554195/templates/219348/assets/41a0f9f4d82e04ebdfddc424e398a23cc307fa0c.png)![](https://cdn.tebex.io/store/1554195/templates/219348/assets/ba7fde65d4c77a4dd94e13e88affd24d9b8ee6ce.png)\n\nPreviousNext\n\n![10 Sultan](https://cdn.tebex.io/store/1554195/templates/219348/assets/254ebf41211cf57ef13f8bfbcebbfcedf4cc296f.png)10 Cumulative Sultan\n\n![1 Sultan](https://cdn.tebex.io/store/1554195/templates/219348/assets/4683a6ae91153ef350e7d65bc1e3c667ff4377bc.png)1 Cumulative Sultan\n\nThis website and its checkout process is owned & operated by Tebex Limited, who handle product fulfilment, billing support and refunds.\n\n\n[Impressum](https://abrp.tebex.io/terms/impressum) [Terms & Conditions](https://abrp.tebex.io/terms/checkout) [Privacy Policy](https://abrp.tebex.io/terms/privacy)","size_bytes":917},"server/db.ts":{"content":"import { drizzle } from \"drizzle-orm/neon-serverless\";\nimport { Pool, neonConfig } from \"@neondatabase/serverless\";\nimport * as schema from \"@shared/schema\";\nimport ws from \"ws\";\n\n// Configure WebSocket for Neon - disable SSL verification for self-signed certs\nclass WebSocketWithoutSSLVerification extends ws {\n  constructor(address: string, protocols?: string | string[]) {\n    super(address, protocols, {\n      rejectUnauthorized: false\n    });\n  }\n}\n\nneonConfig.webSocketConstructor = WebSocketWithoutSSLVerification as any;\n\nconst pool = new Pool({ \n  connectionString: process.env.DATABASE_URL,\n  connectionTimeoutMillis: 10000,\n});\n\nexport const db = drizzle(pool, { schema });\n","size_bytes":685},"server/discord.ts":{"content":"const DISCORD_CLIENT_ID = process.env.DISCORD_CLIENT_ID!;\nconst DISCORD_CLIENT_SECRET = process.env.DISCORD_CLIENT_SECRET!;\n\n// Construct redirect URI based on environment\nconst getRedirectUri = () => {\n  if (process.env.DISCORD_REDIRECT_URI) {\n    return process.env.DISCORD_REDIRECT_URI;\n  }\n  \n  // Use REPLIT_DEV_DOMAIN for development, or fallback to localhost\n  if (process.env.REPLIT_DEV_DOMAIN) {\n    return `https://${process.env.REPLIT_DEV_DOMAIN}/api/auth/discord/callback`;\n  }\n  \n  return 'http://localhost:5000/api/auth/discord/callback';\n};\n\nconst DISCORD_REDIRECT_URI = getRedirectUri();\n\nexport function getDiscordAuthUrl(state: string): string {\n  const params = new URLSearchParams({\n    client_id: DISCORD_CLIENT_ID,\n    redirect_uri: DISCORD_REDIRECT_URI,\n    response_type: 'code',\n    scope: 'identify email',\n    state,\n  });\n\n  return `https://discord.com/api/oauth2/authorize?${params.toString()}`;\n}\n\nexport async function exchangeCodeForToken(code: string) {\n  const params = new URLSearchParams({\n    client_id: DISCORD_CLIENT_ID,\n    client_secret: DISCORD_CLIENT_SECRET,\n    grant_type: 'authorization_code',\n    code,\n    redirect_uri: DISCORD_REDIRECT_URI,\n  });\n\n  const response = await fetch('https://discord.com/api/oauth2/token', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    body: params.toString(),\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to exchange code for token');\n  }\n\n  return await response.json();\n}\n\nexport async function getDiscordUserInfo(accessToken: string) {\n  const response = await fetch('https://discord.com/api/v10/users/@me', {\n    headers: {\n      'Authorization': `Bearer ${accessToken}`,\n    },\n  });\n\n  if (!response.ok) {\n    throw new Error('Failed to fetch Discord user info');\n  }\n\n  const user = await response.json();\n  return {\n    discordId: user.id,\n    username: user.username,\n    discriminator: user.discriminator,\n    avatar: user.avatar ? `https://cdn.discordapp.com/avatars/${user.id}/${user.avatar}.png` : null,\n    email: user.email,\n  };\n}\n","size_bytes":2099},"server/email.ts":{"content":"import { Resend } from 'resend';\n\nlet connectionSettings: any;\n\nasync function getCredentials() {\n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('X_REPLIT_TOKEN not found for repl/depl');\n  }\n\n  connectionSettings = await fetch(\n    'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=resend',\n    {\n      headers: {\n        'Accept': 'application/json',\n        'X_REPLIT_TOKEN': xReplitToken\n      }\n    }\n  ).then(res => res.json()).then(data => data.items?.[0]);\n\n  if (!connectionSettings || (!connectionSettings.settings.api_key)) {\n    throw new Error('Resend not connected');\n  }\n  return {apiKey: connectionSettings.settings.api_key, fromEmail: connectionSettings.settings.from_email};\n}\n\nasync function getUncachableResendClient() {\n  const { apiKey, fromEmail } = await getCredentials();\n  return {\n    client: new Resend(apiKey),\n    fromEmail: fromEmail\n  };\n}\n\nexport async function sendOrderConfirmationEmail(\n  toEmail: string,\n  orderId: string,\n  orderTotal: string,\n  redemptionCodes: { code: string; packageName: string }[]\n) {\n  try {\n    const { client, fromEmail } = await getUncachableResendClient();\n\n    const codesHtml = redemptionCodes.map(({ code, packageName }) => `\n      <div style=\"background-color: #1a2942; border: 2px solid #FFD700; border-radius: 12px; padding: 16px; margin-bottom: 12px;\">\n        <p style=\"color: #9ca3af; margin: 0 0 8px 0; font-size: 14px;\">${packageName}</p>\n        <code style=\"color: #FFD700; font-size: 18px; font-weight: bold; letter-spacing: 2px;\">${code}</code>\n      </div>\n    `).join('');\n\n    const html = `\n      <!DOCTYPE html>\n      <html>\n        <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Order Confirmation - AECOIN Store</title>\n        </head>\n        <body style=\"margin: 0; padding: 0; font-family: Arial, sans-serif; background-color: #0a0f1e;\">\n          <div style=\"max-width: 600px; margin: 0 auto; padding: 40px 20px;\">\n            <div style=\"background: linear-gradient(135deg, #1a2942 0%, #0d1d35 100%); border: 3px solid #FFD700; border-radius: 24px; padding: 40px; text-align: center;\">\n              <h1 style=\"color: #FFD700; font-size: 48px; margin: 0 0 16px 0; font-family: 'Bebas Neue', sans-serif; letter-spacing: 3px; text-shadow: 0 0 20px rgba(255, 215, 0, 0.5);\">\n                AECOIN STORE\n              </h1>\n              <div style=\"width: 60px; height: 4px; background-color: #FFD700; margin: 0 auto 32px auto;\"></div>\n              \n              <h2 style=\"color: #ffffff; font-size: 28px; margin: 0 0 24px 0;\">\n                Order Confirmed!\n              </h2>\n              \n              <div style=\"background-color: #0a0f1e; border-radius: 16px; padding: 24px; margin-bottom: 32px;\">\n                <p style=\"color: #9ca3af; margin: 0 0 8px 0; font-size: 14px;\">Order ID</p>\n                <p style=\"color: #ffffff; margin: 0 0 16px 0; font-size: 16px;\">#${orderId.slice(0, 8)}</p>\n                \n                <p style=\"color: #9ca3af; margin: 0 0 8px 0; font-size: 14px;\">Total Paid</p>\n                <p style=\"color: #FFD700; margin: 0; font-size: 32px; font-weight: bold;\">RM${orderTotal}</p>\n              </div>\n              \n              <h3 style=\"color: #FFD700; font-size: 24px; margin: 0 0 20px 0;\">\n                Your Redemption Codes\n              </h3>\n              \n              <p style=\"color: #9ca3af; margin: 0 0 24px 0; font-size: 14px;\">\n                Use these codes in GTA 5 to redeem your AECOIN\n              </p>\n              \n              ${codesHtml}\n              \n              <div style=\"margin-top: 40px; padding-top: 32px; border-top: 1px solid rgba(255, 215, 0, 0.2);\">\n                <p style=\"color: #9ca3af; font-size: 14px; margin: 0 0 16px 0;\">\n                  Thank you for your purchase! If you have any questions, please contact our support team.\n                </p>\n                <p style=\"color: #6b7280; font-size: 12px; margin: 0;\">\n                  This is an automated email. Please do not reply to this message.\n                </p>\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    `;\n\n    const { data, error } = await client.emails.send({\n      from: fromEmail,\n      to: toEmail,\n      subject: `Order Confirmation #${orderId.slice(0, 8)} - AECOIN Store`,\n      html: html,\n    });\n\n    if (error) {\n      console.error('Failed to send email:', error);\n      throw error;\n    }\n\n    console.log('Order confirmation email sent:', data);\n    return data;\n  } catch (error) {\n    console.error('Error sending order confirmation email:', error);\n    throw error;\n  }\n}\n","size_bytes":4968},"server/fivem-db.ts":{"content":"import mysql from 'mysql2/promise';\n\nlet pool: mysql.Pool | null = null;\n\nfunction createPool() {\n  if (!process.env.FIVEM_DB_HOST) {\n    throw new Error('FiveM database credentials not configured');\n  }\n\n  return mysql.createPool({\n    host: process.env.FIVEM_DB_HOST,\n    user: process.env.FIVEM_DB_USER,\n    password: process.env.FIVEM_DB_PASSWORD,\n    database: process.env.FIVEM_DB_NAME,\n    port: parseInt(process.env.FIVEM_DB_PORT || '3306'),\n    waitForConnections: true,\n    connectionLimit: 10,\n    queueLimit: 0,\n  });\n}\n\nexport function getPool() {\n  if (!pool) {\n    pool = createPool();\n  }\n  return pool;\n}\n\nexport async function insertRedemptionCodeToFiveM(code: string, creditValue: number) {\n  try {\n    const connection = getPool();\n    const table = process.env.FIVEM_DB_TABLE || 'ak4y_donatesystem_codes';\n    const codeColumn = process.env.FIVEM_DB_COLUMN_CODE || 'code';\n    const creditColumn = process.env.FIVEM_DB_COLUMN_CREDITSVALUE || 'credit';\n\n    const query = `INSERT INTO ${table} (${codeColumn}, ${creditColumn}) VALUES (?, ?)`;\n    \n    await connection.execute(query, [code, creditValue]);\n    \n    console.log(`✓ Inserted code ${code} with ${creditValue} credits into FiveM database`);\n    return true;\n  } catch (error) {\n    console.error('Failed to insert code into FiveM database:', error);\n    throw error;\n  }\n}\n\nexport async function testFiveMConnection() {\n  try {\n    const connection = getPool();\n    await connection.query('SELECT 1');\n    console.log('✓ FiveM database connection successful');\n    return true;\n  } catch (error) {\n    console.error('✗ FiveM database connection failed:', error);\n    return false;\n  }\n}\n","size_bytes":1675},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport session from \"express-session\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Billplz callback needs raw body for X-Signature verification\napp.use(\"/api/billplz/callback\", express.text({ type: 'application/x-www-form-urlencoded' }));\n\n// Apply JSON middleware for all other routes\napp.use((req, res, next) => {\n  if (req.path === '/api/billplz/callback') {\n    return next();\n  }\n  express.json()(req, res, next);\n});\n\napp.use((req, res, next) => {\n  if (req.path === '/api/billplz/callback') {\n    return next(); // Already handled with raw text middleware\n  }\n  express.urlencoded({ extended: false })(req, res, next);\n});\n\n// Validate SESSION_SECRET exists\nif (!process.env.SESSION_SECRET) {\n  throw new Error('SESSION_SECRET environment variable is required');\n}\n\n// Session configuration\napp.use(session({\n  secret: process.env.SESSION_SECRET,\n  resave: false,\n  saveUninitialized: false,\n  cookie: {\n    secure: process.env.NODE_ENV === 'production',\n    httpOnly: true,\n    sameSite: 'lax',\n    maxAge: 1000 * 60 * 60 * 24 * 7 // 7 days\n  }\n}));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  // Serve attached_assets folder as static files\n  app.use('/attached_assets', express.static('attached_assets'));\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3126},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { getDiscordAuthUrl, exchangeCodeForToken, getDiscordUserInfo } from \"./discord\";\nimport { sendOrderConfirmationEmail } from \"./email\";\nimport { insertRedemptionCodeToFiveM } from \"./fivem-db\";\nimport { createBill, getPaymentUrl, getBillTransactions } from \"./toyyibpay\";\nimport { createBill as createBillplzBill, getBill, verifyBillPayment, verifyBillplzSignature } from \"./billplz\";\nimport \"./types\";\nimport crypto from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { z } from \"zod\";\n\n// Middleware to check if user is authenticated\nfunction requireAuth(req: Request, res: Response, next: Function) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n}\n\n// Middleware to check if user is admin\nasync function requireAdmin(req: Request, res: Response, next: Function) {\n  if (!req.session.userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  \n  const user = await storage.getUser(req.session.userId);\n  if (!user || !user.isAdmin) {\n    return res.status(403).json({ message: \"Forbidden: Admin access required\" });\n  }\n  \n  next();\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // One-time admin user creation endpoint (for initial setup)\n  app.post(\"/api/seed-admin\", async (req, res) => {\n    try {\n      const { username, email, password, setupToken } = req.body;\n\n      // Check if setup token matches (or allow if no admin exists yet)\n      const existingAdmins = await db.select().from(users).where(eq(users.isAdmin, true));\n      \n      if (existingAdmins.length > 0) {\n        return res.status(403).json({ message: \"Admin already exists. Cannot create another via seed.\" });\n      }\n\n      if (!username || !email || !password) {\n        return res.status(400).json({ message: \"Username, email, and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res.status(400).json({ message: \"Password must be at least 6 characters\" });\n      }\n\n      // Hash password with bcrypt (cost factor 12)\n      const passwordHash = await bcrypt.hash(password, 12);\n\n      // Create admin user\n      const admin = await storage.createAdminUser(username, email, passwordHash);\n\n      res.json({ \n        message: \"Admin user created successfully\",\n        admin: {\n          id: admin.id,\n          username: admin.username,\n          email: admin.email,\n          isAdmin: admin.isAdmin,\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Seed admin error:\", error);\n      res.status(500).json({ message: \"Failed to create admin user\", error: error.message });\n    }\n  });\n\n  // Discord OAuth flow - Step 1: Redirect to Discord\n  app.get(\"/api/auth/discord\", (req, res) => {\n    // Generate and store state for CSRF protection\n    const state = crypto.randomBytes(16).toString('hex');\n    req.session.oauthState = state;\n    \n    const authUrl = getDiscordAuthUrl(state);\n    res.redirect(authUrl);\n  });\n\n  // Discord OAuth flow - Step 2: Handle callback\n  app.get(\"/api/auth/discord/callback\", async (req, res) => {\n    const { code, state } = req.query;\n\n    // Verify state for CSRF protection\n    if (!state || state !== req.session.oauthState) {\n      return res.status(403).send(\"Invalid state parameter\");\n    }\n\n    // Clear state after use\n    delete req.session.oauthState;\n\n    if (!code || typeof code !== 'string') {\n      return res.status(400).send(\"No code provided\");\n    }\n\n    try {\n      // Exchange code for access token\n      const tokenData = await exchangeCodeForToken(code);\n      \n      // Get user info from Discord\n      const discordUser = await getDiscordUserInfo(tokenData.access_token);\n      \n      // Check if user exists\n      let user = await storage.getUserByDiscordId(discordUser.discordId);\n      \n      if (!user) {\n        // Create new user\n        user = await storage.createUser({\n          discordId: discordUser.discordId,\n          username: discordUser.username,\n          email: discordUser.email || \"\",\n          avatar: discordUser.avatar,\n        });\n      }\n      \n      // Regenerate session to prevent session fixation attacks\n      const oldSession = req.session;\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).send(\"Authentication failed\");\n        }\n        \n        // Set user ID in new session\n        req.session.userId = user.id;\n        \n        // Save session and redirect\n        req.session.save((err) => {\n          if (err) {\n            console.error(\"Session save error:\", err);\n            return res.status(500).send(\"Authentication failed\");\n          }\n          res.redirect('/');\n        });\n      });\n    } catch (error: any) {\n      console.error(\"OAuth callback error:\", error);\n      res.status(500).send(\"Authentication failed\");\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/auth/me\", async (req, res) => {\n    if (!req.session.userId) {\n      return res.status(401).json({ message: \"Not authenticated\" });\n    }\n    \n    const user = await storage.getUser(req.session.userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    res.json({ user });\n  });\n\n  // Admin login with username/password\n  const adminLoginSchema = z.object({\n    username: z.string().min(3, \"Username must be at least 3 characters\"),\n    password: z.string().min(6, \"Password must be at least 6 characters\"),\n  });\n\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { username, password } = adminLoginSchema.parse(req.body);\n\n      const user = await storage.getUserByUsername(username);\n      \n      if (!user || !user.isAdmin || !user.passwordHash) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      req.session.regenerate((err) => {\n        if (err) {\n          console.error(\"Session regeneration error:\", err);\n          return res.status(500).json({ message: \"Login failed\" });\n        }\n\n        req.session.userId = user.id;\n        req.session.loginMethod = \"admin\";\n\n        res.json({ \n          user: {\n            id: user.id,\n            username: user.username,\n            email: user.email,\n            isAdmin: user.isAdmin,\n            avatar: user.avatar,\n          }\n        });\n      });\n    } catch (error: any) {\n      if (error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Invalid input\", errors: error.errors });\n      }\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n\n  // Package routes\n  app.get(\"/api/packages\", async (_req, res) => {\n    const packages = await storage.getAllPackages();\n    res.json(packages);\n  });\n\n  app.get(\"/api/packages/:id\", async (req, res) => {\n    const pkg = await storage.getPackage(req.params.id);\n    if (!pkg) {\n      return res.status(404).json({ message: \"Package not found\" });\n    }\n    res.json(pkg);\n  });\n\n  // Player rankings routes\n  app.get(\"/api/rankings\", async (_req, res) => {\n    const rankings = await storage.getAllPlayerRankings();\n    res.json(rankings);\n  });\n\n  app.get(\"/api/rankings/top/:limit?\", async (req, res) => {\n    const limit = parseInt(req.params.limit || \"100\");\n    const rankings = await storage.getTopPlayers(limit);\n    res.json(rankings);\n  });\n\n  // Cart routes (require authentication)\n  app.get(\"/api/cart\", requireAuth, async (req, res) => {\n    const items = await storage.getCartItems(req.session.userId!);\n    \n    // Join package data for each cart item\n    const itemsWithPackages = await Promise.all(\n      items.map(async (item) => {\n        const pkg = await storage.getPackage(item.packageId);\n        return {\n          ...item,\n          package: pkg,\n        };\n      })\n    );\n    \n    res.json(itemsWithPackages);\n  });\n\n  app.post(\"/api/cart\", requireAuth, async (req, res) => {\n    const { packageId, quantity } = req.body;\n    \n    const item = await storage.addToCart({\n      userId: req.session.userId!,\n      packageId,\n      quantity: quantity || 1,\n    });\n    \n    res.json(item);\n  });\n\n  app.patch(\"/api/cart/:id\", requireAuth, async (req, res) => {\n    const { quantity } = req.body;\n    const item = await storage.updateCartItemQuantity(req.params.id, quantity);\n    \n    if (!item) {\n      return res.status(404).json({ message: \"Cart item not found\" });\n    }\n    \n    res.json(item);\n  });\n\n  app.delete(\"/api/cart/:id\", requireAuth, async (req, res) => {\n    const success = await storage.removeFromCart(req.params.id);\n    \n    if (!success) {\n      return res.status(404).json({ message: \"Cart item not found\" });\n    }\n    \n    res.json({ message: \"Item removed from cart\" });\n  });\n\n  app.delete(\"/api/cart\", requireAuth, async (req, res) => {\n    await storage.clearCart(req.session.userId!);\n    res.json({ message: \"Cart cleared\" });\n  });\n\n  // Order routes (require authentication)\n  app.get(\"/api/orders\", requireAuth, async (req, res) => {\n    const orders = await storage.getUserOrders(req.session.userId!);\n    res.json(orders);\n  });\n\n  app.get(\"/api/orders/:id\", requireAuth, async (req, res) => {\n    const order = await storage.getOrder(req.params.id);\n    \n    if (!order || order.userId !== req.session.userId) {\n      return res.status(404).json({ message: \"Order not found\" });\n    }\n    \n    res.json(order);\n  });\n\n  // Get redemption codes for an order\n  app.get(\"/api/orders/:id/codes\", requireAuth, async (req, res) => {\n    const order = await storage.getOrder(req.params.id);\n    \n    if (!order || order.userId !== req.session.userId) {\n      return res.status(404).json({ message: \"Order not found\" });\n    }\n    \n    const codes = await storage.getOrderRedemptionCodes(req.params.id);\n    res.json(codes);\n  });\n\n  // Coupon routes\n  app.get(\"/api/coupons/:code\", async (req, res) => {\n    const coupon = await storage.getCoupon(req.params.code.toUpperCase());\n    const subtotal = req.query.subtotal ? parseFloat(req.query.subtotal as string) : 0;\n    \n    if (!coupon) {\n      return res.status(404).json({ message: \"Coupon not found\" });\n    }\n    \n    // Validate coupon\n    if (!coupon.isActive) {\n      return res.status(400).json({ message: \"Coupon is no longer active\" });\n    }\n    \n    if (coupon.expiresAt && new Date(coupon.expiresAt) < new Date()) {\n      return res.status(400).json({ message: \"Coupon has expired\" });\n    }\n    \n    if (coupon.maxUses && coupon.currentUses >= coupon.maxUses) {\n      return res.status(400).json({ message: \"Coupon usage limit reached\" });\n    }\n    \n    // Validate minimum purchase requirement\n    if (coupon.minPurchase && parseFloat(coupon.minPurchase) > subtotal) {\n      return res.status(400).json({ \n        message: `Minimum purchase of RM${coupon.minPurchase} required` \n      });\n    }\n    \n    res.json(coupon);\n  });\n\n  // Helper function to generate unique AECOIN redemption codes\n  // Format: AE{VALUE}-XXXX-XXXX-XXXX (e.g., AE1000-ABCD-EFGH-JKLM)\n  function generateRedemptionCode(aecoinAmount: number): string {\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ'; // Only letters, no numbers\n    const segments = 3; // Three segments of random letters\n    const segmentLength = 4;\n    const code = [`AE${aecoinAmount}`]; // Start with AE{VALUE}\n    \n    for (let i = 0; i < segments; i++) {\n      let segment = '';\n      for (let j = 0; j < segmentLength; j++) {\n        segment += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      code.push(segment);\n    }\n    \n    return code.join('-'); // Format: AE{VALUE}-XXXX-XXXX-XXXX\n  }\n\n\n\n  // ToyyibPay payment intent endpoint - With PendingPayment security\n  app.post(\"/api/create-toyyibpay-bill\", requireAuth, async (req, res) => {\n    try {\n      const { couponCode, billingInfo } = req.body;\n      const userId = req.session.userId!;\n\n      // Validate billing information\n      if (!billingInfo || !billingInfo.fullName || !billingInfo.fullName.trim()) {\n        return res.status(400).json({ message: \"Full name is required\" });\n      }\n      \n      if (!billingInfo.email || !billingInfo.email.trim()) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Get cart items and calculate total SERVER-SIDE (security: never trust client amounts)\n      const cartItems = await storage.getCartItems(userId);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n\n      // Calculate subtotal from server-side cart data\n      let subtotal = 0;\n      for (const item of cartItems) {\n        const pkg = await storage.getPackage(item.packageId);\n        if (pkg) {\n          subtotal += parseFloat(pkg.price) * item.quantity;\n        }\n      }\n\n      // Validate coupon if provided\n      let discount = 0;\n      let validatedCoupon = null;\n      if (couponCode) {\n        const coupon = await storage.getCoupon(couponCode.toUpperCase());\n        \n        if (coupon && coupon.isActive) {\n          const isExpired = coupon.expiresAt && new Date(coupon.expiresAt) < new Date();\n          const isOverUsed = coupon.maxUses && coupon.currentUses >= coupon.maxUses;\n          const belowMinPurchase = coupon.minPurchase && parseFloat(coupon.minPurchase) > subtotal;\n\n          if (!isExpired && !isOverUsed && !belowMinPurchase) {\n            validatedCoupon = coupon;\n            if (coupon.discountType === 'percentage') {\n              discount = (subtotal * parseFloat(coupon.discountValue)) / 100;\n            } else {\n              discount = parseFloat(coupon.discountValue);\n            }\n          }\n        }\n      }\n\n      const total = Math.max(0, subtotal - discount);\n\n      if (total <= 0) {\n        return res.status(400).json({ message: \"Invalid order total\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n        : `http://localhost:5000`;\n\n      // Generate unique external reference ID for ToyyibPay\n      const externalReferenceNo = crypto.randomUUID();\n\n      // Create ToyyibPay bill (billing info is already validated above)\n      const billCode = await createBill({\n        billName: `AECOIN Order #${externalReferenceNo.substring(0, 8)}`,\n        billDescription: `AECOIN Package Purchase`,\n        billAmount: total,\n        billTo: billingInfo.fullName.trim(),\n        billEmail: billingInfo.email.trim(),\n        billPhone: billingInfo.phoneNumber && billingInfo.phoneNumber.trim() ? billingInfo.phoneNumber.trim() : '0000000000',\n        billExternalReferenceNo: externalReferenceNo,\n        billReturnUrl: `${baseUrl}/api/toyyibpay/return`,\n        billCallbackUrl: `${baseUrl}/api/toyyibpay/callback`,\n      });\n\n      // Create cart snapshot for security verification\n      const cartSnapshot = await Promise.all(\n        cartItems.map(async (item) => {\n          const pkg = await storage.getPackage(item.packageId);\n          return {\n            packageId: item.packageId,\n            packageName: pkg?.name || '',\n            quantity: item.quantity,\n            price: pkg?.price || '0',\n            aecoinAmount: pkg?.aecoinAmount || 0,\n          };\n        })\n      );\n\n      // Create PendingPayment record for security and tracking (CRITICAL SECURITY)\n      await storage.createPendingPayment({\n        userId,\n        provider: 'toyyibpay',\n        externalId: billCode,\n        amount: total.toFixed(2),\n        currency: 'MYR',\n        status: 'created',\n        cartSnapshot: JSON.stringify(cartSnapshot),\n        couponCode: validatedCoupon?.code || null,\n        metadata: JSON.stringify({\n          subtotal: subtotal.toFixed(2),\n          discount: discount.toFixed(2),\n          externalReferenceNo,\n        }),\n      });\n\n      const paymentUrl = getPaymentUrl(billCode);\n\n      res.json({\n        billCode,\n        paymentUrl,\n        amount: total,\n        metadata: {\n          couponCode: validatedCoupon?.code || \"\",\n          subtotal: Math.round(subtotal),\n          discount: Math.round(discount),\n          total: Math.round(total),\n        }\n      });\n    } catch (error: any) {\n      console.error(\"ToyyibPay bill creation error:\", error);\n      res.status(500).json({ \n        message: \"Error creating ToyyibPay bill: \" + error.message \n      });\n    }\n  });\n\n  // ToyyibPay callback handler (called by ToyyibPay when payment completes)\n  app.get(\"/api/toyyibpay/callback\", async (req, res) => {\n    try {\n      const { status_id, billcode } = req.query;\n\n      console.log(\"ToyyibPay callback received:\", { status_id, billcode });\n\n      if (!billcode) {\n        return res.status(200).send('OK');\n      }\n\n      // Check if payment already processed (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(billcode as string);\n      if (existingOrder) {\n        console.log(`Order already exists for ToyyibPay bill ${billcode}`);\n        return res.status(200).send('OK');\n      }\n\n      // Verify payment succeeded\n      if (status_id === '1') {\n        // Server-side verification: Query ToyyibPay to confirm payment\n        const transactions = await getBillTransactions(billcode as string);\n        \n        if (transactions && transactions.length > 0 && transactions[0].billpaymentStatus === '1') {\n          console.log(\"✓ ToyyibPay payment verified:\", billcode);\n          // Actual order fulfillment happens in return handler with session context\n        }\n      }\n\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"ToyyibPay callback error:\", error);\n      res.status(200).send('OK');\n    }\n  });\n\n  // ToyyibPay return handler (user redirected here after payment) - SECURE VERSION\n  app.get(\"/api/toyyibpay/return\", async (req, res) => {\n    try {\n      const { status_id, billcode } = req.query;\n\n      console.log(\"ToyyibPay return:\", { status_id, billcode });\n\n      if (!billcode || status_id !== '1') {\n        return res.redirect(`/payment/failed?reason=invalid_status`);\n      }\n\n      // Check if order already exists (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(billcode as string);\n      if (existingOrder) {\n        console.log(`Order already fulfilled for ToyyibPay bill ${billcode}`);\n        return res.redirect(`/orders?payment=success&provider=toyyibpay`);\n      }\n\n      // Get PendingPayment record - CRITICAL SECURITY CHECK\n      const pendingPayment = await storage.getPendingPaymentByExternalId(billcode as string);\n      if (!pendingPayment) {\n        console.error(`No pending payment found for ToyyibPay bill ${billcode}`);\n        return res.redirect(`/payment/failed?reason=pending_not_found`);\n      }\n\n      // Server-side transaction verification - NEVER trust URL params\n      const transactions = await getBillTransactions(billcode as string);\n      \n      if (!transactions || transactions.length === 0 || transactions[0].billpaymentStatus !== '1') {\n        console.error(`ToyyibPay transaction verification failed for ${billcode}`);\n        await storage.updatePendingPaymentStatus(billcode as string, 'failed');\n        return res.redirect(`/payment/failed?reason=verification_failed`);\n      }\n\n      const transaction = transactions[0];\n\n      // Verify amount matches (ToyyibPay returns cents)\n      const paidAmountMYR = parseFloat(transaction.billpaymentAmount) / 100;\n      const expectedAmountMYR = parseFloat(pendingPayment.amount);\n      \n      if (Math.abs(paidAmountMYR - expectedAmountMYR) > 0.01) {\n        console.error(`ToyyibPay amount mismatch: paid RM${paidAmountMYR}, expected RM${expectedAmountMYR}`);\n        await storage.updatePendingPaymentStatus(billcode as string, 'failed');\n        return res.redirect(`/payment/failed?reason=amount_mismatch`);\n      }\n\n      // Reconstruct order from cart snapshot (prevents cart tampering)\n      const cartSnapshot = JSON.parse(pendingPayment.cartSnapshot);\n      const metadata = pendingPayment.metadata ? JSON.parse(pendingPayment.metadata) : {};\n\n      // Create order with verified data\n      const order = await storage.createOrder({\n        userId: pendingPayment.userId,\n        totalAmount: metadata.subtotal || pendingPayment.amount,\n        discountAmount: metadata.discount || '0',\n        finalAmount: pendingPayment.amount,\n        status: \"paid\",\n        paymentMethod: \"toyyibpay\",\n        paymentId: billcode as string,\n        couponCode: pendingPayment.couponCode,\n      });\n\n      // Generate redemption codes from snapshot\n      for (const item of cartSnapshot) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          packageId: item.packageId,\n          quantity: item.quantity,\n          priceAtPurchase: item.price,\n        });\n\n        for (let i = 0; i < item.quantity; i++) {\n          const code = generateRedemptionCode(item.aecoinAmount);\n          await storage.createRedemptionCode({\n            code,\n            packageId: item.packageId,\n            orderId: order.id,\n            aecoinAmount: item.aecoinAmount,\n            status: \"active\",\n          });\n\n          try {\n            await insertRedemptionCodeToFiveM(code, item.aecoinAmount);\n          } catch (fivemError) {\n            console.error(`Failed to insert code ${code} into FiveM:`, fivemError);\n          }\n        }\n      }\n\n      // Update order status to fulfilled\n      await storage.updateOrderStatus(order.id, 'fulfilled');\n\n      // Increment coupon usage if applied\n      if (pendingPayment.couponCode) {\n        const coupon = await storage.getCoupon(pendingPayment.couponCode);\n        if (coupon) {\n          await storage.incrementCouponUse(coupon.id);\n        }\n      }\n\n      // Clear cart and mark payment succeeded\n      await storage.clearCart(pendingPayment.userId);\n      await storage.updatePendingPaymentStatus(billcode as string, 'succeeded');\n\n      // Send email confirmation (soft fail)\n      try {\n        const user = await storage.getUser(pendingPayment.userId);\n        if (user?.email) {\n          const redemptionCodes = await storage.getOrderRedemptionCodes(order.id);\n          const codesWithPackageNames = redemptionCodes.map((code, idx) => ({\n            code: code.code,\n            packageName: cartSnapshot[idx]?.packageName || 'AECOIN Package'\n          }));\n          \n          await sendOrderConfirmationEmail(\n            user.email,\n            order.id,\n            order.finalAmount,\n            codesWithPackageNames\n          );\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send order confirmation email:\", emailError);\n      }\n\n      console.log(`✓ Order ${order.id} fulfilled via ToyyibPay`);\n      res.redirect(`/orders?payment=success&provider=toyyibpay`);\n    } catch (error) {\n      console.error(\"ToyyibPay return error:\", error);\n      res.redirect(`/payment/failed?reason=server_error`);\n    }\n  });\n\n  // Billplz payment intent endpoint - With PendingPayment security\n  app.post(\"/api/create-billplz-bill\", requireAuth, async (req, res) => {\n    try {\n      const { couponCode, billingInfo } = req.body;\n      const userId = req.session.userId!;\n      \n      console.log(\"Billplz bill creation - billing info received:\", billingInfo);\n\n      // Validate billing information\n      if (!billingInfo || !billingInfo.fullName || !billingInfo.fullName.trim()) {\n        return res.status(400).json({ message: \"Full name is required\" });\n      }\n      \n      if (!billingInfo.email || !billingInfo.email.trim()) {\n        return res.status(400).json({ message: \"Email is required\" });\n      }\n\n      // Get cart items and calculate total SERVER-SIDE (security: never trust client amounts)\n      const cartItems = await storage.getCartItems(userId);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ message: \"Cart is empty\" });\n      }\n\n      // Calculate subtotal from server-side cart data\n      let subtotal = 0;\n      for (const item of cartItems) {\n        const pkg = await storage.getPackage(item.packageId);\n        if (pkg) {\n          subtotal += parseFloat(pkg.price) * item.quantity;\n        }\n      }\n\n      // Validate coupon if provided\n      let discount = 0;\n      let validatedCoupon = null;\n      if (couponCode) {\n        const coupon = await storage.getCoupon(couponCode.toUpperCase());\n        \n        if (coupon && coupon.isActive) {\n          const isExpired = coupon.expiresAt && new Date(coupon.expiresAt) < new Date();\n          const isOverUsed = coupon.maxUses && coupon.currentUses >= coupon.maxUses;\n          const belowMinPurchase = coupon.minPurchase && parseFloat(coupon.minPurchase) > subtotal;\n\n          if (!isExpired && !isOverUsed && !belowMinPurchase) {\n            validatedCoupon = coupon;\n            if (coupon.discountType === 'percentage') {\n              discount = (subtotal * parseFloat(coupon.discountValue)) / 100;\n            } else {\n              discount = parseFloat(coupon.discountValue);\n            }\n          }\n        }\n      }\n\n      const total = Math.max(0, subtotal - discount);\n\n      if (total <= 0) {\n        return res.status(400).json({ message: \"Invalid order total\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      const baseUrl = process.env.REPLIT_DEV_DOMAIN \n        ? `https://${process.env.REPLIT_DEV_DOMAIN}`\n        : `http://localhost:5000`;\n\n      // Generate unique external reference ID for Billplz\n      const externalReferenceNo = crypto.randomUUID();\n\n      // Create Billplz bill (billing info is already validated above)\n      const billResponse = await createBillplzBill({\n        description: `AECOIN Order #${externalReferenceNo.substring(0, 8)}`,\n        amount: total,\n        name: billingInfo.fullName.trim(),\n        email: billingInfo.email.trim(),\n        mobile: billingInfo.phoneNumber && billingInfo.phoneNumber.trim() ? billingInfo.phoneNumber.trim() : undefined,\n        callbackUrl: `${baseUrl}/api/billplz/callback`,\n        redirectUrl: `${baseUrl}/api/billplz/return`,\n        reference1Label: 'Order ID',\n        reference1: externalReferenceNo,\n      });\n\n      // Create cart snapshot for security verification\n      const cartSnapshot = await Promise.all(\n        cartItems.map(async (item) => {\n          const pkg = await storage.getPackage(item.packageId);\n          return {\n            packageId: item.packageId,\n            packageName: pkg?.name || '',\n            quantity: item.quantity,\n            price: pkg?.price || '0',\n            aecoinAmount: pkg?.aecoinAmount || 0,\n          };\n        })\n      );\n\n      // Create PendingPayment record for security and tracking (CRITICAL SECURITY)\n      await storage.createPendingPayment({\n        userId,\n        provider: 'billplz',\n        externalId: billResponse.id,\n        amount: total.toFixed(2),\n        currency: 'MYR',\n        status: 'created',\n        cartSnapshot: JSON.stringify(cartSnapshot),\n        couponCode: validatedCoupon?.code || null,\n        metadata: JSON.stringify({\n          subtotal: subtotal.toFixed(2),\n          discount: discount.toFixed(2),\n          externalReferenceNo,\n        }),\n      });\n\n      res.json({\n        billId: billResponse.id,\n        paymentUrl: billResponse.url,\n        amount: total,\n        metadata: {\n          couponCode: validatedCoupon?.code || \"\",\n          subtotal: Math.round(subtotal),\n          discount: Math.round(discount),\n          total: Math.round(total),\n        }\n      });\n    } catch (error: any) {\n      console.error(\"Billplz bill creation error:\", error);\n      res.status(500).json({ \n        message: \"Error creating Billplz bill: \" + error.message \n      });\n    }\n  });\n\n  // Billplz callback handler (called by Billplz when payment completes)\n  app.post(\"/api/billplz/callback\", async (req, res) => {\n    try {\n      // req.body is raw text string due to express.text() middleware\n      const rawBody = typeof req.body === 'string' ? req.body : '';\n      const signature = req.headers['x-signature'] as string;\n\n      // SECURITY: Verify X-Signature to ensure callback is from Billplz (uses raw body)\n      const isValidSignature = verifyBillplzSignature(rawBody, signature || '');\n      \n      if (!isValidSignature) {\n        console.error('Invalid Billplz callback signature - possible fraud attempt');\n        return res.status(200).send('OK'); // Return 200 to prevent retries\n      }\n\n      // Parse the URL-encoded body manually\n      const params = new URLSearchParams(rawBody);\n      const id = params.get('id');\n      const paid = params.get('paid');\n\n      console.log(\"Billplz callback received:\", { id, paid, hasSignature: !!signature });\n\n      if (!id) {\n        return res.status(200).send('OK');\n      }\n\n      // Check if payment already processed (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(id);\n      if (existingOrder) {\n        console.log(`Order already exists for Billplz bill ${id}`);\n        return res.status(200).send('OK');\n      }\n\n      // Verify PendingPayment exists - SECURITY CHECK\n      const pendingPayment = await storage.getPendingPaymentByExternalId(id);\n      if (!pendingPayment) {\n        console.error(`No pending payment found for Billplz bill ${id}`);\n        return res.status(200).send('OK');\n      }\n\n      // Verify payment succeeded\n      if (paid === 'true' || paid === '1') {\n        // Server-side verification: Query Billplz to confirm payment\n        const billStatus = await verifyBillPayment(id);\n        \n        if (billStatus) {\n          console.log(\"✓ Billplz payment verified:\", id);\n          // Actual order fulfillment happens in return handler with session context\n        }\n      }\n\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error(\"Billplz callback error:\", error);\n      res.status(200).send('OK');\n    }\n  });\n\n  // Billplz return handler (user redirected here after payment) - SECURE VERSION\n  app.get(\"/api/billplz/return\", async (req, res) => {\n    try {\n      const { billplz } = req.query;\n\n      console.log(\"Billplz return:\", { billplz });\n\n      if (!billplz) {\n        return res.redirect(`/payment/failed?reason=invalid_request`);\n      }\n\n      // Parse the billplz data (it comes as a JSON object)\n      let billData: any;\n      try {\n        billData = typeof billplz === 'string' ? JSON.parse(billplz) : billplz;\n      } catch (parseError) {\n        console.error(\"Failed to parse Billplz data:\", parseError);\n        return res.redirect(`/payment/failed?reason=invalid_data`);\n      }\n\n      const billId = billData.id;\n      \n      if (!billId || billData.paid !== true) {\n        return res.redirect(`/payment/failed?reason=payment_not_completed`);\n      }\n\n      // Check if order already exists (idempotency)\n      const existingOrder = await storage.getOrderByPaymentId(billId);\n      if (existingOrder) {\n        console.log(`Order already fulfilled for Billplz bill ${billId}`);\n        return res.redirect(`/orders?payment=success&provider=billplz`);\n      }\n\n      // Get PendingPayment record - CRITICAL SECURITY CHECK\n      const pendingPayment = await storage.getPendingPaymentByExternalId(billId);\n      if (!pendingPayment) {\n        console.error(`No pending payment found for Billplz bill ${billId}`);\n        return res.redirect(`/payment/failed?reason=pending_not_found`);\n      }\n\n      // Server-side transaction verification - NEVER trust URL params\n      const bill = await getBill(billId);\n      \n      if (!bill.paid || bill.state !== 'paid') {\n        console.error(`Billplz transaction verification failed for ${billId}`);\n        await storage.updatePendingPaymentStatus(billId, 'failed');\n        return res.redirect(`/payment/failed?reason=verification_failed`);\n      }\n\n      // Verify amount matches (Billplz returns cents)\n      const paidAmountMYR = bill.amount / 100;\n      const expectedAmountMYR = parseFloat(pendingPayment.amount);\n      \n      if (Math.abs(paidAmountMYR - expectedAmountMYR) > 0.01) {\n        console.error(`Billplz amount mismatch: paid RM${paidAmountMYR}, expected RM${expectedAmountMYR}`);\n        await storage.updatePendingPaymentStatus(billId, 'failed');\n        return res.redirect(`/payment/failed?reason=amount_mismatch`);\n      }\n\n      // Reconstruct order from cart snapshot (prevents cart tampering)\n      const cartSnapshot = JSON.parse(pendingPayment.cartSnapshot);\n      const metadata = pendingPayment.metadata ? JSON.parse(pendingPayment.metadata) : {};\n\n      // Create order with verified data\n      const order = await storage.createOrder({\n        userId: pendingPayment.userId,\n        totalAmount: metadata.subtotal || pendingPayment.amount,\n        discountAmount: metadata.discount || '0',\n        finalAmount: pendingPayment.amount,\n        status: \"paid\",\n        paymentMethod: \"billplz\",\n        paymentId: billId,\n        couponCode: pendingPayment.couponCode,\n      });\n\n      // Generate redemption codes from snapshot\n      for (const item of cartSnapshot) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          packageId: item.packageId,\n          quantity: item.quantity,\n          priceAtPurchase: item.price,\n        });\n\n        for (let i = 0; i < item.quantity; i++) {\n          const code = generateRedemptionCode(item.aecoinAmount);\n          await storage.createRedemptionCode({\n            code,\n            packageId: item.packageId,\n            orderId: order.id,\n            aecoinAmount: item.aecoinAmount,\n            status: \"active\",\n          });\n\n          try {\n            await insertRedemptionCodeToFiveM(code, item.aecoinAmount);\n          } catch (fivemError) {\n            console.error(`Failed to insert code ${code} into FiveM:`, fivemError);\n          }\n        }\n      }\n\n      // Update order status to fulfilled\n      await storage.updateOrderStatus(order.id, 'fulfilled');\n\n      // Increment coupon usage if applied\n      if (pendingPayment.couponCode) {\n        const coupon = await storage.getCoupon(pendingPayment.couponCode);\n        if (coupon) {\n          await storage.incrementCouponUse(coupon.id);\n        }\n      }\n\n      // Clear cart and mark payment succeeded\n      await storage.clearCart(pendingPayment.userId);\n      await storage.updatePendingPaymentStatus(billId, 'succeeded');\n\n      // Send email confirmation (soft fail)\n      try {\n        const user = await storage.getUser(pendingPayment.userId);\n        if (user?.email) {\n          const redemptionCodes = await storage.getOrderRedemptionCodes(order.id);\n          const codesWithPackageNames = redemptionCodes.map((code, idx) => ({\n            code: code.code,\n            packageName: cartSnapshot[idx]?.packageName || 'AECOIN Package'\n          }));\n          \n          await sendOrderConfirmationEmail(\n            user.email,\n            order.id,\n            order.finalAmount,\n            codesWithPackageNames\n          );\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send order confirmation email:\", emailError);\n      }\n\n      console.log(`✓ Order ${order.id} fulfilled via Billplz`);\n      res.redirect(`/orders?payment=success&provider=billplz`);\n    } catch (error) {\n      console.error(\"Billplz return error:\", error);\n      res.redirect(`/payment/failed?reason=server_error`);\n    }\n  });\n\n  // ============================================\n  // ADMIN ROUTES - Protected by requireAdmin middleware\n  // ============================================\n\n  // Admin: Get all orders with filters\n  app.get(\"/api/admin/orders\", requireAdmin, async (req, res) => {\n    try {\n      const orders = await storage.getAllOrders();\n      \n      // Enrich orders with user information\n      const enrichedOrders = await Promise.all(\n        orders.map(async (order) => {\n          const user = await storage.getUser(order.userId);\n          const orderItems = await storage.getOrderItems(order.id);\n          const redemptionCodes = await storage.getOrderRedemptionCodes(order.id);\n          \n          // Fetch package names for each order item\n          const enrichedOrderItems = await Promise.all(\n            orderItems.map(async (item) => {\n              const pkg = await storage.getPackage(item.packageId);\n              return {\n                packageName: pkg?.name || \"Unknown Package\",\n                quantity: item.quantity,\n                price: item.priceAtPurchase\n              };\n            })\n          );\n          \n          return {\n            ...order,\n            userName: user?.username || \"Unknown User\",\n            userEmail: user?.email || \"no-email@example.com\",\n            orderItems: enrichedOrderItems,\n            redemptionCodes: redemptionCodes.map(code => ({\n              code: code.code\n            }))\n          };\n        })\n      );\n      \n      res.json(enrichedOrders);\n    } catch (error: any) {\n      console.error(\"Admin orders fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch orders\" });\n    }\n  });\n\n  // Admin: Update order status\n  app.patch(\"/api/admin/orders/:id/status\", requireAdmin, async (req, res) => {\n    try {\n      const { status } = req.body;\n      const order = await storage.updateOrderStatus(req.params.id, status);\n      if (!order) {\n        return res.status(404).json({ message: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error: any) {\n      console.error(\"Admin order update error:\", error);\n      res.status(500).json({ message: \"Failed to update order\" });\n    }\n  });\n\n  // Admin: Create package\n  app.post(\"/api/admin/packages\", requireAdmin, async (req, res) => {\n    try {\n      const pkg = await storage.createPackage(req.body);\n      res.json(pkg);\n    } catch (error: any) {\n      console.error(\"Admin package creation error:\", error);\n      res.status(500).json({ message: \"Failed to create package\" });\n    }\n  });\n\n  // Admin: Update package\n  app.patch(\"/api/admin/packages/:id\", requireAdmin, async (req, res) => {\n    try {\n      const pkg = await storage.updatePackage(req.params.id, req.body);\n      if (!pkg) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json(pkg);\n    } catch (error: any) {\n      console.error(\"Admin package update error:\", error);\n      res.status(500).json({ message: \"Failed to update package\" });\n    }\n  });\n\n  // Admin: Delete package\n  app.delete(\"/api/admin/packages/:id\", requireAdmin, async (req, res) => {\n    try {\n      const success = await storage.deletePackage(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Package not found\" });\n      }\n      res.json({ message: \"Package deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Admin package deletion error:\", error);\n      res.status(500).json({ message: \"Failed to delete package\" });\n    }\n  });\n\n  // Admin: Get all coupons\n  app.get(\"/api/admin/coupons\", requireAdmin, async (req, res) => {\n    try {\n      const coupons = await storage.getAllCoupons();\n      res.json(coupons);\n    } catch (error: any) {\n      console.error(\"Admin coupons fetch error:\", error);\n      res.status(500).json({ message: \"Failed to fetch coupons\" });\n    }\n  });\n\n  // Admin: Create coupon\n  app.post(\"/api/admin/coupons\", requireAdmin, async (req, res) => {\n    try {\n      const coupon = await storage.createCoupon(req.body);\n      res.json(coupon);\n    } catch (error: any) {\n      console.error(\"Admin coupon creation error:\", error);\n      res.status(500).json({ message: \"Failed to create coupon\" });\n    }\n  });\n\n  // Admin: Update coupon\n  app.patch(\"/api/admin/coupons/:id\", requireAdmin, async (req, res) => {\n    try {\n      const coupon = await storage.updateCoupon(req.params.id, req.body);\n      if (!coupon) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json(coupon);\n    } catch (error: any) {\n      console.error(\"Admin coupon update error:\", error);\n      res.status(500).json({ message: \"Failed to update coupon\" });\n    }\n  });\n\n  // Admin: Delete coupon\n  app.delete(\"/api/admin/coupons/:id\", requireAdmin, async (req, res) => {\n    try {\n      const success = await storage.deleteCoupon(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Coupon not found\" });\n      }\n      res.json({ message: \"Coupon deleted successfully\" });\n    } catch (error: any) {\n      console.error(\"Admin coupon deletion error:\", error);\n      res.status(500).json({ message: \"Failed to delete coupon\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":41502},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { packages } from \"@shared/schema\";\n\nasync function seed() {\n  console.log(\"Seeding database...\");\n\n  // Create AECOIN packages with originalPrice\n  const packageData = [\n    {\n      name: \"AECOIN 500\",\n      description: \"Perfect starter package for new players in Los Santos\",\n      price: \"50\",\n      originalPrice: \"60\",\n      aecoinAmount: 500,\n      codesPerPackage: 1,\n      featured: false,\n      imageUrl: \"/attached_assets/COINS1_1759562148670.jpg\",\n    },\n    {\n      name: \"AECOIN 1000\",\n      description: \"Level up your game with this popular package\",\n      price: \"98\",\n      originalPrice: \"110\",\n      aecoinAmount: 1000,\n      codesPerPackage: 1,\n      featured: true,\n      imageUrl: \"/attached_assets/COINS2_1759562148673.jpg\",\n    },\n    {\n      name: \"AECOIN 3000\",\n      description: \"Become a major player with this premium package\",\n      price: \"295\",\n      originalPrice: \"310\",\n      aecoinAmount: 3000,\n      codesPerPackage: 1,\n      featured: true,\n      imageUrl: \"/attached_assets/COINS3_1759562148676.jpg\",\n    },\n    {\n      name: \"AECOIN 5000\",\n      description: \"Build your empire with this powerful package\",\n      price: \"490\",\n      originalPrice: \"510\",\n      aecoinAmount: 5000,\n      codesPerPackage: 1,\n      featured: false,\n      imageUrl: \"/attached_assets/COINS4_1759562148677.jpg\",\n    },\n    {\n      name: \"AECOIN 10000\",\n      description: \"The ultimate package for serious players\",\n      price: \"980\",\n      originalPrice: \"1010\",\n      aecoinAmount: 10000,\n      codesPerPackage: 1,\n      featured: true,\n      imageUrl: \"/attached_assets/COINS5_1759562148678.jpg\",\n    },\n  ];\n\n  for (const pkg of packageData) {\n    await db.insert(packages).values(pkg);\n    console.log(`Created package: ${pkg.name}`);\n  }\n\n  console.log(\"Seeding complete!\");\n}\n\nseed().catch(console.error);\n","size_bytes":1869},"server/storage.ts":{"content":"import { \n  type User, type InsertUser,\n  type Package, type InsertPackage,\n  type CartItem, type InsertCartItem,\n  type Order, type InsertOrder,\n  type OrderItem, type InsertOrderItem,\n  type RedemptionCode, type InsertRedemptionCode,\n  type Coupon, type InsertCoupon,\n  type PendingPayment, type InsertPendingPayment,\n  type PlayerRanking, type InsertPlayerRanking,\n  users, packages, cartItems, orders, orderItems, redemptionCodes, coupons, pendingPayments, playerRankings\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByDiscordId(discordId: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createAdminUser(username: string, email: string, passwordHash: string): Promise<User>;\n  \n  // Package operations\n  getAllPackages(): Promise<Package[]>;\n  getPackage(id: string): Promise<Package | undefined>;\n  createPackage(pkg: InsertPackage): Promise<Package>;\n  updatePackage(id: string, pkg: Partial<InsertPackage>): Promise<Package | undefined>;\n  deletePackage(id: string): Promise<boolean>;\n  \n  // Cart operations\n  getCartItems(userId: string): Promise<CartItem[]>;\n  addToCart(item: InsertCartItem): Promise<CartItem>;\n  updateCartItemQuantity(id: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(id: string): Promise<boolean>;\n  clearCart(userId: string): Promise<boolean>;\n  \n  // Order operations\n  getOrder(id: string): Promise<Order | undefined>;\n  getOrderByPaymentId(paymentId: string): Promise<Order | undefined>;\n  getUserOrders(userId: string): Promise<Order[]>;\n  getAllOrders(): Promise<Order[]>;\n  createOrder(order: InsertOrder): Promise<Order>;\n  updateOrderStatus(id: string, status: string, paymentId?: string): Promise<Order | undefined>;\n  \n  // Order items operations\n  createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem>;\n  getOrderItems(orderId: string): Promise<OrderItem[]>;\n  \n  // Redemption code operations\n  createRedemptionCode(code: InsertRedemptionCode): Promise<RedemptionCode>;\n  getOrderRedemptionCodes(orderId: string): Promise<RedemptionCode[]>;\n  redeemCode(code: string): Promise<RedemptionCode | undefined>;\n  \n  // Coupon operations\n  getCoupon(code: string): Promise<Coupon | undefined>;\n  getAllCoupons(): Promise<Coupon[]>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n  updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon | undefined>;\n  deleteCoupon(id: string): Promise<boolean>;\n  incrementCouponUse(id: string): Promise<boolean>;\n  \n  // Pending payment operations\n  createPendingPayment(payment: InsertPendingPayment): Promise<PendingPayment>;\n  getPendingPaymentByExternalId(externalId: string): Promise<PendingPayment | undefined>;\n  updatePendingPaymentStatus(externalId: string, status: string): Promise<PendingPayment | undefined>;\n  \n  // Player rankings operations\n  getAllPlayerRankings(): Promise<PlayerRanking[]>;\n  getPlayerRanking(userId: string): Promise<PlayerRanking | undefined>;\n  createOrUpdatePlayerRanking(ranking: InsertPlayerRanking): Promise<PlayerRanking>;\n  getTopPlayers(limit: number): Promise<PlayerRanking[]>;\n}\n\nexport class DbStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getUserByDiscordId(discordId: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.discordId, discordId)).limit(1);\n    return result[0];\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.username, username)).limit(1);\n    return result[0];\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async createAdminUser(username: string, email: string, passwordHash: string): Promise<User> {\n    const result = await db.insert(users).values({\n      username,\n      email,\n      passwordHash,\n      isAdmin: true,\n      discordId: null,\n      avatar: null,\n    }).returning();\n    return result[0];\n  }\n\n  // Package operations\n  async getAllPackages(): Promise<Package[]> {\n    return await db.select().from(packages).orderBy(asc(packages.price));\n  }\n\n  async getPackage(id: string): Promise<Package | undefined> {\n    const result = await db.select().from(packages).where(eq(packages.id, id)).limit(1);\n    return result[0];\n  }\n\n  async createPackage(pkg: InsertPackage): Promise<Package> {\n    const result = await db.insert(packages).values(pkg).returning();\n    return result[0];\n  }\n\n  async updatePackage(id: string, pkg: Partial<InsertPackage>): Promise<Package | undefined> {\n    const result = await db.update(packages).set(pkg).where(eq(packages.id, id)).returning();\n    return result[0];\n  }\n\n  async deletePackage(id: string): Promise<boolean> {\n    const result = await db.delete(packages).where(eq(packages.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Cart operations\n  async getCartItems(userId: string): Promise<CartItem[]> {\n    return await db.select().from(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  async addToCart(item: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const existing = await db.select().from(cartItems)\n      .where(and(\n        eq(cartItems.userId, item.userId),\n        eq(cartItems.packageId, item.packageId)\n      ))\n      .limit(1);\n\n    if (existing[0]) {\n      // Update quantity\n      const updated = await db.update(cartItems)\n        .set({ quantity: existing[0].quantity + item.quantity })\n        .where(eq(cartItems.id, existing[0].id))\n        .returning();\n      return updated[0];\n    } else {\n      // Insert new\n      const result = await db.insert(cartItems).values(item).returning();\n      return result[0];\n    }\n  }\n\n  async updateCartItemQuantity(id: string, quantity: number): Promise<CartItem | undefined> {\n    const result = await db.update(cartItems).set({ quantity }).where(eq(cartItems.id, id)).returning();\n    return result[0];\n  }\n\n  async removeFromCart(id: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    const result = await db.delete(cartItems).where(eq(cartItems.userId, userId));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Order operations\n  async getOrder(id: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getOrderByPaymentId(paymentId: string): Promise<Order | undefined> {\n    const result = await db.select().from(orders).where(eq(orders.paymentId, paymentId)).limit(1);\n    return result[0];\n  }\n\n  async getUserOrders(userId: string): Promise<Order[]> {\n    return await db.select().from(orders).where(eq(orders.userId, userId)).orderBy(sql`${orders.createdAt} DESC`);\n  }\n\n  async getAllOrders(): Promise<Order[]> {\n    return await db.select().from(orders).orderBy(sql`${orders.createdAt} DESC`);\n  }\n\n  async createOrder(order: InsertOrder): Promise<Order> {\n    const result = await db.insert(orders).values(order).returning();\n    return result[0];\n  }\n\n  async updateOrderStatus(id: string, status: string, paymentId?: string): Promise<Order | undefined> {\n    const updateData: any = { status };\n    if (paymentId) {\n      updateData.paymentId = paymentId;\n    }\n    if (status === 'fulfilled' || status === 'completed') {\n      updateData.completedAt = new Date();\n    }\n    const result = await db.update(orders).set(updateData).where(eq(orders.id, id)).returning();\n    return result[0];\n  }\n\n  // Order items operations\n  async createOrderItem(orderItem: InsertOrderItem): Promise<OrderItem> {\n    const result = await db.insert(orderItems).values(orderItem).returning();\n    return result[0];\n  }\n\n  async getOrderItems(orderId: string): Promise<OrderItem[]> {\n    return await db.select().from(orderItems).where(eq(orderItems.orderId, orderId));\n  }\n\n  // Redemption code operations\n  async createRedemptionCode(code: InsertRedemptionCode): Promise<RedemptionCode> {\n    const result = await db.insert(redemptionCodes).values(code).returning();\n    return result[0];\n  }\n\n  async getOrderRedemptionCodes(orderId: string): Promise<RedemptionCode[]> {\n    return await db.select().from(redemptionCodes).where(eq(redemptionCodes.orderId, orderId));\n  }\n\n  async redeemCode(code: string): Promise<RedemptionCode | undefined> {\n    const result = await db.update(redemptionCodes)\n      .set({ status: 'redeemed', redeemedAt: new Date() })\n      .where(and(\n        eq(redemptionCodes.code, code),\n        eq(redemptionCodes.status, 'active')\n      ))\n      .returning();\n    return result[0];\n  }\n\n  // Coupon operations\n  async getCoupon(code: string): Promise<Coupon | undefined> {\n    const result = await db.select().from(coupons).where(eq(coupons.code, code)).limit(1);\n    return result[0];\n  }\n\n  async getAllCoupons(): Promise<Coupon[]> {\n    return await db.select().from(coupons).orderBy(sql`${coupons.createdAt} DESC`);\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const result = await db.insert(coupons).values(coupon).returning();\n    return result[0];\n  }\n\n  async updateCoupon(id: string, coupon: Partial<InsertCoupon>): Promise<Coupon | undefined> {\n    const result = await db.update(coupons).set(coupon).where(eq(coupons.id, id)).returning();\n    return result[0];\n  }\n\n  async deleteCoupon(id: string): Promise<boolean> {\n    const result = await db.delete(coupons).where(eq(coupons.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async incrementCouponUse(id: string): Promise<boolean> {\n    const result = await db.update(coupons)\n      .set({ currentUses: sql`${coupons.currentUses} + 1` })\n      .where(eq(coupons.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Pending payment operations\n  async createPendingPayment(payment: InsertPendingPayment): Promise<PendingPayment> {\n    const result = await db.insert(pendingPayments).values(payment).returning();\n    return result[0];\n  }\n\n  async getPendingPaymentByExternalId(externalId: string): Promise<PendingPayment | undefined> {\n    const result = await db.select().from(pendingPayments).where(eq(pendingPayments.externalId, externalId)).limit(1);\n    return result[0];\n  }\n\n  async updatePendingPaymentStatus(externalId: string, status: string): Promise<PendingPayment | undefined> {\n    const result = await db.update(pendingPayments)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(pendingPayments.externalId, externalId))\n      .returning();\n    return result[0];\n  }\n\n  // Player rankings operations\n  async getAllPlayerRankings(): Promise<PlayerRanking[]> {\n    return await db.select().from(playerRankings).orderBy(sql`${playerRankings.rank} ASC`);\n  }\n\n  async getPlayerRanking(userId: string): Promise<PlayerRanking | undefined> {\n    const result = await db.select().from(playerRankings).where(eq(playerRankings.userId, userId)).limit(1);\n    return result[0];\n  }\n\n  async createOrUpdatePlayerRanking(ranking: InsertPlayerRanking): Promise<PlayerRanking> {\n    const existing = await this.getPlayerRanking(ranking.userId);\n    \n    if (existing) {\n      const result = await db.update(playerRankings)\n        .set({ ...ranking, updatedAt: new Date() })\n        .where(eq(playerRankings.userId, ranking.userId))\n        .returning();\n      return result[0];\n    } else {\n      const result = await db.insert(playerRankings).values(ranking).returning();\n      return result[0];\n    }\n  }\n\n  async getTopPlayers(limit: number = 100): Promise<PlayerRanking[]> {\n    return await db.select()\n      .from(playerRankings)\n      .orderBy(sql`${playerRankings.rank} ASC`)\n      .limit(limit);\n  }\n}\n\nexport const storage = new DbStorage();\n","size_bytes":12312},"server/toyyibpay.ts":{"content":"const TOYYIBPAY_BASE_URL = 'https://toyyibpay.com';\n\ninterface CreateCategoryResponse {\n  CategoryCode: string;\n}\n\ninterface CreateBillResponse {\n  BillCode: string;\n}\n\ninterface BillTransaction {\n  billpaymentStatus: string;\n  billpaymentAmount: string;\n  billpaymentInvoiceNo: string;\n}\n\nlet categoryCode: string | null = null;\n\nasync function ensureCategoryExists(): Promise<string> {\n  if (categoryCode) {\n    return categoryCode;\n  }\n\n  if (!process.env.TOYYIBPAY_SECRET_KEY) {\n    throw new Error('TOYYIBPAY_SECRET_KEY not configured');\n  }\n\n  try {\n    const response = await fetch(`${TOYYIBPAY_BASE_URL}/index.php/api/createCategory`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        catname: 'AECOIN Store',\n        catdescription: 'GTA Online virtual currency packages',\n        userSecretKey: process.env.TOYYIBPAY_SECRET_KEY,\n      }),\n    });\n\n    const responseText = await response.text();\n    \n    let data: any;\n    try {\n      data = JSON.parse(responseText);\n    } catch (parseError) {\n      console.error('Failed to parse ToyyibPay response:', responseText);\n      throw new Error(`ToyyibPay API error: ${responseText}`);\n    }\n    \n    const catCode: string | undefined = Array.isArray(data) ? data[0]?.CategoryCode : data?.CategoryCode;\n    \n    if (!catCode) {\n      console.error('Invalid category response:', data);\n      throw new Error(`Failed to create ToyyibPay category: ${responseText}`);\n    }\n\n    categoryCode = catCode as string;\n    console.log('✓ ToyyibPay category created:', categoryCode);\n    \n    return categoryCode;\n  } catch (error) {\n    console.error('ToyyibPay category creation error:', error);\n    throw error;\n  }\n}\n\nexport async function createBill(params: {\n  billName: string;\n  billDescription: string;\n  billAmount: number;\n  billTo: string;\n  billEmail: string;\n  billPhone: string;\n  billExternalReferenceNo: string;\n  billReturnUrl: string;\n  billCallbackUrl: string;\n}): Promise<string> {\n  if (!process.env.TOYYIBPAY_SECRET_KEY) {\n    throw new Error('TOYYIBPAY_SECRET_KEY not configured');\n  }\n\n  const catCode = await ensureCategoryExists();\n\n  try {\n    const response = await fetch(`${TOYYIBPAY_BASE_URL}/index.php/api/createBill`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        userSecretKey: process.env.TOYYIBPAY_SECRET_KEY,\n        categoryCode: catCode,\n        billName: params.billName,\n        billDescription: params.billDescription,\n        billPriceSetting: '1',\n        billPayorInfo: '1',\n        billAmount: String(Math.round(params.billAmount * 100)),\n        billReturnUrl: params.billReturnUrl,\n        billCallbackUrl: params.billCallbackUrl,\n        billExternalReferenceNo: params.billExternalReferenceNo,\n        billTo: params.billTo,\n        billEmail: params.billEmail,\n        billPhone: params.billPhone || '0000000000',\n        billPaymentChannel: '2',\n        billChargeToCustomer: '1',\n      }),\n    });\n\n    const data = await response.json() as CreateBillResponse[];\n    \n    if (!data || !data[0]?.BillCode) {\n      throw new Error('Failed to create ToyyibPay bill');\n    }\n\n    const billCode = data[0].BillCode;\n    console.log('✓ ToyyibPay bill created:', billCode);\n    \n    return billCode;\n  } catch (error) {\n    console.error('ToyyibPay bill creation error:', error);\n    throw error;\n  }\n}\n\nexport function getPaymentUrl(billCode: string): string {\n  return `${TOYYIBPAY_BASE_URL}/${billCode}`;\n}\n\nexport async function getBillTransactions(billCode: string): Promise<BillTransaction[]> {\n  try {\n    const response = await fetch(`${TOYYIBPAY_BASE_URL}/index.php/api/getBillTransactions`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        billCode: billCode,\n        billpaymentStatus: '1',\n      }),\n    });\n\n    const data = await response.json() as BillTransaction[];\n    return data || [];\n  } catch (error) {\n    console.error('ToyyibPay transaction check error:', error);\n    return [];\n  }\n}\n","size_bytes":4220},"server/types.ts":{"content":"import 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    userId?: string;\n    oauthState?: string;\n    loginMethod?: string;\n  }\n}\n","size_bytes":166},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table - Discord OAuth for regular users, username/password for admins\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  discordId: varchar(\"discord_id\").unique(), // nullable for admin users\n  email: text(\"email\").notNull(),\n  username: text(\"username\").notNull().unique(), // unique for admin login\n  avatar: text(\"avatar\"),\n  passwordHash: text(\"password_hash\"), // for admin users only\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Packages table - AECOIN packages for sale\nexport const packages = pgTable(\"packages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }), // Original price before discount\n  aecoinAmount: integer(\"aecoin_amount\").notNull(), // Amount of AECOIN\n  codesPerPackage: integer(\"codes_per_package\").notNull().default(1), // How many codes to generate\n  featured: boolean(\"featured\").default(false),\n  imageUrl: text(\"image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertPackageSchema = createInsertSchema(packages).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertPackage = z.infer<typeof insertPackageSchema>;\nexport type Package = typeof packages.$inferSelect;\n\n// Cart items table\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id, { onDelete: \"cascade\" }),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type CartItem = typeof cartItems.$inferSelect;\n\n// Pending payments table - Tracks payment intent/bill creation before completion\nexport const pendingPayments = pgTable(\"pending_payments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  provider: text(\"provider\").notNull(), // toyyibpay, billplz\n  externalId: text(\"external_id\").notNull().unique(), // paymentIntentId or billCode\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  currency: text(\"currency\").notNull().default(\"MYR\"),\n  status: text(\"status\").notNull().default(\"created\"), // created, processing, succeeded, failed, cancelled, expired\n  cartSnapshot: text(\"cart_snapshot\").notNull(), // JSON string of cart items\n  couponCode: text(\"coupon_code\"),\n  metadata: text(\"metadata\"), // JSON string for additional data\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertPendingPaymentSchema = createInsertSchema(pendingPayments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertPendingPayment = z.infer<typeof insertPendingPaymentSchema>;\nexport type PendingPayment = typeof pendingPayments.$inferSelect;\n\n// Orders table\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  finalAmount: decimal(\"final_amount\", { precision: 10, scale: 2 }).notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, paid, fulfilled, failed, cancelled\n  paymentMethod: text(\"payment_method\").notNull(), // toyyibpay, billplz\n  paymentId: text(\"payment_id\").unique(), // External payment ID from ToyyibPay/Billplz - must be unique for idempotency\n  couponCode: text(\"coupon_code\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  completedAt: true,\n});\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type Order = typeof orders.$inferSelect;\n\n// Order items table\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id, { onDelete: \"cascade\" }),\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id),\n  quantity: integer(\"quantity\").notNull(),\n  priceAtPurchase: decimal(\"price_at_purchase\", { precision: 10, scale: 2 }).notNull(),\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\n\n// Redemption codes table - Auto-generated AECOIN codes\nexport const redemptionCodes = pgTable(\"redemption_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(), // The actual redemption code\n  packageId: varchar(\"package_id\").notNull().references(() => packages.id),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id),\n  aecoinAmount: integer(\"aecoin_amount\").notNull(), // AECOIN value for this code\n  status: text(\"status\").notNull().default(\"active\"), // active, redeemed, expired\n  redeemedAt: timestamp(\"redeemed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  expiresAt: timestamp(\"expires_at\"), // Optional expiry\n});\n\nexport const insertRedemptionCodeSchema = createInsertSchema(redemptionCodes).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertRedemptionCode = z.infer<typeof insertRedemptionCodeSchema>;\nexport type RedemptionCode = typeof redemptionCodes.$inferSelect;\n\n// Coupons table - Discount codes\nexport const coupons = pgTable(\"coupons\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  discountType: text(\"discount_type\").notNull(), // percentage, fixed\n  discountValue: decimal(\"discount_value\", { precision: 10, scale: 2 }).notNull(),\n  minPurchase: decimal(\"min_purchase\", { precision: 10, scale: 2 }).default(\"0\"),\n  maxUses: integer(\"max_uses\"), // null = unlimited\n  currentUses: integer(\"current_uses\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  currentUses: true,\n  createdAt: true,\n});\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\nexport type Coupon = typeof coupons.$inferSelect;\n\n// Player rankings table - Leaderboard data\nexport const playerRankings = pgTable(\"player_rankings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  playerName: text(\"player_name\").notNull(), // In-game name\n  stars: integer(\"stars\").notNull().default(0), // Achievement/score system\n  rank: integer(\"rank\").notNull(), // Position in leaderboard\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertPlayerRankingSchema = createInsertSchema(playerRankings).omit({\n  id: true,\n  updatedAt: true,\n});\nexport type InsertPlayerRanking = z.infer<typeof insertPlayerRankingSchema>;\nexport type PlayerRanking = typeof playerRankings.$inferSelect;\n","size_bytes":8385},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/lib/auth\";\nimport Home from \"@/pages/Home\";\nimport Rankings from \"@/pages/Rankings\";\nimport Checkout from \"@/pages/Checkout\";\nimport Orders from \"@/pages/Orders\";\nimport PaymentPending from \"@/pages/PaymentPending\";\nimport PaymentCancelled from \"@/pages/PaymentCancelled\";\nimport PaymentFailed from \"@/pages/PaymentFailed\";\nimport AdminOrders from \"@/pages/AdminOrders\";\nimport AdminPackages from \"@/pages/AdminPackages\";\nimport AdminCoupons from \"@/pages/AdminCoupons\";\nimport AdminLogin from \"@/pages/AdminLogin\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/rankings\" component={Rankings} />\n      <Route path=\"/checkout\" component={Checkout} />\n      <Route path=\"/orders\" component={Orders} />\n      <Route path=\"/payment/pending\" component={PaymentPending} />\n      <Route path=\"/payment/cancelled\" component={PaymentCancelled} />\n      <Route path=\"/payment/failed\" component={PaymentFailed} />\n      <Route path=\"/admin/login\" component={AdminLogin} />\n      <Route path=\"/admin/orders\" component={AdminOrders} />\n      <Route path=\"/admin/packages\" component={AdminPackages} />\n      <Route path=\"/admin/coupons\" component={AdminCoupons} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1874},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-25px); }\n}\n\n@keyframes float-delayed {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-25px); }\n}\n\n@keyframes fade-in {\n  from { opacity: 0; transform: translateY(20px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slide-up {\n  from { opacity: 0; transform: translateY(30px); }\n  to { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes title-glow {\n  0%, 100% { filter: drop-shadow(0 0 60px rgba(255, 215, 0, 0.6)); }\n  50% { filter: drop-shadow(0 0 80px rgba(255, 215, 0, 0.8)); }\n}\n\n.animate-float {\n  animation: float 4s ease-in-out infinite;\n}\n\n.animate-float-delayed {\n  animation: float-delayed 4s ease-in-out infinite 2s;\n}\n\n.animate-fade-in {\n  animation: fade-in 0.8s ease-out;\n}\n\n.animate-fade-in-slow {\n  animation: fade-in 1.2s ease-out 0.6s both;\n}\n\n.animate-slide-up {\n  animation: slide-up 0.8s ease-out 0.3s both;\n}\n\n.animate-slide-up-delayed {\n  animation: slide-up 0.8s ease-out 0.5s both;\n}\n\n.animate-title-glow {\n  animation: title-glow 3s ease-in-out infinite;\n}\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 10%;\n\n  --border: 0 0% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 0 0% 12%;\n\n  --card-border: 0 0% 90%;\n\n  --sidebar: 0 0% 94%;\n\n  --sidebar-foreground: 0 0% 14%;\n\n  --sidebar-border: 0 0% 86%;\n\n  --sidebar-primary: 45 100% 50%;\n\n  --sidebar-primary-foreground: 45 10% 98%;\n\n  --sidebar-accent: 45 8% 88%;\n\n  --sidebar-accent-foreground: 45 8% 18%;\n\n  --sidebar-ring: 45 95% 55%;\n\n  --popover: 0 0% 92%;\n\n  --popover-foreground: 0 0% 16%;\n\n  --popover-border: 0 0% 84%;\n\n  --primary: 45 100% 50%;\n\n  --primary-foreground: 45 10% 98%;\n\n  --secondary: 0 0% 86%;\n\n  --secondary-foreground: 0 0% 18%;\n\n  --muted: 45 5% 90%;\n\n  --muted-foreground: 45 5% 30%;\n\n  --accent: 45 12% 88%;\n\n  --accent-foreground: 45 12% 20%;\n\n  --destructive: 0 84% 45%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 0 0% 72%;\n  --ring: 45 95% 55%;\n  --chart-1: 45 100% 45%;\n  --chart-2: 190 95% 45%;\n  --chart-3: 280 80% 45%;\n  --chart-4: 30 90% 45%;\n  --chart-5: 160 75% 40%;\n\n  --font-sans: Rajdhani, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .25rem; /* 4px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.02);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.04);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 1px 2px -1px hsl(0 0% 0% / 0.06);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.04), 0px 1px 2px -1px hsl(0 0% 0% / 0.08);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.06), 0px 2px 4px -1px hsl(0 0% 0% / 0.10);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.08), 0px 4px 6px -1px hsl(0 0% 0% / 0.12);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.10), 0px 8px 10px -1px hsl(0 0% 0% / 0.14);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.16);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 0 0% 4%;\n\n  --foreground: 0 0% 92%;\n\n  --border: 0 0% 14%;\n\n  --card: 0 0% 6%;\n\n  --card-foreground: 0 0% 90%;\n\n  --card-border: 0 0% 12%;\n\n  --sidebar: 0 0% 8%;\n\n  --sidebar-foreground: 0 0% 88%;\n\n  --sidebar-border: 0 0% 16%;\n\n  --sidebar-primary: 45 100% 50%;\n\n  --sidebar-primary-foreground: 45 10% 98%;\n\n  --sidebar-accent: 45 8% 14%;\n\n  --sidebar-accent-foreground: 45 8% 85%;\n\n  --sidebar-ring: 45 95% 55%;\n\n  --popover: 0 0% 10%;\n\n  --popover-foreground: 0 0% 86%;\n\n  --popover-border: 0 0% 18%;\n\n  --primary: 45 100% 50%;\n\n  --primary-foreground: 45 10% 98%;\n\n  --secondary: 0 0% 16%;\n\n  --secondary-foreground: 0 0% 84%;\n\n  --muted: 45 5% 12%;\n\n  --muted-foreground: 45 5% 72%;\n\n  --accent: 45 12% 14%;\n\n  --accent-foreground: 45 12% 82%;\n\n  --destructive: 0 84% 35%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 0 0% 30%;\n  --ring: 45 95% 55%;\n  --chart-1: 45 100% 60%;\n  --chart-2: 190 95% 65%;\n  --chart-3: 280 80% 70%;\n  --chart-4: 30 90% 65%;\n  --chart-5: 160 75% 60%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.30), 0px 1px 2px -1px hsl(0 0% 0% / 0.35);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.35), 0px 1px 2px -1px hsl(0 0% 0% / 0.40);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.40), 0px 2px 4px -1px hsl(0 0% 0% / 0.45);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.45), 0px 4px 6px -1px hsl(0 0% 0% / 0.50);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.50), 0px 8px 10px -1px hsl(0 0% 0% / 0.55);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.60);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10833},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BackToTop.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence, useReducedMotion } from \"framer-motion\";\nimport { ArrowUp } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function BackToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n  const shouldReduceMotion = useReducedMotion();\n  const rafRef = useRef<number>();\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      // Cancel any pending rAF\n      if (rafRef.current) {\n        cancelAnimationFrame(rafRef.current);\n      }\n\n      // Use requestAnimationFrame to throttle state updates\n      rafRef.current = requestAnimationFrame(() => {\n        const shouldShow = window.scrollY > 500;\n        setIsVisible(prev => prev !== shouldShow ? shouldShow : prev);\n      });\n    };\n\n    window.addEventListener(\"scroll\", toggleVisibility, { passive: true });\n\n    return () => {\n      window.removeEventListener(\"scroll\", toggleVisibility);\n      if (rafRef.current) {\n        cancelAnimationFrame(rafRef.current);\n      }\n    };\n  }, []);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  // If reduced motion, skip entrance/exit animations\n  if (shouldReduceMotion) {\n    return isVisible ? (\n      <div className=\"fixed bottom-8 right-8 z-50\">\n        <Button\n          onClick={scrollToTop}\n          size=\"icon\"\n          className=\"w-12 h-12 rounded-full bg-neon-yellow hover:bg-neon-yellow/90 text-black shadow-lg\"\n          style={{ boxShadow: \"0 0 20px rgba(255, 215, 0, 0.5)\" }}\n          data-testid=\"button-back-to-top\"\n        >\n          <ArrowUp className=\"w-5 h-5\" />\n        </Button>\n      </div>\n    ) : null;\n  }\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <motion.div\n          initial={{ opacity: 0, scale: 0.8, y: 20 }}\n          animate={{ opacity: 1, scale: 1, y: 0 }}\n          exit={{ opacity: 0, scale: 0.8, y: 20 }}\n          transition={{ duration: 0.2 }}\n          className=\"fixed bottom-8 right-8 z-50\"\n        >\n          <Button\n            onClick={scrollToTop}\n            size=\"icon\"\n            className=\"w-12 h-12 rounded-full bg-neon-yellow hover:bg-neon-yellow/90 text-black shadow-lg\"\n            style={{ boxShadow: \"0 0 20px rgba(255, 215, 0, 0.5)\" }}\n            data-testid=\"button-back-to-top\"\n          >\n            <ArrowUp className=\"w-5 h-5\" />\n          </Button>\n        </motion.div>\n      )}\n    </AnimatePresence>\n  );\n}\n","size_bytes":2486},"client/src/components/CartDrawer.tsx":{"content":"import { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Minus, Plus, Trash2, ShoppingBag } from \"lucide-react\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { CartItem, Package } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface CartDrawerProps {\n  open: boolean;\n  onClose: () => void;\n  onCheckout: () => void;\n}\n\ninterface CartItemWithPackage extends CartItem {\n  package: Package;\n}\n\nexport function CartDrawer({ open, onClose, onCheckout }: CartDrawerProps) {\n  const { toast } = useToast();\n\n  // Fetch cart items\n  const { data: cartItems = [], isLoading } = useQuery<CartItemWithPackage[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: open,\n  });\n\n  // Update quantity mutation\n  const updateQuantity = useMutation({\n    mutationFn: async ({ id, quantity }: { id: string; quantity: number }) => {\n      await apiRequest(\"PATCH\", `/api/cart/${id}`, { quantity });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove item mutation\n  const removeItem = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/cart/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Removed\",\n        description: \"Item removed from cart\",\n      });\n    },\n  });\n\n  // Calculate total\n  const total = cartItems.reduce((sum, item) => {\n    return sum + parseFloat(item.package.price) * item.quantity;\n  }, 0);\n\n  return (\n    <Sheet open={open} onOpenChange={(isOpen) => !isOpen && onClose()}>\n      <SheetContent className=\"w-full sm:max-w-lg bg-[#000000] border-l border-white/10\">\n        <SheetHeader>\n          <SheetTitle className=\"text-2xl font-bebas text-white uppercase tracking-wider flex items-center gap-2\">\n            <ShoppingBag className=\"w-6 h-6 text-neon-yellow\" />\n            Your Cart\n          </SheetTitle>\n        </SheetHeader>\n\n        <div className=\"flex flex-col h-[calc(100vh-8rem)] mt-6\">\n          {isLoading ? (\n            <div className=\"flex-1 flex items-center justify-center text-gray-400\">\n              Loading cart...\n            </div>\n          ) : cartItems.length === 0 ? (\n            <div className=\"flex-1 flex flex-col items-center justify-center text-center px-4\">\n              <ShoppingBag className=\"w-16 h-16 text-gray-600 mb-4\" />\n              <h3 className=\"text-lg font-rajdhani text-white mb-2\">Your cart is empty</h3>\n              <p className=\"text-sm text-gray-400 mb-6\">Add some AECOIN packages to get started!</p>\n              <Button\n                onClick={onClose}\n                className=\"bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold uppercase\"\n                data-testid=\"button-close-empty-cart\"\n              >\n                Continue Shopping\n              </Button>\n            </div>\n          ) : (\n            <>\n              {/* Cart Items */}\n              <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n                {cartItems.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"bg-[#1a1a1a]/50 border border-white/10 rounded-2xl p-4\"\n                    data-testid={`cart-item-${item.id}`}\n                  >\n                    <div className=\"flex gap-4\">\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-rajdhani font-bold text-white text-lg\" data-testid={`text-cart-item-name-${item.id}`}>\n                          {item.package.name}\n                        </h4>\n                        <p className=\"text-sm text-gray-400 mt-1\">\n                          {item.package.aecoinAmount.toLocaleString()} AECOIN\n                        </p>\n                        <p className=\"text-neon-yellow font-bold mt-2\" data-testid={`text-cart-item-price-${item.id}`}>\n                          RM{Math.round(parseFloat(item.package.price))}\n                        </p>\n                      </div>\n\n                      <div className=\"flex flex-col items-end gap-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          onClick={() => removeItem.mutate(item.id)}\n                          className=\"text-red-400 hover:text-red-300 h-8 w-8\"\n                          data-testid={`button-remove-item-${item.id}`}\n                        >\n                          <Trash2 className=\"w-4 h-4\" />\n                        </Button>\n\n                        <div className=\"flex items-center gap-2 bg-[#000000] rounded-full p-1\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => {\n                              if (item.quantity > 1) {\n                                updateQuantity.mutate({ id: item.id, quantity: item.quantity - 1 });\n                              }\n                            }}\n                            disabled={item.quantity <= 1}\n                            className=\"h-7 w-7 rounded-full hover:bg-white/10\"\n                            data-testid={`button-decrease-quantity-${item.id}`}\n                          >\n                            <Minus className=\"w-3 h-3 text-white\" />\n                          </Button>\n                          <span className=\"w-8 text-center font-bold text-white\" data-testid={`text-quantity-${item.id}`}>\n                            {item.quantity}\n                          </span>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => updateQuantity.mutate({ id: item.id, quantity: item.quantity + 1 })}\n                            className=\"h-7 w-7 rounded-full hover:bg-white/10\"\n                            data-testid={`button-increase-quantity-${item.id}`}\n                          >\n                            <Plus className=\"w-3 h-3 text-white\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              {/* Footer */}\n              <div className=\"pt-4 space-y-4\">\n                <Separator className=\"bg-white/10\" />\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-lg font-rajdhani font-semibold text-white\">Total:</span>\n                  <span className=\"text-2xl font-bold text-neon-yellow\" data-testid=\"text-cart-total\">\n                    RM{Math.round(total)}\n                  </span>\n                </div>\n\n                <Button\n                  onClick={onCheckout}\n                  className=\"w-full bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold uppercase text-base h-12 rounded-full font-rajdhani tracking-wide\"\n                  data-testid=\"button-checkout\"\n                >\n                  Proceed to Checkout\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":7600},"client/src/components/FAQSection.tsx":{"content":"import {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport { Button } from \"@/components/ui/button\";\nimport { MessageCircle, Mail } from \"lucide-react\";\n\nexport interface FAQItem {\n  question: string;\n  answer: string;\n}\n\ninterface FAQSectionProps {\n  faqs: FAQItem[];\n}\n\nexport function FAQSection({ faqs }: FAQSectionProps) {\n  return (\n    <section id=\"faq\" className=\"min-h-screen bg-[#000000] flex items-center py-20\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"text-center mb-3\">\n          <span className=\"text-neon-yellow font-rajdhani font-semibold text-sm tracking-widest uppercase\">\n            SUPPORT\n          </span>\n        </div>\n\n        <h2\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bebas text-center mb-4 tracking-wider uppercase text-white\"\n          data-testid=\"text-faq-title\"\n        >\n          NEED ANSWERS?\n        </h2>\n\n        <p className=\"text-center text-gray-300 font-rajdhani text-lg mb-12\">\n          Everything you need to know about AECOIN and our services\n        </p>\n\n        <Accordion type=\"single\" collapsible className=\"space-y-4 mb-16\">\n          {faqs.map((faq, index) => (\n            <AccordionItem\n              key={index}\n              value={`item-${index}`}\n              className=\"bg-[#000000] border border-white/10 px-6 data-[state=open]:border-neon-yellow/50 transition-all\"\n              data-testid={`faq-item-${index}`}\n            >\n              <AccordionTrigger\n                className=\"text-left font-rajdhani font-bold text-white hover:text-neon-yellow hover:no-underline text-base md:text-lg py-5\"\n                data-testid={`faq-question-${index}`}\n              >\n                {faq.question}\n              </AccordionTrigger>\n              <AccordionContent className=\"text-gray-300 font-rajdhani pt-2 pb-5\" data-testid={`faq-answer-${index}`}>\n                {faq.answer}\n              </AccordionContent>\n            </AccordionItem>\n          ))}\n        </Accordion>\n\n        <div className=\"bg-gradient-to-r from-neon-yellow/10 to-neon-yellow/5 border border-neon-yellow/30 py-12 px-6 text-center\">\n          <h3 className=\"text-2xl md:text-3xl font-bebas text-white mb-3 uppercase\">\n            Still Have Questions?\n          </h3>\n          <p className=\"text-gray-300 font-rajdhani text-lg mb-8\">\n            Our expert support team is available 24/7 to help you with any issues\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n            <Button className=\"bg-neon-yellow hover:bg-neon-yellow/90 text-black font-rajdhani font-bold uppercase text-sm px-8 h-12\">\n              <MessageCircle className=\"w-5 h-5 mr-2\" />\n              LIVE CHAT SUPPORT\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"border-2 border-neon-yellow text-neon-yellow hover:bg-neon-yellow/10 font-rajdhani font-bold uppercase text-sm px-8 h-12\"\n            >\n              <Mail className=\"w-5 h-5 mr-2\" />\n              EMAIL SUPPORT\n            </Button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3200},"client/src/components/Footer.tsx":{"content":"import { Facebook, Twitter, Instagram, Youtube } from \"lucide-react\";\nimport footerBg from \"@assets/stock_images/gta_5_los_santos_cit_316848d5.jpg\";\n\nexport function Footer() {\n  return (\n    <footer className=\"relative bg-black border-t border-neon-yellow/30 overflow-hidden\">\n      {/* Background Image */}\n      <div \n        className=\"absolute inset-0 opacity-10\"\n        style={{\n          backgroundImage: `url(${footerBg})`,\n          backgroundSize: 'cover',\n          backgroundPosition: 'center',\n        }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-t from-black via-black/90 to-black/70\" />\n      \n      <div className=\"container mx-auto px-4 py-12 relative z-10\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-8 mb-8\">\n          <div>\n            <div className=\"text-xl font-rajdhani font-bold text-white uppercase tracking-wider mb-4\">\n              AECOIN<span className=\"text-neon-yellow\">.STORE</span>\n            </div>\n            <p className=\"text-gray-400 font-rajdhani text-sm mb-6\">\n              Your trusted source for AE OFFICIAL currency. Fast, secure, and reliable.\n            </p>\n            <div className=\"flex gap-3\">\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 rounded-full bg-white/5 hover:bg-neon-yellow/20 border border-white/10 hover:border-neon-yellow/30 flex items-center justify-center text-gray-400 hover:text-neon-yellow transition-all\"\n                data-testid=\"link-facebook\"\n              >\n                <Facebook className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 rounded-full bg-white/5 hover:bg-neon-yellow/20 border border-white/10 hover:border-neon-yellow/30 flex items-center justify-center text-gray-400 hover:text-neon-yellow transition-all\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 rounded-full bg-white/5 hover:bg-neon-yellow/20 border border-white/10 hover:border-neon-yellow/30 flex items-center justify-center text-gray-400 hover:text-neon-yellow transition-all\"\n                data-testid=\"link-instagram\"\n              >\n                <Instagram className=\"w-5 h-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"w-10 h-10 rounded-full bg-white/5 hover:bg-neon-yellow/20 border border-white/10 hover:border-neon-yellow/30 flex items-center justify-center text-gray-400 hover:text-neon-yellow transition-all\"\n                data-testid=\"link-youtube\"\n              >\n                <Youtube className=\"w-5 h-5\" />\n              </a>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"text-white font-bebas text-xl uppercase tracking-wider mb-4\">Quick Links</h3>\n            <ul className=\"space-y-2 font-rajdhani\">\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  Home\n                </a>\n              </li>\n              <li>\n                <a href=\"#packages\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  Packages\n                </a>\n              </li>\n              <li>\n                <a href=\"#gallery\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  Gallery\n                </a>\n              </li>\n              <li>\n                <a href=\"#faq\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  FAQ\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-white font-bebas text-xl uppercase tracking-wider mb-4\">Information</h3>\n            <ul className=\"space-y-2 font-rajdhani\">\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  About Us\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  Terms of Service\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  Privacy Policy\n                </a>\n              </li>\n              <li>\n                <a href=\"#\" className=\"text-gray-400 hover:text-neon-yellow transition-colors\">\n                  Refund Policy\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          <div>\n            <h3 className=\"text-white font-bebas text-xl uppercase tracking-wider mb-4\">Secure Payments</h3>\n            <p className=\"text-gray-400 font-rajdhani text-sm mb-4\">\n              We accept Malaysian payment methods\n            </p>\n            <div className=\"flex gap-2 flex-wrap\">\n              <div className=\"px-3 py-2 bg-white/5 border border-white/10 rounded-full text-gray-400 font-rajdhani text-xs font-semibold\">\n                TOYYIBPAY\n              </div>\n              <div className=\"px-3 py-2 bg-white/5 border border-white/10 rounded-full text-gray-400 font-rajdhani text-xs font-semibold\">\n                BILLPLZ\n              </div>\n              <div className=\"px-3 py-2 bg-white/5 border border-white/10 rounded-full text-gray-400 font-rajdhani text-xs font-semibold\">\n                FPX\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"border-t border-white/10 pt-8\">\n          <div className=\"text-center text-gray-500 font-rajdhani text-sm\">\n            © {new Date().getFullYear()} AE OFFICIAL All rights reserved.\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5890},"client/src/components/GallerySection.tsx":{"content":"import { useState } from \"react\";\n\ninterface GallerySectionProps {\n  images: string[];\n  onCtaClick?: () => void;\n}\n\nconst categories = [\n  \"All\",\n  \"Vehicles\",\n  \"Properties\",\n  \"Weapons\",\n  \"Heists\",\n  \"Business\",\n  \"Racing\",\n  \"Territory\",\n  \"Lifestyle\",\n];\n\nconst categoryLabels = [\n  { category: \"Vehicles\", label: \"Luxury Supercars\" },\n  { category: \"Properties\", label: \"High-End Apartments\" },\n  { category: \"Weapons\", label: \"Military Equipment\" },\n  { category: \"Heists\", label: \"Criminal Operations\" },\n  { category: \"Business\", label: \"Nightclub Empire\" },\n  { category: \"Racing\", label: \"Street Racing\" },\n  { category: \"Territory\", label: \"Gang Territory\" },\n  { category: \"Lifestyle\", label: \"Penthouse Living\" },\n];\n\nexport function GallerySection({ images, onCtaClick }: GallerySectionProps) {\n  const [activeCategory, setActiveCategory] = useState(\"All\");\n\n  return (\n    <section id=\"gallery\" className=\"min-h-screen bg-[#000000] flex items-center py-20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-3\">\n          <span className=\"text-neon-yellow font-rajdhani font-semibold text-sm tracking-widest uppercase\">\n            SHOWCASE\n          </span>\n        </div>\n\n        <h2\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bebas text-center mb-4 tracking-wider uppercase text-white\"\n          data-testid=\"text-gallery-title\"\n        >\n          AE OFFICIAL LIFESTYLE\n        </h2>\n\n        <p className=\"text-center text-gray-300 font-rajdhani text-lg mb-12 max-w-3xl mx-auto\">\n          See what awaits you in the most dangerous and lucrative city in the world\n        </p>\n\n        <div className=\"flex flex-wrap justify-center gap-3 mb-12\">\n          {categories.map((category) => (\n            <button\n              key={category}\n              onClick={() => setActiveCategory(category)}\n              className={`px-6 py-2 font-rajdhani font-semibold text-sm uppercase tracking-wide transition-all ${\n                activeCategory === category\n                  ? \"bg-neon-yellow text-black\"\n                  : \"bg-white/5 text-gray-300 hover:bg-white/10 hover:text-white\"\n              }`}\n              data-testid={`tab-${category.toLowerCase()}`}\n            >\n              {category}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-12\">\n          {images.slice(0, 8).map((image, index) => {\n            const labelData = categoryLabels[index % categoryLabels.length];\n            return (\n              <div\n                key={index}\n                className=\"relative aspect-[4/3] overflow-hidden group cursor-pointer\"\n                data-testid={`img-gallery-${index}`}\n              >\n                <img\n                  src={image}\n                  alt={labelData?.label || `Gallery ${index + 1}`}\n                  className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-110\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\">\n                  <div className=\"absolute bottom-0 left-0 right-0 p-4\">\n                    <div className=\"text-neon-yellow font-rajdhani text-xs font-semibold uppercase tracking-wide mb-1\">\n                      {labelData?.category}\n                    </div>\n                    <div className=\"text-white font-bebas text-xl\">\n                      {labelData?.label}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3741},"client/src/components/Header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { ShoppingCart, LogOut, User, Package, Shield } from \"lucide-react\";\nimport { SiDiscord } from \"react-icons/si\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\ninterface HeaderProps {\n  cartItemCount?: number;\n  onCartClick?: () => void;\n}\n\nexport function Header({ cartItemCount = 0, onCartClick }: HeaderProps) {\n  const { user, login, logout, isLoading } = useAuth();\n  const { toast } = useToast();\n  const [location, navigate] = useLocation();\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollPosition = window.scrollY;\n      setIsVisible(scrollPosition > 50);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n  \n  const scrollToSection = (id: string) => {\n    // If we're not on the home page, navigate there first\n    if (location !== \"/\") {\n      navigate(\"/\");\n      // Wait for navigation and render, then scroll\n      setTimeout(() => {\n        const element = document.getElementById(id);\n        if (element) {\n          element.scrollIntoView({ behavior: \"smooth\" });\n        }\n      }, 100);\n    } else {\n      const element = document.getElementById(id);\n      if (element) {\n        element.scrollIntoView({ behavior: \"smooth\" });\n      }\n    }\n  };\n\n  const goToHome = () => {\n    if (location !== \"/\") {\n      navigate(\"/\");\n    } else {\n      window.scrollTo({ top: 0, behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <header \n      className={`fixed top-0 left-0 right-0 z-[100] transition-all duration-300 ${\n        isVisible \n          ? \"bg-[#000000]/95 backdrop-blur-lg border-b border-white/10\" \n          : \"bg-transparent border-b border-transparent\"\n      }`}\n    >\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <div\n            className=\"text-xl font-rajdhani font-bold cursor-pointer text-white uppercase tracking-wider\"\n            onClick={goToHome}\n            data-testid=\"logo-aecoin-store\"\n          >\n            AECOIN<span className=\"text-neon-yellow\">.STORE</span>\n          </div>\n\n          <nav className=\"hidden md:flex items-center gap-8\">\n            <button\n              onClick={goToHome}\n              className=\"text-gray-300 hover:text-white transition-colors font-rajdhani font-semibold uppercase text-sm\"\n              data-testid=\"link-home\"\n            >\n              HOME\n            </button>\n            <button\n              onClick={() => scrollToSection(\"packages\")}\n              className=\"text-gray-300 hover:text-white transition-colors font-rajdhani font-semibold uppercase text-sm\"\n              data-testid=\"link-packages\"\n            >\n              PACKAGES\n            </button>\n            <button\n              onClick={() => navigate(\"/rankings\")}\n              className=\"text-gray-300 hover:text-white transition-colors font-rajdhani font-semibold uppercase text-sm\"\n              data-testid=\"link-rankings\"\n            >\n              RANKINGS\n            </button>\n            <button\n              onClick={() => scrollToSection(\"gallery\")}\n              className=\"text-gray-300 hover:text-white transition-colors font-rajdhani font-semibold uppercase text-sm\"\n              data-testid=\"link-gallery\"\n            >\n              GALLERY\n            </button>\n            <button\n              onClick={() => scrollToSection(\"faq\")}\n              className=\"text-gray-300 hover:text-white transition-colors font-rajdhani font-semibold uppercase text-sm\"\n              data-testid=\"link-faq\"\n            >\n              FAQ\n            </button>\n          </nav>\n\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onCartClick}\n              className=\"relative text-white hover:text-neon-yellow rounded-full\"\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"w-5 h-5\" />\n              {cartItemCount > 0 && (\n                <Badge\n                  className=\"absolute -top-1 -right-1 h-5 min-w-5 flex items-center justify-center p-0 px-1 bg-neon-yellow text-black font-bold text-xs rounded-full\"\n                  data-testid=\"badge-cart-count\"\n                >\n                  {cartItemCount}\n                </Badge>\n              )}\n            </Button>\n\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex items-center gap-3 h-auto p-2 rounded-full hover:bg-white/5\"\n                    data-testid=\"button-user-menu\"\n                  >\n                    <Avatar className=\"w-9 h-9 ring-2 ring-neon-yellow/50\">\n                      <AvatarImage src={user.avatar || undefined} alt={user.username} />\n                      <AvatarFallback className=\"bg-neon-yellow text-black font-bold\">\n                        {user.username.charAt(0).toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"hidden md:block text-white font-rajdhani font-semibold text-sm\">\n                      {user.username}\n                    </span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent\n                  align=\"end\"\n                  className=\"w-56 bg-[#000000] border-white/10\"\n                >\n                  <DropdownMenuLabel className=\"font-rajdhani text-white\">\n                    My Account\n                  </DropdownMenuLabel>\n                  <DropdownMenuSeparator className=\"bg-white/10\" />\n                  <DropdownMenuItem\n                    onClick={() => navigate(\"/orders\")}\n                    className=\"font-rajdhani text-gray-300 hover:text-white focus:text-white cursor-pointer\"\n                    data-testid=\"menu-item-profile\"\n                  >\n                    <User className=\"w-4 h-4 mr-2\" />\n                    Profile & Orders\n                  </DropdownMenuItem>\n                  {user.isAdmin && (\n                    <>\n                      <DropdownMenuSeparator className=\"bg-white/10\" />\n                      <DropdownMenuLabel className=\"font-rajdhani text-yellow-400\">\n                        Admin Panel\n                      </DropdownMenuLabel>\n                      <DropdownMenuItem\n                        onClick={() => navigate(\"/admin/orders\")}\n                        className=\"font-rajdhani text-gray-300 hover:text-white focus:text-white cursor-pointer\"\n                        data-testid=\"menu-item-admin-orders\"\n                      >\n                        <Package className=\"w-4 h-4 mr-2\" />\n                        Manage Orders\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => navigate(\"/admin/packages\")}\n                        className=\"font-rajdhani text-gray-300 hover:text-white focus:text-white cursor-pointer\"\n                        data-testid=\"menu-item-admin-packages\"\n                      >\n                        <Shield className=\"w-4 h-4 mr-2\" />\n                        Manage Packages\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => navigate(\"/admin/coupons\")}\n                        className=\"font-rajdhani text-gray-300 hover:text-white focus:text-white cursor-pointer\"\n                        data-testid=\"menu-item-admin-coupons\"\n                      >\n                        <Package className=\"w-4 h-4 mr-2\" />\n                        Manage Coupons\n                      </DropdownMenuItem>\n                    </>\n                  )}\n                  <DropdownMenuSeparator className=\"bg-white/10\" />\n                  <DropdownMenuItem\n                    onClick={async () => {\n                      await logout();\n                      toast({\n                        title: \"Logged Out\",\n                        description: \"You have been logged out successfully.\",\n                      });\n                    }}\n                    className=\"font-rajdhani text-red-400 hover:text-red-300 focus:text-red-300 cursor-pointer\"\n                    data-testid=\"menu-item-logout\"\n                  >\n                    <LogOut className=\"w-4 h-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button\n                onClick={() => login()}\n                disabled={isLoading}\n                className=\"bg-black hover:bg-zinc-900 text-neon-yellow border-2 border-neon-yellow/50 hover:border-neon-yellow font-rajdhani font-bold uppercase text-sm h-9 px-6 flex items-center gap-2\"\n                data-testid=\"button-login-discord\"\n              >\n                <SiDiscord className=\"w-5 h-5\" />\n                Login with Discord\n              </Button>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":9649},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport heroImage from \"@assets/generated_images/Cyberpunk_cityscape_hero_background_172a86dd.png\";\nimport coinImage from \"@assets/generated_images/Golden_coins_package_visual_49569ac5.png\";\n\ninterface HeroSectionProps {\n  onShopClick?: () => void;\n  onGalleryClick?: () => void;\n}\n\nexport function HeroSection({ onShopClick, onGalleryClick }: HeroSectionProps) {\n  return (\n    <section className=\"relative min-h-[600px] md:min-h-[700px] flex items-center justify-center overflow-hidden\">\n      <div\n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{\n          backgroundImage: `url(${heroImage})`,\n        }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/60 to-background\" />\n\n      <div className=\"absolute top-1/3 left-1/4 animate-float opacity-30\">\n        <img src={coinImage} alt=\"\" className=\"w-16 h-16 animate-pulse-glow\" />\n      </div>\n      <div className=\"absolute top-1/2 right-1/3 animate-float opacity-20\" style={{ animationDelay: \"1s\" }}>\n        <img src={coinImage} alt=\"\" className=\"w-12 h-12 animate-pulse-glow\" />\n      </div>\n      <div className=\"absolute bottom-1/3 right-1/4 animate-float opacity-25\" style={{ animationDelay: \"2s\" }}>\n        <img src={coinImage} alt=\"\" className=\"w-20 h-20 animate-pulse-glow\" />\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 text-center\">\n        <h1\n          className=\"text-5xl md:text-7xl lg:text-8xl font-bungee mb-6 tracking-wide\"\n          style={{\n            color: \"#FFD700\",\n            textShadow: \"0 0 30px rgba(255, 215, 0, 0.8), 0 0 60px rgba(255, 215, 0, 0.6), 0 0 90px rgba(255, 215, 0, 0.4)\",\n          }}\n          data-testid=\"text-hero-title\"\n        >\n          AECOIN STORE\n        </h1>\n        <p className=\"text-xl md:text-2xl text-foreground mb-12 font-montserrat font-medium\" data-testid=\"text-hero-subtitle\">\n          Your #1 Source for GTA Online Currency\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n          <Button\n            size=\"lg\"\n            onClick={onShopClick}\n            className=\"bg-neon-yellow hover:bg-neon-yellow text-black font-bold text-lg px-8 py-6 border-2 border-neon-yellow/50 transition-all\"\n            style={{\n              boxShadow: \"0 0 20px rgba(255, 215, 0, 0.5)\",\n            }}\n            data-testid=\"button-shop-now\"\n          >\n            SHOP NOW\n          </Button>\n          <Button\n            size=\"lg\"\n            variant=\"outline\"\n            onClick={onGalleryClick}\n            className=\"bg-transparent hover:bg-transparent border-2 border-neon-yellow text-neon-yellow font-bold text-lg px-8 py-6 backdrop-blur-sm transition-all\"\n            style={{\n              boxShadow: \"0 0 20px rgba(255, 215, 0, 0.3)\",\n            }}\n            data-testid=\"button-view-gallery\"\n          >\n            VIEW GALLERY\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3019},"client/src/components/HeroSlider.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport heroImage1 from \"@assets/stock_images/gta_5_gameplay_scree_48aed34a.jpg\";\nimport heroImage2 from \"@assets/stock_images/gta_5_in-game_screen_83a059fc.jpg\";\nimport heroImage3 from \"@assets/stock_images/gta_5_screenshot_gam_23412439.jpg\";\n\ninterface Slide {\n  image: string;\n  title: string;\n  subtitle: string;\n  cta1: string;\n  cta2: string;\n}\n\nconst slides: Slide[] = [\n  {\n    image: heroImage1,\n    title: \"GET AECOIN NOW\",\n    subtitle: \"Instant Delivery • Secure Payment • Best Prices\",\n    cta1: \"SHOP NOW\",\n    cta2: \"VIEW PACKAGES\",\n  },\n  {\n    image: heroImage2,\n    title: \"LEVEL UP YOUR GAME\",\n    subtitle: \"Exclusive Deals • Fast Transactions • 24/7 Support\",\n    cta1: \"BUY COINS\",\n    cta2: \"LEARN MORE\",\n  },\n  {\n    image: heroImage3,\n    title: \"SAVE UP TO 11%\",\n    subtitle: \"Limited Time Offers • Premium Service • Instant Access\",\n    cta1: \"GET STARTED\",\n    cta2: \"SEE DEALS\",\n  },\n];\n\ninterface HeroSliderProps {\n  onShopClick?: () => void;\n  onGalleryClick?: () => void;\n}\n\nexport function HeroSlider({ onShopClick, onGalleryClick }: HeroSliderProps) {\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [isAutoPlay, setIsAutoPlay] = useState(true);\n\n  useEffect(() => {\n    if (!isAutoPlay) return;\n    \n    const interval = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % slides.length);\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, [isAutoPlay]);\n\n  const goToSlide = (index: number) => {\n    setCurrentSlide(index);\n    setIsAutoPlay(false);\n  };\n\n  const nextSlide = () => {\n    setCurrentSlide((prev) => (prev + 1) % slides.length);\n    setIsAutoPlay(false);\n  };\n\n  const prevSlide = () => {\n    setCurrentSlide((prev) => (prev - 1 + slides.length) % slides.length);\n    setIsAutoPlay(false);\n  };\n\n  return (\n    <section className=\"relative h-[450px] md:h-[550px] lg:h-[600px] overflow-hidden\">\n      {slides.map((slide, index) => (\n        <div\n          key={index}\n          className={`absolute inset-0 transition-opacity duration-700 ${\n            index === currentSlide ? \"opacity-100 z-10\" : \"opacity-0 z-0\"\n          }`}\n        >\n          <div\n            className=\"absolute inset-0 bg-cover bg-center\"\n            style={{ backgroundImage: `url(${slide.image})` }}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 via-black/50 to-background\" />\n\n          <div className=\"relative z-20 h-full flex items-center justify-center\">\n            <div className=\"container mx-auto px-4 text-center\">\n              <h1\n                className=\"text-5xl md:text-7xl lg:text-8xl font-bebas mb-4 md:mb-6 tracking-wider uppercase text-neon-yellow animate-in fade-in slide-in-from-bottom-4 duration-700\"\n                data-testid={`text-slide-title-${index}`}\n              >\n                {slide.title}\n              </h1>\n              <p\n                className=\"text-base md:text-xl lg:text-2xl text-foreground mb-8 md:mb-12 font-rajdhani font-semibold max-w-3xl mx-auto animate-in fade-in slide-in-from-bottom-4 duration-700 delay-150\"\n                data-testid={`text-slide-subtitle-${index}`}\n              >\n                {slide.subtitle}\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-3 justify-center items-center animate-in fade-in slide-in-from-bottom-4 duration-700 delay-300\">\n                <Button\n                  onClick={onShopClick}\n                  className=\"w-full sm:w-auto bg-neon-yellow hover:bg-neon-yellow hover:scale-105 text-black font-bold text-sm px-8 py-2 h-10 uppercase rounded-sm transition-transform font-rajdhani tracking-wide\"\n                  data-testid={`button-cta1-${index}`}\n                >\n                  {slide.cta1}\n                </Button>\n                <Button\n                  variant=\"outline\"\n                  onClick={onGalleryClick}\n                  className=\"w-full sm:w-auto bg-transparent hover:bg-neon-yellow/10 hover:scale-105 border border-neon-yellow text-neon-yellow font-bold text-sm px-8 py-2 h-10 uppercase rounded-sm transition-transform font-rajdhani tracking-wide\"\n                  data-testid={`button-cta2-${index}`}\n                >\n                  {slide.cta2}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      ))}\n\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={prevSlide}\n        className=\"absolute left-2 md:left-4 top-1/2 -translate-y-1/2 z-30 bg-black/50 hover:bg-black/70 text-neon-yellow h-9 w-9 rounded-sm\"\n        data-testid=\"button-prev-slide\"\n      >\n        <ChevronLeft className=\"w-5 h-5\" />\n      </Button>\n\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={nextSlide}\n        className=\"absolute right-2 md:right-4 top-1/2 -translate-y-1/2 z-30 bg-black/50 hover:bg-black/70 text-neon-yellow h-9 w-9 rounded-sm\"\n        data-testid=\"button-next-slide\"\n      >\n        <ChevronRight className=\"w-5 h-5\" />\n      </Button>\n\n      <div className=\"absolute bottom-4 md:bottom-6 left-1/2 -translate-x-1/2 z-30 flex gap-2\">\n        {slides.map((_, index) => (\n          <button\n            key={index}\n            onClick={() => goToSlide(index)}\n            className={`h-1 rounded-sm transition-all ${\n              index === currentSlide\n                ? \"w-8 bg-neon-yellow\"\n                : \"w-8 bg-white/30 hover:bg-white/60\"\n            }`}\n            data-testid={`button-slide-indicator-${index}`}\n          />\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":5715},"client/src/components/HowItWorksSection.tsx":{"content":"import { ShoppingBag, CreditCard, Zap, Gamepad2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nconst steps = [\n  {\n    number: \"01\",\n    icon: ShoppingBag,\n    title: \"Choose Package\",\n    description: \"Select your desired AECOIN package from our premium collection\",\n  },\n  {\n    number: \"02\",\n    icon: CreditCard,\n    title: \"Secure Payment\",\n    description: \"Pay safely with our trusted and encrypted payment gateway\",\n  },\n  {\n    number: \"03\",\n    icon: Zap,\n    title: \"Instant Delivery\",\n    description: \"Receive your activation codes immediately after payment\",\n  },\n  {\n    number: \"04\",\n    icon: Gamepad2,\n    title: \"Redeem & Dominate\",\n    description: \"Enter codes in AE Official ad Thank you for supporting us\",\n  },\n];\n\nexport function HowItWorksSection() {\n  return (\n    <section className=\"min-h-screen bg-[#000000] flex items-center py-20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-3\">\n          <span className=\"text-neon-yellow font-rajdhani font-semibold text-sm tracking-widest uppercase\">\n            SIMPLE PROCESS\n          </span>\n        </div>\n\n        <h2\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bebas text-center mb-4 tracking-wider uppercase text-white\"\n          data-testid=\"text-how-it-works-title\"\n        >\n          HOW IT WORKS\n        </h2>\n\n        <p className=\"text-center text-gray-300 font-rajdhani text-lg mb-16 max-w-3xl mx-auto\">\n          From purchase to playing – your journey to AE OFFICIAL dominance in four simple steps\n        </p>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16\">\n          {steps.map((step, index) => (\n            <div key={index} className=\"text-center\" data-testid={`step-${index}`}>\n              <div className=\"text-neon-yellow/30 font-bebas text-6xl mb-4\">\n                {step.number}\n              </div>\n\n              <div className=\"w-16 h-16 mx-auto mb-6 bg-neon-yellow/10 border border-neon-yellow/30 flex items-center justify-center\">\n                <step.icon className=\"w-8 h-8 text-neon-yellow\" />\n              </div>\n\n              <h3 className=\"text-xl font-bebas text-white uppercase tracking-wide mb-3\">\n                {step.title}\n              </h3>\n\n              <p className=\"text-gray-400 font-rajdhani text-sm leading-relaxed\">\n                {step.description}\n              </p>\n            </div>\n          ))}\n        </div>\n\n        <div className=\"text-center bg-gradient-to-r from-neon-yellow/10 to-neon-yellow/5 border border-neon-yellow/30 py-12 px-6\">\n          <h3 className=\"text-3xl md:text-4xl font-bebas text-white mb-3 uppercase\">\n            READY TO RULE AE OFFICIAL?\n          </h3>\n          <p className=\"text-gray-300 font-rajdhani text-lg mb-6\">\n            Join our server with thousands of players who trust us\n          </p>\n          <a \n            href=\"https://cfx.re/join/5jkkqa\" \n            target=\"_blank\" \n            rel=\"noopener noreferrer\"\n            className=\"inline-block bg-neon-yellow hover:bg-neon-yellow/90 text-black font-rajdhani font-bold uppercase text-sm px-10 h-12 leading-[3rem] transition-colors\"\n            data-testid=\"button-connect-server\"\n          >\n            CONNECT TO AE SERVER\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3351},"client/src/components/ModernHero.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport char1 from \"@assets/stock_images/gta_5_character_full_c62f0654.jpg\";\nimport char2 from \"@assets/stock_images/gta_5_character_full_21562e41.jpg\";\n\ninterface ModernHeroProps {\n  onShopClick?: () => void;\n  onGalleryClick?: () => void;\n}\n\nexport function ModernHero({ onShopClick, onGalleryClick }: ModernHeroProps) {\n  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });\n  const [char1Position, setChar1Position] = useState({ x: 0, y: 0 });\n  const [char2Position, setChar2Position] = useState({ x: 0, y: 0 });\n  const heroRef = useRef<HTMLDivElement>(null);\n\n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (!heroRef.current) return;\n    \n    const rect = heroRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    \n    const offsetX = (x - centerX) / centerX;\n    const offsetY = (y - centerY) / centerY;\n    \n    setMousePosition({ x, y });\n    setChar1Position({ x: -offsetX * 30, y: -offsetY * 20 });\n    setChar2Position({ x: offsetX * 30, y: offsetY * 20 });\n  };\n\n  return (\n    <section\n      ref={heroRef}\n      onMouseMove={handleMouseMove}\n      className=\"relative h-screen overflow-hidden\"\n      style={{\n        background: 'radial-gradient(circle at 50% 50%, rgba(255, 215, 0, 0.05) 0%, transparent 50%), linear-gradient(to bottom right, #000000, #0a0a0a, #000000)',\n      }}\n    >\n      {/* Animated grid background */}\n      <div className=\"absolute inset-0 opacity-10\">\n        <div\n          className=\"absolute inset-0 transition-transform duration-300 ease-out\"\n          style={{\n            backgroundImage: `linear-gradient(rgba(255, 215, 0, 0.15) 1px, transparent 1px), linear-gradient(90deg, rgba(255, 215, 0, 0.15) 1px, transparent 1px)`,\n            backgroundSize: '60px 60px',\n            transform: `translate(${mousePosition.x * 0.02}px, ${mousePosition.y * 0.02}px)`,\n          }}\n        />\n      </div>\n\n      {/* Floating particles */}\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n        {[...Array(15)].map((_, i) => (\n          <div\n            key={i}\n            className=\"absolute w-1 h-1 bg-neon-yellow rounded-full animate-pulse\"\n            style={{\n              left: `${Math.random() * 100}%`,\n              top: `${Math.random() * 100}%`,\n              animationDelay: `${Math.random() * 3}s`,\n              animationDuration: `${Math.random() * 2 + 2}s`,\n              opacity: Math.random() * 0.4 + 0.1,\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Left Character - Floating */}\n      <div className=\"absolute left-0 top-0 w-1/3 h-full hidden lg:block pointer-events-none\">\n        <div\n          className=\"relative h-full transition-transform duration-300 ease-out\"\n          style={{\n            transform: `translate(${char1Position.x}px, ${char1Position.y}px)`,\n          }}\n        >\n          <div className=\"absolute bottom-0 left-1/4 w-80 h-[550px] animate-float\">\n            <div\n              className=\"w-full h-full bg-cover bg-center bg-no-repeat\"\n              style={{\n                backgroundImage: `url(${char1})`,\n                filter: 'drop-shadow(0 0 50px rgba(255, 215, 0, 0.4)) brightness(1.1)',\n                maskImage: 'linear-gradient(to bottom, transparent 0%, black 15%, black 85%, transparent 100%)',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Right Character - Floating */}\n      <div className=\"absolute right-0 top-0 w-1/3 h-full hidden lg:block pointer-events-none\">\n        <div\n          className=\"relative h-full transition-transform duration-300 ease-out\"\n          style={{\n            transform: `translate(${char2Position.x}px, ${char2Position.y}px)`,\n          }}\n        >\n          <div className=\"absolute bottom-0 right-1/4 w-80 h-[550px] animate-float-delayed\">\n            <div\n              className=\"w-full h-full bg-cover bg-center bg-no-repeat\"\n              style={{\n                backgroundImage: `url(${char2})`,\n                filter: 'drop-shadow(0 0 50px rgba(255, 215, 0, 0.4)) brightness(1.1)',\n                maskImage: 'linear-gradient(to bottom, transparent 0%, black 15%, black 85%, transparent 100%)',\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      {/* Center Content */}\n      <div className=\"relative z-20 h-full flex items-center justify-center\">\n        <div className=\"text-center px-4 max-w-5xl\">\n          {/* Glassmorphism badge */}\n          <div className=\"inline-block mb-8 animate-fade-in\">\n            <div className=\"bg-white/5 backdrop-blur-xl border border-neon-yellow/30 rounded-full px-8 py-3 hover:bg-white/10 transition-all\">\n              <span className=\"text-neon-yellow font-rajdhani font-bold text-sm md:text-base uppercase tracking-widest\">\n                ⚡ LIMITED TIME OFFER\n              </span>\n            </div>\n          </div>\n\n          {/* Main Title */}\n          <h1\n            className=\"text-6xl md:text-8xl lg:text-9xl font-bebas mb-6 tracking-wider uppercase animate-title-glow\"\n            style={{\n              background: 'linear-gradient(to bottom, #FFD700 0%, #FFA500 100%)',\n              WebkitBackgroundClip: 'text',\n              WebkitTextFillColor: 'transparent',\n              filter: 'drop-shadow(0 0 60px rgba(255, 215, 0, 0.6))',\n            }}\n            data-testid=\"hero-title\"\n          >\n            AECOIN STORE\n          </h1>\n\n          {/* Subtitle */}\n          <p className=\"text-xl md:text-3xl text-gray-200 mb-12 font-rajdhani font-semibold animate-slide-up\">\n            Your Ultimate Source for{\" \"}\n            <span className=\"text-neon-yellow font-bold\">GTA Online Currency</span>\n          </p>\n\n          {/* CTA Buttons */}\n          <div className=\"flex flex-col sm:flex-row gap-5 justify-center items-center mb-16 animate-slide-up-delayed\">\n            <Button\n              onClick={onShopClick}\n              className=\"group relative overflow-hidden bg-neon-yellow hover:bg-neon-yellow hover:scale-105 text-black font-bold text-base px-12 h-14 uppercase rounded-sm font-rajdhani tracking-wider transition-transform shadow-2xl shadow-neon-yellow/50\"\n              data-testid=\"button-shop-now\"\n            >\n              SHOP NOW\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={onGalleryClick}\n              className=\"relative overflow-hidden bg-transparent hover:bg-neon-yellow/20 border-2 border-neon-yellow text-neon-yellow hover:text-neon-yellow font-bold text-base px-12 h-14 uppercase rounded-sm font-rajdhani tracking-wider backdrop-blur-sm hover:scale-105 transition-transform\"\n              data-testid=\"button-view-packages\"\n            >\n              VIEW PACKAGES\n            </Button>\n          </div>\n\n          {/* Stats */}\n          <div className=\"grid grid-cols-3 gap-8 max-w-2xl mx-auto animate-fade-in-slow\">\n            {[\n              { value: \"24/7\", label: \"Support\" },\n              { value: \"99.9%\", label: \"Uptime\" },\n              { value: \"Instant\", label: \"Delivery\" },\n            ].map((stat, i) => (\n              <div key={i} className=\"text-center group\">\n                <div className=\"text-4xl md:text-5xl font-bebas text-neon-yellow mb-1 group-hover:scale-110 transition-transform\">\n                  {stat.value}\n                </div>\n                <div className=\"text-sm text-gray-400 uppercase font-rajdhani font-semibold\">\n                  {stat.label}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Mouse cursor glow effect */}\n      <div\n        className=\"pointer-events-none absolute w-96 h-96 rounded-full transition-all duration-300 ease-out\"\n        style={{\n          left: mousePosition.x - 192,\n          top: mousePosition.y - 192,\n          background: 'radial-gradient(circle, rgba(255, 215, 0, 0.12) 0%, transparent 70%)',\n        }}\n      />\n    </section>\n  );\n}\n","size_bytes":8173},"client/src/components/PackageCard.tsx":{"content":"import { Card, CardContent, CardFooter, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, useMotionValue, useTransform, useReducedMotion } from \"framer-motion\";\nimport { useState, useRef } from \"react\";\n\nexport interface Package {\n  id: string;\n  amount: number;\n  price: number;\n  originalPrice: number;\n  image: string;\n  badge?: string;\n}\n\ninterface PackageCardProps {\n  package: Package;\n  onAddToCart?: (pkg: Package) => void;\n}\n\nfunction PackageCardContent({ pkg, onAddToCart }: { pkg: Package; onAddToCart?: (pkg: Package) => void }) {\n  return (\n    <>\n      {/* Image Background */}\n      <div className=\"relative aspect-[4/3] overflow-hidden\">\n        <img\n          src={pkg.image}\n          alt={`${pkg.amount} AECOIN`}\n          className=\"w-full h-full object-cover transition-all duration-500 group-hover:scale-110\"\n          data-testid={`img-package-${pkg.id}`}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-[#000000] via-transparent to-transparent\" />\n        \n        {/* Badge */}\n        {pkg.badge && (\n          <div\n            className=\"absolute top-4 right-4 bg-neon-yellow text-black font-bold text-xs px-3 py-1 uppercase\"\n            data-testid={`badge-package-${pkg.id}`}\n          >\n            {pkg.badge}\n          </div>\n        )}\n      </div>\n\n      {/* Content */}\n      <CardHeader className=\"pb-2 pt-6\">\n        <div className=\"text-center\">\n          <div className=\"text-5xl font-bebas text-white tracking-wider\" data-testid={`text-package-amount-${pkg.id}`}>\n            {pkg.amount.toLocaleString()}\n          </div>\n          <div className=\"text-sm font-rajdhani text-gray-400 uppercase tracking-widest mt-1\">\n            AECOIN\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"pb-2\">\n        <div className=\"text-center\">\n          <div className=\"flex items-baseline justify-center gap-2\">\n            <span className=\"text-3xl font-bold text-neon-yellow\" data-testid={`text-price-${pkg.id}`}>\n              RM{pkg.price}\n            </span>\n            <span className=\"text-base text-gray-500 line-through\" data-testid={`text-original-price-${pkg.id}`}>\n              RM{pkg.originalPrice}\n            </span>\n          </div>\n        </div>\n      </CardContent>\n\n      <CardFooter className=\"px-6 pb-6\">\n        <Button\n          className=\"w-full bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold uppercase text-sm h-12 font-rajdhani tracking-wide shadow-lg shadow-neon-yellow/20\"\n          onClick={() => onAddToCart?.(pkg)}\n          data-testid={`button-add-to-cart-${pkg.id}`}\n        >\n          BUY NOW\n        </Button>\n      </CardFooter>\n    </>\n  );\n}\n\nexport function PackageCard({ package: pkg, onAddToCart }: PackageCardProps) {\n  const shouldReduceMotion = useReducedMotion();\n  const [isHovered, setIsHovered] = useState(false);\n  const cardRef = useRef<HTMLDivElement>(null);\n  const boundsRef = useRef<DOMRect | null>(null);\n  const rafRef = useRef<number>();\n  \n  const mouseX = useMotionValue(0);\n  const mouseY = useMotionValue(0);\n  \n  // Calculate rotation based on mouse position (subtle tilt)\n  const rotateX = useTransform(mouseY, [-0.5, 0.5], [3, -3]);\n  const rotateY = useTransform(mouseX, [-0.5, 0.5], [-3, 3]);\n  \n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {\n    if (shouldReduceMotion || !boundsRef.current) return;\n    \n    // Cancel any pending rAF\n    if (rafRef.current) {\n      cancelAnimationFrame(rafRef.current);\n    }\n    \n    // Use requestAnimationFrame to throttle updates\n    rafRef.current = requestAnimationFrame(() => {\n      const bounds = boundsRef.current;\n      if (!bounds) return;\n      \n      const centerX = bounds.left + bounds.width / 2;\n      const centerY = bounds.top + bounds.height / 2;\n      \n      // Normalize mouse position to -0.5 to 0.5 range\n      const normalizedX = Math.max(-0.5, Math.min(0.5, (e.clientX - centerX) / bounds.width));\n      const normalizedY = Math.max(-0.5, Math.min(0.5, (e.clientY - centerY) / bounds.height));\n      \n      mouseX.set(normalizedX);\n      mouseY.set(normalizedY);\n    });\n  };\n  \n  const handleMouseEnter = () => {\n    setIsHovered(true);\n    // Cache bounds on enter for better performance\n    if (cardRef.current) {\n      boundsRef.current = cardRef.current.getBoundingClientRect();\n    }\n  };\n  \n  const handleMouseLeave = () => {\n    setIsHovered(false);\n    boundsRef.current = null;\n    mouseX.set(0);\n    mouseY.set(0);\n    // Clean up any pending rAF\n    if (rafRef.current) {\n      cancelAnimationFrame(rafRef.current);\n    }\n  };\n\n  // If reduced motion, use regular Card without 3D effect\n  if (shouldReduceMotion) {\n    return (\n      <Card\n        className=\"group relative overflow-hidden bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-white/10 hover:border-neon-yellow/50 transition-all duration-300\"\n        style={{\n          boxShadow: isHovered\n            ? \"0 0 30px rgba(255, 215, 0, 0.3), 0 20px 60px rgba(0, 0, 0, 0.5)\"\n            : \"0 10px 30px rgba(0, 0, 0, 0.3)\",\n        }}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        data-testid={`card-package-${pkg.id}`}\n      >\n        <PackageCardContent pkg={pkg} onAddToCart={onAddToCart} />\n      </Card>\n    );\n  }\n\n  // With 3D tilt effect\n  return (\n    <div style={{ perspective: \"800px\" }}>\n      <motion.div\n        ref={cardRef}\n        onMouseMove={handleMouseMove}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n        style={{\n          transformStyle: \"preserve-3d\",\n          rotateX,\n          rotateY,\n          willChange: \"transform\",\n        }}\n        transition={{ type: \"spring\", stiffness: 300, damping: 30 }}\n      >\n        <Card\n          className=\"group relative overflow-hidden bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-white/10 hover:border-neon-yellow/50 transition-all duration-300\"\n          style={{\n            boxShadow: isHovered\n              ? \"0 0 30px rgba(255, 215, 0, 0.3), 0 20px 60px rgba(0, 0, 0, 0.5)\"\n              : \"0 10px 30px rgba(0, 0, 0, 0.3)\",\n          }}\n          data-testid={`card-package-${pkg.id}`}\n        >\n          <PackageCardContent pkg={pkg} onAddToCart={onAddToCart} />\n        </Card>\n      </motion.div>\n    </div>\n  );\n}\n","size_bytes":6388},"client/src/components/PackagesSection.tsx":{"content":"import { PackageCard } from \"./PackageCard\";\nimport type { Package } from \"./PackageCard\";\n\ninterface PackagesSectionProps {\n  packages: Package[];\n  onAddToCart?: (pkg: Package) => void;\n}\n\nexport function PackagesSection({ packages, onAddToCart }: PackagesSectionProps) {\n  return (\n    <section id=\"packages\" className=\"min-h-screen bg-[#000000] flex items-center py-20\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-3\">\n          <span className=\"text-neon-yellow font-rajdhani font-semibold text-sm tracking-widest uppercase\">\n            AE OFFICIAL\n          </span>\n        </div>\n\n        <h2\n          className=\"text-4xl md:text-6xl lg:text-7xl font-bebas text-center mb-4 tracking-wider uppercase text-white\"\n          data-testid=\"text-section-title\"\n        >\n          CHOOSE YOUR COINS\n        </h2>\n\n        <p className=\"text-center text-gray-300 font-rajdhani text-lg mb-8 max-w-3xl mx-auto\">\n          Unlock the full potential of AE OFFICIAL with our instant AECOIN packages\n        </p>\n\n        <div\n          className=\"text-center mb-12 bg-neon-yellow/10 border border-neon-yellow/30 py-3 mx-auto max-w-2xl\"\n          data-testid=\"banner-limited-offer\"\n        >\n          <span className=\"text-neon-yellow font-rajdhani font-bold text-sm uppercase tracking-wide\">\n            LIMITED TIME - BONUS AECOIN ON ALL PACKAGES\n          </span>\n        </div>\n\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 mb-12\">\n          {packages.map((pkg) => (\n            <PackageCard key={pkg.id} package={pkg} onAddToCart={onAddToCart} />\n          ))}\n        </div>\n\n        <div className=\"text-center\">\n          <p className=\"text-gray-400 font-rajdhani mb-4\">\n            Need a custom package? Contact our team for bulk discounts\n          </p>\n          <button className=\"border-2 border-neon-yellow text-neon-yellow hover:bg-neon-yellow/10 font-rajdhani font-bold uppercase text-sm px-8 h-12 transition-colors\">\n            CONTACT SALES\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2116},"client/src/components/ReferenceHero.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play } from \"lucide-react\";\n\nfunction TypingText({ text, speed = 100 }: { text: string; speed?: number }) {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  useEffect(() => {\n    setDisplayedText(\"\");\n    setCurrentIndex(0);\n  }, [text]);\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n      return () => clearTimeout(timeout);\n    }\n  }, [currentIndex, text, speed]);\n\n  return <>{displayedText}<span className=\"animate-pulse\">|</span></>;\n}\n\nfunction CyclingTypingText({ phrases, speed = 80, pauseDuration = 2000 }: { phrases: string[]; speed?: number; pauseDuration?: number }) {\n  const [currentPhraseIndex, setCurrentPhraseIndex] = useState(0);\n\n  useEffect(() => {\n    const currentPhrase = phrases[currentPhraseIndex];\n    const typingDuration = currentPhrase.length * speed;\n    const totalDuration = typingDuration + pauseDuration;\n\n    const timer = setTimeout(() => {\n      setCurrentPhraseIndex((prev) => (prev + 1) % phrases.length);\n    }, totalDuration);\n\n    return () => clearTimeout(timer);\n  }, [currentPhraseIndex, phrases, speed, pauseDuration]);\n\n  return <TypingText text={phrases[currentPhraseIndex]} speed={speed} />;\n}\n\nimport gta1 from \"@assets/gta1_1759551121573.png\";\nimport trailerThumb from \"@assets/hqdefault_1759551446234.jpg\";\n\ninterface ReferenceHeroProps {\n  onShopClick?: () => void;\n  onPackagesClick?: () => void;\n  onRankingsClick?: () => void;\n}\n\nexport function ReferenceHero({ onShopClick, onPackagesClick, onRankingsClick }: ReferenceHeroProps) {\n  const subtitlePhrases = [\n    \"MODERN CURRENCY\",\n    \"AE OFFICIAL\",\n    \"PREMIUM REWARDS\",\n    \"INSTANT DELIVERY\"\n  ];\n\n  return (\n    <section className=\"relative h-screen bg-[#000000] overflow-hidden\">\n      {/* Full Background Image */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{ \n          backgroundImage: `url(${gta1})`,\n          backgroundPosition: 'center center',\n        }}\n      >\n        {/* Dark Overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/90 via-black/70 to-black/40\" />\n      </div>\n\n      <div className=\"container mx-auto px-8 h-full relative z-10\">\n        <div className=\"grid lg:grid-cols-2 gap-16 h-full items-center\">\n          {/* Left Content */}\n          <div \n            className=\"space-y-4 max-w-2xl pt-16\"\n            style={{ animation: \"slideInLeft 0.6s ease-out\" }}\n          >\n            {/* Main Title */}\n            <h1 className=\"text-5xl sm:text-6xl md:text-7xl lg:text-8xl font-bebas text-white leading-none tracking-wide uppercase\">\n              <div className=\"mb-2\">AECOIN</div>\n              <div className=\"text-3xl sm:text-4xl md:text-5xl font-rajdhani font-bold tracking-wider\">\n                <CyclingTypingText phrases={subtitlePhrases} speed={80} pauseDuration={2000} />\n              </div>\n            </h1>\n\n            {/* About Section */}\n            <div className=\"space-y-4 pt-2\">\n              <h2 className=\"text-white font-bebas text-2xl tracking-widest uppercase\">\n                ABOUT THE GAME\n              </h2>\n              <p className=\"text-gray-300 text-base md:text-lg font-rajdhani leading-relaxed\">\n                AECOIN is a premium virtual currency system designed specifically for AE OFFICIAL. Starting with instant delivery in 2025, it revolutionized in-game purchases. The most efficient way to acquire luxury vehicles, high-end weapons skin, and exclusive items in AE OFFICIAL.\n              </p>\n            </div>\n\n            {/* CTA Buttons */}\n            <div className=\"pt-2 flex flex-wrap gap-4\">\n              <Button\n                onClick={onShopClick}\n                className=\"bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold text-sm px-10 h-14 uppercase font-rajdhani tracking-widest shadow-2xl\"\n                data-testid=\"button-buy-coins\"\n              >\n                BUY COINS\n              </Button>\n              <Button\n                onClick={onRankingsClick}\n                variant=\"outline\"\n                className=\"border-2 border-white text-white hover:bg-white/10 font-bold text-sm px-10 h-14 uppercase font-rajdhani tracking-widest\"\n                data-testid=\"button-explore-rankings\"\n              >\n                EXPLORE RANKINGS\n              </Button>\n            </div>\n          </div>\n\n          {/* Right Content - Video Section */}\n          <div \n            className=\"flex items-center justify-end\"\n            style={{ animation: \"fadeIn 0.8s ease-out 0.3s both\" }}\n          >\n            <div className=\"space-y-4\">\n              <h3 className=\"text-white font-bebas text-xl tracking-widest uppercase text-right\">\n                RELEASE TRAILER\n              </h3>\n              <a \n                href=\"https://youtu.be/tV95N0TIltc\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"relative w-80 h-52 rounded-lg overflow-hidden group cursor-pointer shadow-2xl border-2 border-white/20 block\"\n                data-testid=\"link-release-trailer\"\n              >\n                <img \n                  src={trailerThumb} \n                  alt=\"Video Thumbnail\"\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-black/40 group-hover:bg-black/20 transition-all duration-300\" />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-16 h-16 rounded-full bg-white/90 group-hover:bg-neon-yellow transition-all duration-300 flex items-center justify-center shadow-xl\">\n                    <Play className=\"w-7 h-7 text-black ml-1\" fill=\"currentColor\" />\n                  </div>\n                </div>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <style>{`\n        @keyframes slideInLeft {\n          from { opacity: 0; transform: translateX(-50px); }\n          to { opacity: 1; transform: translateX(0); }\n        }\n        @keyframes fadeIn {\n          from { opacity: 0; }\n          to { opacity: 1; }\n        }\n      `}</style>\n    </section>\n  );\n}\n","size_bytes":6462},"client/src/components/ScrollFadeIn.tsx":{"content":"import { motion, useReducedMotion } from \"framer-motion\";\nimport { ReactNode } from \"react\";\n\ninterface ScrollFadeInProps {\n  children: ReactNode;\n  delay?: number;\n  direction?: \"up\" | \"down\" | \"left\" | \"right\";\n  className?: string;\n}\n\nexport function ScrollFadeIn({ \n  children, \n  delay = 0, \n  direction = \"up\",\n  className = \"\"\n}: ScrollFadeInProps) {\n  const shouldReduceMotion = useReducedMotion();\n  \n  const directionOffset = {\n    up: { y: 40 },\n    down: { y: -40 },\n    left: { x: 40 },\n    right: { x: -40 },\n  };\n\n  // If user prefers reduced motion, skip animations\n  if (shouldReduceMotion) {\n    return <div className={className}>{children}</div>;\n  }\n\n  return (\n    <motion.div\n      className={className}\n      initial={{ \n        opacity: 0,\n        ...directionOffset[direction]\n      }}\n      whileInView={{ \n        opacity: 1,\n        x: 0,\n        y: 0\n      }}\n      viewport={{ once: true, margin: \"-100px\" }}\n      transition={{\n        duration: 0.6,\n        delay,\n        ease: [0.25, 0.4, 0.25, 1]\n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n","size_bytes":1089},"client/src/components/StatsCounter.tsx":{"content":"import { motion, useMotionValue, useTransform, animate, useReducedMotion } from \"framer-motion\";\nimport { useEffect, useRef } from \"react\";\nimport { Users, Coins, ShoppingBag } from \"lucide-react\";\n\nfunction Counter({ value, duration = 2 }: { value: number; duration?: number }) {\n  const shouldReduceMotion = useReducedMotion();\n  const count = useMotionValue(0);\n  const rounded = useTransform(count, (latest) => Math.round(latest));\n  const nodeRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    // If reduced motion preferred, show final value immediately\n    if (shouldReduceMotion) {\n      if (nodeRef.current) {\n        nodeRef.current.textContent = value.toLocaleString();\n      }\n      return;\n    }\n\n    const animation = animate(count, value, { duration });\n    \n    return animation.stop;\n  }, [value, duration, count, shouldReduceMotion]);\n\n  useEffect(() => {\n    if (shouldReduceMotion) return;\n\n    const unsubscribe = rounded.on(\"change\", (latest) => {\n      if (nodeRef.current) {\n        nodeRef.current.textContent = latest.toLocaleString();\n      }\n    });\n\n    return () => unsubscribe();\n  }, [rounded, shouldReduceMotion]);\n\n  return <span ref={nodeRef}>{shouldReduceMotion ? value.toLocaleString() : \"\"}</span>;\n}\n\nexport function StatsCounter() {\n  const shouldReduceMotion = useReducedMotion();\n  \n  const stats = [\n    {\n      icon: Users,\n      label: \"Happy Customers\",\n      value: 15000,\n      suffix: \"+\",\n    },\n    {\n      icon: Coins,\n      label: \"AECOIN Delivered\",\n      value: 50000000,\n      suffix: \"+\",\n    },\n    {\n      icon: ShoppingBag,\n      label: \"Orders Completed\",\n      value: 25000,\n      suffix: \"+\",\n    },\n  ];\n\n  // If reduced motion, render without animations\n  if (shouldReduceMotion) {\n    return (\n      <section className=\"py-16 bg-gradient-to-b from-[#000000] to-[#000000]\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {stats.map((stat, index) => (\n              <div\n                key={index}\n                className=\"text-center p-8 rounded-2xl bg-black/20 border border-neon-yellow/20 hover:border-neon-yellow/50 transition-all duration-300\"\n                data-testid={`stat-${index}`}\n              >\n                <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-xl bg-neon-yellow/10 border border-neon-yellow/30 mb-4\">\n                  <stat.icon className=\"w-8 h-8 text-neon-yellow\" />\n                </div>\n                <div className=\"text-4xl md:text-5xl font-bebas text-neon-yellow mb-2\">\n                  <Counter value={stat.value} />\n                  {stat.suffix}\n                </div>\n                <div className=\"text-gray-400 font-rajdhani text-sm uppercase tracking-wide\">\n                  {stat.label}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"py-16 bg-gradient-to-b from-[#000000] to-[#000000]\">\n      <div className=\"container mx-auto px-4\">\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6 }}\n          className=\"grid grid-cols-1 md:grid-cols-3 gap-8\"\n        >\n          {stats.map((stat, index) => (\n            <motion.div\n              key={index}\n              initial={{ opacity: 0, scale: 0.9 }}\n              whileInView={{ opacity: 1, scale: 1 }}\n              viewport={{ once: true }}\n              transition={{ duration: 0.5, delay: index * 0.1 }}\n              className=\"text-center p-8 rounded-2xl bg-black/20 border border-neon-yellow/20 hover:border-neon-yellow/50 transition-all duration-300\"\n              data-testid={`stat-${index}`}\n            >\n              <div className=\"inline-flex items-center justify-center w-16 h-16 rounded-xl bg-neon-yellow/10 border border-neon-yellow/30 mb-4\">\n                <stat.icon className=\"w-8 h-8 text-neon-yellow\" />\n              </div>\n              <div className=\"text-4xl md:text-5xl font-bebas text-neon-yellow mb-2\">\n                <Counter value={stat.value} />\n                {stat.suffix}\n              </div>\n              <div className=\"text-gray-400 font-rajdhani text-sm uppercase tracking-wide\">\n                {stat.label}\n              </div>\n            </motion.div>\n          ))}\n        </motion.div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":4499},"client/src/components/TrustBadges.tsx":{"content":"import { Shield, Zap, Headphones, CreditCard } from \"lucide-react\";\n\nexport function TrustBadges() {\n  const badges = [\n    {\n      icon: Shield,\n      title: \"100% Secure\",\n      description: \"Bank-level encryption\",\n    },\n    {\n      icon: Zap,\n      title: \"Instant Delivery\",\n      description: \"Codes in seconds\",\n    },\n    {\n      icon: Headphones,\n      title: \"24/7 Support\",\n      description: \"Always here to help\",\n    },\n    {\n      icon: CreditCard,\n      title: \"Trusted Payments\",\n      description: \"ToyyibPay & Billplz\",\n    },\n  ];\n\n  return (\n    <section className=\"py-12 bg-gradient-to-b from-[#000000] to-[#000000]\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6 md:gap-8\">\n          {badges.map((badge, index) => (\n            <div\n              key={index}\n              className=\"flex flex-col items-center text-center p-6 rounded-2xl bg-black/20 border border-white/5 hover:border-neon-yellow/30 transition-all duration-300 hover-elevate\"\n              data-testid={`badge-${index}`}\n            >\n              <div className=\"w-14 h-14 rounded-xl bg-neon-yellow/10 border border-neon-yellow/30 flex items-center justify-center mb-4\">\n                <badge.icon className=\"w-7 h-7 text-neon-yellow\" />\n              </div>\n              <h3 className=\"text-white font-rajdhani font-bold text-sm uppercase mb-1\">\n                {badge.title}\n              </h3>\n              <p className=\"text-gray-400 text-xs font-rajdhani\">\n                {badge.description}\n              </p>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1660},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.tsx":{"content":"import { createContext, useContext, useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"./queryClient\";\nimport type { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: () => Promise<void>;\n  logout: () => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n\n  // Fetch current user\n  const { data, isLoading } = useQuery<{ user: User }>({\n    queryKey: [\"/api/auth/me\"],\n    retry: false,\n    refetchOnWindowFocus: false,\n  });\n\n  useEffect(() => {\n    if (data?.user) {\n      setUser(data.user);\n    }\n  }, [data]);\n\n  // Logout mutation\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/auth/logout\");\n    },\n    onSuccess: () => {\n      setUser(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    },\n  });\n\n  const login = async () => {\n    // Redirect to Discord OAuth\n    window.location.href = '/api/auth/discord';\n  };\n\n  const logout = async () => {\n    await logoutMutation.mutateAsync();\n  };\n\n  const refreshUser = async () => {\n    await queryClient.invalidateQueries({ queryKey: [\"/api/auth/me\"] });\n    const data = await queryClient.fetchQuery<{ user: User }>({\n      queryKey: [\"/api/auth/me\"],\n    });\n    setUser(data.user);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, isLoading, login, logout, refreshUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":1932},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminCoupons.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, Ticket } from \"lucide-react\";\n\ninterface Coupon {\n  id: string;\n  code: string;\n  discountType: \"percentage\" | \"fixed\";\n  discountValue: string;\n  isActive: boolean;\n  expiresAt: string | null;\n  usageLimit: number | null;\n  usageCount: number;\n}\n\nconst couponSchema = z.object({\n  code: z\n    .string()\n    .min(3, \"Code must be at least 3 characters\")\n    .max(50, \"Code must be at most 50 characters\")\n    .regex(/^[A-Z0-9]+$/, \"Code must be uppercase letters and numbers only\"),\n  discountType: z.enum([\"percentage\", \"fixed\"]),\n  discountValue: z.coerce.number().min(0.01, \"Discount must be greater than 0\"),\n  isActive: z.boolean(),\n  expiresAt: z.string().optional(),\n  usageLimit: z.coerce.number().min(1).optional(),\n});\n\ntype CouponFormData = z.infer<typeof couponSchema>;\n\nexport default function AdminCoupons() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingCoupon, setEditingCoupon] = useState<Coupon | null>(null);\n\n  const { data: coupons, isLoading } = useQuery<Coupon[]>({\n    queryKey: [\"/api/admin/coupons\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  const form = useForm<CouponFormData>({\n    resolver: zodResolver(couponSchema),\n    defaultValues: {\n      code: \"\",\n      discountType: \"percentage\",\n      discountValue: 0,\n      isActive: true,\n      expiresAt: undefined,\n      usageLimit: undefined,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CouponFormData) => {\n      return apiRequest(\"POST\", \"/api/admin/coupons\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coupons\"] });\n      toast({\n        title: \"Coupon Created\",\n        description: \"The coupon has been created successfully.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create coupon.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: CouponFormData }) => {\n      return apiRequest(\"PATCH\", `/api/admin/coupons/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coupons\"] });\n      toast({\n        title: \"Coupon Updated\",\n        description: \"The coupon has been updated successfully.\",\n      });\n      setIsDialogOpen(false);\n      setEditingCoupon(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update coupon.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/coupons/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/coupons\"] });\n      toast({\n        title: \"Coupon Deleted\",\n        description: \"The coupon has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete coupon.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <Card className=\"bg-zinc-900 border-yellow-500/20\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bebas text-yellow-400 mb-4\">ACCESS DENIED</h2>\n            <p className=\"text-zinc-400\">Administrator access required</p>\n            <Button\n              onClick={() => navigate(\"/\")}\n              className=\"mt-4\"\n              data-testid=\"button-home\"\n            >\n              Return Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleEdit = (coupon: Coupon) => {\n    setEditingCoupon(coupon);\n    form.reset({\n      code: coupon.code,\n      discountType: coupon.discountType,\n      discountValue: parseFloat(coupon.discountValue),\n      isActive: coupon.isActive,\n      expiresAt: coupon.expiresAt\n        ? new Date(coupon.expiresAt).toISOString().slice(0, 16)\n        : undefined,\n      usageLimit: coupon.usageLimit || undefined,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingCoupon(null);\n    form.reset();\n  };\n\n  const onSubmit = (data: CouponFormData) => {\n    if (editingCoupon) {\n      updateMutation.mutate({ id: editingCoupon.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isExpired = (expiresAt: string | null) => {\n    if (!expiresAt) return false;\n    return new Date(expiresAt) < new Date();\n  };\n\n  const isLimitReached = (coupon: Coupon) => {\n    if (!coupon.usageLimit) return false;\n    return coupon.usageCount >= coupon.usageLimit;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Header />\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8 mt-20\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-5xl font-bebas text-yellow-400 mb-2\">\n              COUPON MANAGEMENT\n            </h1>\n            <p className=\"text-zinc-400\">Create and manage discount coupons</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                className=\"bg-yellow-400 text-black hover:bg-yellow-500\"\n                data-testid=\"button-create-coupon\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Coupon\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-zinc-900 border-yellow-500/20 text-white\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl font-bebas text-yellow-400\">\n                  {editingCoupon ? \"EDIT COUPON\" : \"CREATE COUPON\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"code\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Coupon Code</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            className=\"bg-black border-zinc-700 uppercase\"\n                            placeholder=\"e.g., WELCOME10\"\n                            maxLength={50}\n                            onChange={(e) =>\n                              field.onChange(e.target.value.toUpperCase())\n                            }\n                            data-testid=\"input-code\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"discountType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Discount Type</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          defaultValue={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger\n                              className=\"bg-black border-zinc-700\"\n                              data-testid=\"select-type\"\n                            >\n                              <SelectValue placeholder=\"Select type\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"percentage\">Percentage (%)</SelectItem>\n                            <SelectItem value=\"fixed\">Fixed Amount (RM)</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"discountValue\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Discount Value</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"number\"\n                            step=\"0.01\"\n                            className=\"bg-black border-zinc-700\"\n                            placeholder=\"e.g., 10\"\n                            data-testid=\"input-value\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"expiresAt\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Expiry Date (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"datetime-local\"\n                            className=\"bg-black border-zinc-700\"\n                            data-testid=\"input-expiry\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"usageLimit\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Usage Limit (Optional)</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"number\"\n                            className=\"bg-black border-zinc-700\"\n                            placeholder=\"e.g., 100\"\n                            data-testid=\"input-limit\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center gap-2\">\n                        <FormControl>\n                          <input\n                            type=\"checkbox\"\n                            checked={field.value}\n                            onChange={field.onChange}\n                            className=\"w-4 h-4\"\n                            data-testid=\"input-active\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"mb-0\">Active</FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex gap-2 pt-4\">\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1 bg-yellow-400 text-black hover:bg-yellow-500\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      data-testid=\"button-submit-coupon\"\n                    >\n                      {createMutation.isPending || updateMutation.isPending\n                        ? \"Saving...\"\n                        : editingCoupon\n                        ? \"Update\"\n                        : \"Create\"}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleCloseDialog}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card className=\"bg-zinc-900 border-yellow-500/20\">\n          <CardContent className=\"p-6\">\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400\" />\n              </div>\n            ) : coupons && coupons.length > 0 ? (\n              <div className=\"space-y-4\">\n                {coupons.map((coupon) => {\n                  const expired = isExpired(coupon.expiresAt);\n                  const limitReached = isLimitReached(coupon);\n                  const inactive = !coupon.isActive;\n                  const disabled = expired || limitReached || inactive;\n\n                  return (\n                    <Card\n                      key={coupon.id}\n                      className=\"bg-black border-zinc-800 hover-elevate\"\n                    >\n                      <CardContent className=\"p-6\">\n                        <div className=\"flex flex-col lg:flex-row gap-4 lg:items-center lg:justify-between\">\n                          <div className=\"space-y-2 flex-1\">\n                            <div className=\"flex items-center gap-2 flex-wrap\">\n                              <h3 className=\"text-2xl font-mono font-bold text-yellow-400\">\n                                {coupon.code}\n                              </h3>\n                              {coupon.isActive && !expired && !limitReached && (\n                                <Badge className=\"bg-green-500/20 text-green-400 border-green-500/50\">\n                                  ACTIVE\n                                </Badge>\n                              )}\n                              {inactive && (\n                                <Badge className=\"bg-zinc-500/20 text-zinc-400 border-zinc-500/50\">\n                                  INACTIVE\n                                </Badge>\n                              )}\n                              {expired && (\n                                <Badge className=\"bg-red-500/20 text-red-400 border-red-500/50\">\n                                  EXPIRED\n                                </Badge>\n                              )}\n                              {limitReached && (\n                                <Badge className=\"bg-red-500/20 text-red-400 border-red-500/50\">\n                                  LIMIT REACHED\n                                </Badge>\n                              )}\n                            </div>\n                            <div className=\"space-y-1 text-sm text-zinc-400\">\n                              <p>\n                                Discount:{\" \"}\n                                <span className=\"text-white font-semibold\">\n                                  {coupon.discountType === \"percentage\"\n                                    ? `${coupon.discountValue}%`\n                                    : `RM ${coupon.discountValue}`}\n                                </span>\n                              </p>\n                              {coupon.expiresAt && (\n                                <p>\n                                  Expires:{\" \"}\n                                  <span className=\"text-white\">\n                                    {new Date(coupon.expiresAt).toLocaleString()}\n                                  </span>\n                                </p>\n                              )}\n                              {coupon.usageLimit && (\n                                <p>\n                                  Usage:{\" \"}\n                                  <span className=\"text-white\">\n                                    {coupon.usageCount} / {coupon.usageLimit}\n                                  </span>\n                                </p>\n                              )}\n                              {!coupon.usageLimit && coupon.usageCount > 0 && (\n                                <p>\n                                  Used:{\" \"}\n                                  <span className=\"text-white\">\n                                    {coupon.usageCount} times\n                                  </span>\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\n                              onClick={() => handleEdit(coupon)}\n                              data-testid={`button-edit-${coupon.id}`}\n                            >\n                              <Edit className=\"w-4 h-4 mr-1\" />\n                              Edit\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                              onClick={() => {\n                                if (\n                                  confirm(\n                                    \"Are you sure you want to delete this coupon?\"\n                                  )\n                                ) {\n                                  deleteMutation.mutate(coupon.id);\n                                }\n                              }}\n                              data-testid={`button-delete-${coupon.id}`}\n                            >\n                              <Trash2 className=\"w-4 h-4 mr-1\" />\n                              Delete\n                            </Button>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Ticket className=\"w-16 h-16 text-zinc-700 mx-auto mb-4\" />\n                <p className=\"text-zinc-400\">No coupons found</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":19880},"client/src/pages/AdminLogin.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/lib/auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Shield } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\ntype LoginFormData = z.infer<typeof loginSchema>;\n\nexport default function AdminLogin() {\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const { user, refreshUser } = useAuth();\n\n  const form = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginFormData) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/login\", data);\n      return res.json();\n    },\n    onSuccess: async () => {\n      await refreshUser();\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome back, admin!\",\n      });\n      navigate(\"/admin/orders\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (user?.isAdmin) {\n    navigate(\"/admin/orders\");\n    return null;\n  }\n\n  const onSubmit = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md bg-zinc-900 border-yellow-500/20\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"w-16 h-16 rounded-full bg-yellow-400/10 flex items-center justify-center\">\n              <Shield className=\"w-8 h-8 text-yellow-400\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-3xl font-bebas text-yellow-400\">\n            ADMIN LOGIN\n          </CardTitle>\n          <p className=\"text-zinc-400 text-sm\">\n            Administrator access only\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        className=\"bg-black border-zinc-700\"\n                        placeholder=\"Enter your username\"\n                        autoComplete=\"username\"\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"password\"\n                        className=\"bg-black border-zinc-700\"\n                        placeholder=\"Enter your password\"\n                        autoComplete=\"current-password\"\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-yellow-400 text-black hover:bg-yellow-500 font-bold\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-login\"\n              >\n                {loginMutation.isPending ? \"Logging in...\" : \"LOGIN\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <Button\n              variant=\"ghost\"\n              onClick={() => navigate(\"/\")}\n              className=\"text-zinc-400 hover:text-white\"\n              data-testid=\"button-back-home\"\n            >\n              ← Back to Home\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5060},"client/src/pages/AdminOrders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Search, Package, DollarSign, Users, CheckCircle } from \"lucide-react\";\n\ntype OrderStatus = \"created\" | \"paid\" | \"fulfilled\" | \"failed\";\n\ninterface Order {\n  id: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  totalAmount: string;\n  currency: string;\n  status: OrderStatus;\n  paymentMethod: string;\n  createdAt: string;\n  orderItems: Array<{\n    packageName: string;\n    quantity: number;\n    price: string;\n  }>;\n  redemptionCodes: Array<{\n    code: string;\n  }>;\n}\n\nexport default function AdminOrders() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: orders, isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/admin/orders\"],\n    enabled: !!user?.isAdmin,\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: OrderStatus }) => {\n      return apiRequest(\"PATCH\", `/api/admin/orders/${orderId}/status`, { status });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/orders\"] });\n      toast({\n        title: \"Status Updated\",\n        description: \"Order status has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <Card className=\"bg-zinc-900 border-yellow-500/20\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bebas text-yellow-400 mb-4\">ACCESS DENIED</h2>\n            <p className=\"text-zinc-400\">Administrator access required</p>\n            <Button\n              onClick={() => navigate(\"/\")}\n              className=\"mt-4\"\n              data-testid=\"button-home\"\n            >\n              Return Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const filteredOrders = orders?.filter((order) => {\n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    const matchesSearch =\n      (order.userEmail?.toLowerCase() || \"\").includes(searchTerm.toLowerCase()) ||\n      (order.userName?.toLowerCase() || \"\").includes(searchTerm.toLowerCase()) ||\n      (order.id?.toLowerCase() || \"\").includes(searchTerm.toLowerCase());\n    return matchesStatus && matchesSearch;\n  });\n\n  const stats = {\n    total: orders?.length || 0,\n    paid: orders?.filter((o) => o.status === \"paid\" || o.status === \"fulfilled\").length || 0,\n    revenue: orders\n      ?.filter((o) => o.status === \"paid\" || o.status === \"fulfilled\")\n      .reduce((sum, o) => sum + parseFloat(o.totalAmount), 0)\n      .toFixed(2) || \"0.00\",\n  };\n\n  const getStatusColor = (status: OrderStatus) => {\n    switch (status) {\n      case \"fulfilled\":\n        return \"bg-green-500/20 text-green-400 border-green-500/50\";\n      case \"paid\":\n        return \"bg-blue-500/20 text-blue-400 border-blue-500/50\";\n      case \"created\":\n        return \"bg-yellow-500/20 text-yellow-400 border-yellow-500/50\";\n      case \"failed\":\n        return \"bg-red-500/20 text-red-400 border-red-500/50\";\n      default:\n        return \"bg-zinc-500/20 text-zinc-400 border-zinc-500/50\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Header />\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8 mt-20\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-5xl font-bebas text-yellow-400 mb-2\">\n            ADMIN DASHBOARD\n          </h1>\n          <p className=\"text-zinc-400\">Manage orders, packages, and coupons</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n          <Card className=\"bg-zinc-900 border-yellow-500/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-zinc-400 text-sm\">Total Orders</p>\n                  <p className=\"text-3xl font-bold text-yellow-400\">{stats.total}</p>\n                </div>\n                <Package className=\"w-8 h-8 text-yellow-400/50\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-zinc-900 border-yellow-500/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-zinc-400 text-sm\">Paid Orders</p>\n                  <p className=\"text-3xl font-bold text-green-400\">{stats.paid}</p>\n                </div>\n                <CheckCircle className=\"w-8 h-8 text-green-400/50\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-zinc-900 border-yellow-500/20\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-zinc-400 text-sm\">Total Revenue</p>\n                  <p className=\"text-3xl font-bold text-yellow-400\">RM{stats.revenue}</p>\n                </div>\n                <DollarSign className=\"w-8 h-8 text-yellow-400/50\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card className=\"bg-zinc-900 border-yellow-500/20 mb-4\">\n          <CardHeader>\n            <CardTitle className=\"text-2xl font-bebas text-yellow-400\">\n              ORDER MANAGEMENT\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search by email, name, or order ID...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10 bg-black border-zinc-700\"\n                  data-testid=\"input-search\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full md:w-[200px] bg-black border-zinc-700\" data-testid=\"select-status\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Orders</SelectItem>\n                  <SelectItem value=\"created\">Created</SelectItem>\n                  <SelectItem value=\"paid\">Paid</SelectItem>\n                  <SelectItem value=\"fulfilled\">Fulfilled</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400\" />\n              </div>\n            ) : filteredOrders && filteredOrders.length > 0 ? (\n              <div className=\"space-y-4\">\n                {filteredOrders.map((order) => (\n                  <Card\n                    key={order.id}\n                    className=\"bg-black border-zinc-800 hover-elevate\"\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex flex-col lg:flex-row gap-4 lg:items-center lg:justify-between\">\n                        <div className=\"space-y-2 flex-1\">\n                          <div className=\"flex items-center gap-2 flex-wrap\">\n                            <Badge className={getStatusColor(order.status)}>\n                              {order.status.toUpperCase()}\n                            </Badge>\n                            <Badge variant=\"outline\" className=\"border-yellow-500/50 text-yellow-400\">\n                              {order.paymentMethod}\n                            </Badge>\n                          </div>\n                          <p className=\"text-sm text-zinc-400\" data-testid={`text-order-id-${order.id}`}>\n                            Order ID: {order.id}\n                          </p>\n                          <div className=\"flex items-center gap-2 text-sm\">\n                            <Users className=\"w-4 h-4 text-zinc-400\" />\n                            <span className=\"text-white\">{order.userName}</span>\n                            <span className=\"text-zinc-600\">•</span>\n                            <span className=\"text-zinc-400\">{order.userEmail}</span>\n                          </div>\n                          <div className=\"text-sm text-zinc-400\">\n                            {new Date(order.createdAt).toLocaleString()}\n                          </div>\n                          <div className=\"space-y-1\">\n                            {order.orderItems?.map((item, idx) => (\n                              <p key={idx} className=\"text-sm text-zinc-300\">\n                                {item.quantity}x {item.packageName} - {order.currency}{\" \"}\n                                {item.price}\n                              </p>\n                            ))}\n                          </div>\n                          {order.redemptionCodes && order.redemptionCodes.length > 0 && (\n                            <details className=\"text-sm\">\n                              <summary className=\"cursor-pointer text-yellow-400 hover:text-yellow-300\">\n                                View Codes ({order.redemptionCodes.length})\n                              </summary>\n                              <div className=\"mt-2 space-y-1 pl-4\">\n                                {order.redemptionCodes.map((code, idx) => (\n                                  <p key={idx} className=\"font-mono text-zinc-300\">\n                                    {code.code}\n                                  </p>\n                                ))}\n                              </div>\n                            </details>\n                          )}\n                        </div>\n                        <div className=\"flex flex-col items-end gap-2\">\n                          <p className=\"text-2xl font-bold text-yellow-400\">\n                            {order.currency} {order.totalAmount}\n                          </p>\n                          <Select\n                            value={order.status}\n                            onValueChange={(value) =>\n                              updateStatusMutation.mutate({\n                                orderId: order.id,\n                                status: value as OrderStatus,\n                              })\n                            }\n                          >\n                            <SelectTrigger\n                              className=\"w-[150px] bg-zinc-800 border-zinc-700\"\n                              data-testid={`select-status-${order.id}`}\n                            >\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"created\">Created</SelectItem>\n                              <SelectItem value=\"paid\">Paid</SelectItem>\n                              <SelectItem value=\"fulfilled\">Fulfilled</SelectItem>\n                              <SelectItem value=\"failed\">Failed</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Package className=\"w-16 h-16 text-zinc-700 mx-auto mb-4\" />\n                <p className=\"text-zinc-400\">No orders found</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12920},"client/src/pages/AdminPackages.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Plus, Edit, Trash2, Package } from \"lucide-react\";\n\ninterface Package {\n  id: string;\n  name: string;\n  aecoinAmount: number;\n  priceRM: string;\n  description: string;\n  isPopular: boolean;\n}\n\nconst packageSchema = z.object({\n  name: z.string().min(1, \"Name is required\"),\n  aecoinAmount: z.coerce.number().min(1, \"Amount must be at least 1\"),\n  priceRM: z.coerce.number().min(1, \"Price must be at least RM1\"),\n  description: z.string().min(1, \"Description is required\"),\n  isPopular: z.boolean(),\n});\n\ntype PackageFormData = z.infer<typeof packageSchema>;\n\nexport default function AdminPackages() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingPackage, setEditingPackage] = useState<Package | null>(null);\n\n  const { data: packages, isLoading } = useQuery<Package[]>({\n    queryKey: [\"/api/packages\"],\n  });\n\n  const form = useForm<PackageFormData>({\n    resolver: zodResolver(packageSchema),\n    defaultValues: {\n      name: \"\",\n      aecoinAmount: 0,\n      priceRM: 0,\n      description: \"\",\n      isPopular: false,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: PackageFormData) => {\n      return apiRequest(\"POST\", \"/api/admin/packages\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      toast({\n        title: \"Package Created\",\n        description: \"The package has been created successfully.\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create package.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: PackageFormData }) => {\n      return apiRequest(\"PATCH\", `/api/admin/packages/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      toast({\n        title: \"Package Updated\",\n        description: \"The package has been updated successfully.\",\n      });\n      setIsDialogOpen(false);\n      setEditingPackage(null);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update package.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/admin/packages/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/packages\"] });\n      toast({\n        title: \"Package Deleted\",\n        description: \"The package has been deleted successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete package.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user?.isAdmin) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <Card className=\"bg-zinc-900 border-yellow-500/20\">\n          <CardContent className=\"p-8 text-center\">\n            <h2 className=\"text-2xl font-bebas text-yellow-400 mb-4\">ACCESS DENIED</h2>\n            <p className=\"text-zinc-400\">Administrator access required</p>\n            <Button\n              onClick={() => navigate(\"/\")}\n              className=\"mt-4\"\n              data-testid=\"button-home\"\n            >\n              Return Home\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const handleEdit = (pkg: Package) => {\n    setEditingPackage(pkg);\n    form.reset({\n      name: pkg.name,\n      aecoinAmount: pkg.aecoinAmount,\n      priceRM: parseFloat(pkg.priceRM),\n      description: pkg.description,\n      isPopular: pkg.isPopular,\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleCloseDialog = () => {\n    setIsDialogOpen(false);\n    setEditingPackage(null);\n    form.reset();\n  };\n\n  const onSubmit = (data: PackageFormData) => {\n    if (editingPackage) {\n      updateMutation.mutate({ id: editingPackage.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-white\">\n      <Header />\n\n      <main className=\"max-w-7xl mx-auto px-4 py-8 mt-20\">\n        <div className=\"mb-8 flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-5xl font-bebas text-yellow-400 mb-2\">\n              PACKAGE MANAGEMENT\n            </h1>\n            <p className=\"text-zinc-400\">Create and manage AECOIN packages</p>\n          </div>\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                className=\"bg-yellow-400 text-black hover:bg-yellow-500\"\n                data-testid=\"button-create-package\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Create Package\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"bg-zinc-900 border-yellow-500/20 text-white\">\n              <DialogHeader>\n                <DialogTitle className=\"text-2xl font-bebas text-yellow-400\">\n                  {editingPackage ? \"EDIT PACKAGE\" : \"CREATE PACKAGE\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Package Name</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            className=\"bg-black border-zinc-700\"\n                            placeholder=\"e.g., Starter Pack\"\n                            data-testid=\"input-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"aecoinAmount\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>AECOIN Amount</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"number\"\n                            className=\"bg-black border-zinc-700\"\n                            placeholder=\"e.g., 500\"\n                            data-testid=\"input-aecoin\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"priceRM\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price (RM)</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            type=\"number\"\n                            step=\"0.01\"\n                            className=\"bg-black border-zinc-700\"\n                            placeholder=\"e.g., 50.00\"\n                            data-testid=\"input-price\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            {...field}\n                            className=\"bg-black border-zinc-700\"\n                            placeholder=\"Package description...\"\n                            rows={3}\n                            data-testid=\"input-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isPopular\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center gap-2\">\n                        <FormControl>\n                          <input\n                            type=\"checkbox\"\n                            checked={field.value}\n                            onChange={field.onChange}\n                            className=\"w-4 h-4\"\n                            data-testid=\"input-popular\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"mb-0\">Mark as Popular</FormLabel>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <div className=\"flex gap-2 pt-4\">\n                    <Button\n                      type=\"submit\"\n                      className=\"flex-1 bg-yellow-400 text-black hover:bg-yellow-500\"\n                      disabled={createMutation.isPending || updateMutation.isPending}\n                      data-testid=\"button-submit-package\"\n                    >\n                      {createMutation.isPending || updateMutation.isPending\n                        ? \"Saving...\"\n                        : editingPackage\n                        ? \"Update\"\n                        : \"Create\"}\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={handleCloseDialog}\n                      data-testid=\"button-cancel\"\n                    >\n                      Cancel\n                    </Button>\n                  </div>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        <Card className=\"bg-zinc-900 border-yellow-500/20\">\n          <CardContent className=\"p-6\">\n            {isLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400\" />\n              </div>\n            ) : packages && packages.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {packages.map((pkg) => (\n                  <Card\n                    key={pkg.id}\n                    className=\"bg-black border-zinc-800 hover-elevate\"\n                  >\n                    <CardContent className=\"p-6\">\n                      <div className=\"space-y-4\">\n                        <div className=\"flex items-start justify-between\">\n                          <div>\n                            <h3 className=\"text-xl font-bebas text-yellow-400\">\n                              {pkg.name}\n                            </h3>\n                            {pkg.isPopular && (\n                              <Badge className=\"bg-yellow-500/20 text-yellow-400 border-yellow-500/50 mt-1\">\n                                POPULAR\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <p className=\"text-3xl font-bold text-white\">\n                            {pkg.aecoinAmount.toLocaleString()}\n                            <span className=\"text-sm text-yellow-400 ml-1\">AECOIN</span>\n                          </p>\n                          <p className=\"text-2xl font-bold text-yellow-400\">\n                            RM {pkg.priceRM}\n                          </p>\n                        </div>\n                        <p className=\"text-sm text-zinc-400\">{pkg.description}</p>\n                        <div className=\"flex gap-2 pt-2\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\n                            onClick={() => handleEdit(pkg)}\n                            data-testid={`button-edit-${pkg.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            Edit\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            className=\"flex-1 border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                            onClick={() => {\n                              if (\n                                confirm(\n                                  \"Are you sure you want to delete this package?\"\n                                )\n                              ) {\n                                deleteMutation.mutate(pkg.id);\n                              }\n                            }}\n                            data-testid={`button-delete-${pkg.id}`}\n                          >\n                            <Trash2 className=\"w-4 h-4 mr-1\" />\n                            Delete\n                          </Button>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-12\">\n                <Package className=\"w-16 h-16 text-zinc-700 mx-auto mb-4\" />\n                <p className=\"text-zinc-400\">No packages found</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":15247},"client/src/pages/Checkout.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Wallet, Tag, Loader2, CreditCard } from \"lucide-react\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { CartItem, Package, Coupon } from \"@shared/schema\";\n\ninterface CartItemWithPackage extends CartItem {\n  package: Package;\n}\n\nexport default function Checkout() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  \n  const [couponCode, setCouponCode] = useState(\"\");\n  const [appliedCoupon, setAppliedCoupon] = useState<Coupon | null>(null);\n  const [paymentMethod, setPaymentMethod] = useState<\"toyyibpay\" | \"billplz\">(\"toyyibpay\");\n  \n  // Billing information\n  const [billingInfo, setBillingInfo] = useState({\n    fullName: \"\",\n    email: user?.email || \"\",\n    phoneNumber: \"\",\n  });\n  \n  // Pre-fill email when user data loads\n  useEffect(() => {\n    if (user?.email && !billingInfo.email) {\n      setBillingInfo(prev => ({ ...prev, email: user.email }));\n    }\n  }, [user]);\n\n  // Check for error query parameter and redirect BEFORE anything else\n  const params = new URLSearchParams(window.location.search);\n  const error = params.get('error');\n  \n  if (error === 'payment_failed') {\n    navigate('/payment/failed');\n    return null;\n  } else if (error === 'payment_cancelled') {\n    navigate('/payment/cancelled');\n    return null;\n  }\n\n  // Fetch cart items (only if user is authenticated)\n  const { data: cartItems = [], isLoading } = useQuery<CartItemWithPackage[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: !!user,\n  });\n\n  // Validate coupon mutation\n  const validateCoupon = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"GET\", `/api/coupons/${code}?subtotal=${subtotal}`);\n      return await response.json();\n    },\n    onSuccess: (data: Coupon) => {\n      // Check minimum purchase on frontend as well\n      if (data.minPurchase && parseFloat(data.minPurchase) > subtotal) {\n        toast({\n          title: \"Coupon Not Applicable\",\n          description: `Minimum purchase of RM${data.minPurchase} required.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setAppliedCoupon(data);\n      const discountText = data.discountType === 'percentage' \n        ? `${data.discountValue}% discount` \n        : `RM${data.discountValue} discount`;\n      toast({\n        title: \"Coupon Applied!\",\n        description: `${discountText} applied successfully.`,\n      });\n    },\n    onError: (error: any) => {\n      const message = error.message || \"The coupon code you entered is invalid or expired.\";\n      toast({\n        title: \"Invalid Coupon\",\n        description: message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Calculate totals\n  const subtotal = cartItems.reduce((sum, item) => {\n    return sum + parseFloat(item.package.price) * item.quantity;\n  }, 0);\n\n  const discountAmount = appliedCoupon \n    ? appliedCoupon.discountType === 'percentage'\n      ? (subtotal * parseFloat(appliedCoupon.discountValue)) / 100\n      : parseFloat(appliedCoupon.discountValue)\n    : 0;\n\n  const total = Math.max(0, subtotal - discountAmount);\n\n  const handleApplyCoupon = () => {\n    if (couponCode.trim()) {\n      validateCoupon.mutate(couponCode.trim().toUpperCase());\n    }\n  };\n\n  const handleRemoveCoupon = () => {\n    setAppliedCoupon(null);\n    setCouponCode(\"\");\n  };\n\n\n  const handlePaymentSuccess = () => {\n    // Clear cart and redirect to orders page\n    queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    navigate(\"/orders\");\n  };\n\n  const [isProcessingToyyibPay, setIsProcessingToyyibPay] = useState(false);\n  const [isProcessingBillplz, setIsProcessingBillplz] = useState(false);\n\n  const handleCheckout = async () => {\n    if (cartItems.length === 0) {\n      toast({\n        title: \"Cart is Empty\",\n        description: \"Please add items to your cart before checkout.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate billing information\n    if (!billingInfo.fullName.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter your full name.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!billingInfo.email.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter your email address.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (paymentMethod === \"toyyibpay\") {\n      setIsProcessingToyyibPay(true);\n      \n      console.log(\"ToyyibPay: Sending billing info:\", billingInfo);\n      \n      try {\n        const response = await apiRequest(\"POST\", \"/api/create-toyyibpay-bill\", {\n          couponCode: appliedCoupon?.code || \"\",\n          billingInfo,\n        });\n        \n        const data = await response.json();\n        \n        if (data.paymentUrl) {\n          window.location.href = data.paymentUrl;\n        } else {\n          toast({\n            title: \"Error\",\n            description: \"Failed to create payment. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error: any) {\n        toast({\n          title: \"Payment Error\",\n          description: error.message || \"Failed to initialize ToyyibPay payment.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsProcessingToyyibPay(false);\n      }\n    } else if (paymentMethod === \"billplz\") {\n      setIsProcessingBillplz(true);\n      \n      console.log(\"Billplz: Sending billing info:\", billingInfo);\n      \n      try {\n        const response = await apiRequest(\"POST\", \"/api/create-billplz-bill\", {\n          couponCode: appliedCoupon?.code || \"\",\n          billingInfo,\n        });\n        \n        const data = await response.json();\n        \n        if (data.paymentUrl) {\n          window.location.href = data.paymentUrl;\n        } else {\n          toast({\n            title: \"Error\",\n            description: \"Failed to create payment. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error: any) {\n        toast({\n          title: \"Payment Error\",\n          description: error.message || \"Failed to initialize Billplz payment.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsProcessingBillplz(false);\n      }\n    }\n  };\n\n  if (!user) {\n    navigate(\"/\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#000000] flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 text-neon-yellow animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#000000] pb-12\">\n      {/* Header */}\n      <div className=\"bg-[#000000] border-b border-white/10 py-6\">\n        <div className=\"container mx-auto px-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/\")}\n            className=\"text-white hover:text-neon-yellow mb-4\"\n            data-testid=\"button-back-to-shop\"\n          >\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\n            Back to Shop\n          </Button>\n          <h1 className=\"text-4xl font-bebas text-white uppercase tracking-wider\">\n            Checkout\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"container mx-auto px-4 mt-8\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Left Column - Payment Details */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Billing Information */}\n            <Card className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-white/10 rounded-3xl\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bebas text-white uppercase tracking-wider\">\n                  Billing Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-rajdhani font-semibold text-white mb-2\">\n                    Full Name *\n                  </label>\n                  <Input\n                    type=\"text\"\n                    value={billingInfo.fullName}\n                    onChange={(e) => setBillingInfo(prev => ({ ...prev, fullName: e.target.value }))}\n                    placeholder=\"Enter your full name\"\n                    className=\"bg-[#000000]/50 border-white/20 text-white placeholder:text-gray-500\"\n                    required\n                    data-testid=\"input-billing-name\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-rajdhani font-semibold text-white mb-2\">\n                    Email Address *\n                  </label>\n                  <Input\n                    type=\"email\"\n                    value={billingInfo.email}\n                    onChange={(e) => setBillingInfo(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"your@email.com\"\n                    className=\"bg-[#000000]/50 border-white/20 text-white placeholder:text-gray-500\"\n                    required\n                    data-testid=\"input-billing-email\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-rajdhani font-semibold text-white mb-2\">\n                    Phone Number (Optional)\n                  </label>\n                  <Input\n                    type=\"tel\"\n                    value={billingInfo.phoneNumber}\n                    onChange={(e) => setBillingInfo(prev => ({ ...prev, phoneNumber: e.target.value }))}\n                    placeholder=\"+60123456789\"\n                    className=\"bg-[#000000]/50 border-white/20 text-white placeholder:text-gray-500\"\n                    data-testid=\"input-billing-phone\"\n                  />\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    Malaysian format: +60123456789\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Method */}\n            <Card className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-white/10 rounded-3xl\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bebas text-white uppercase tracking-wider\">\n                  Payment Method\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <button\n                    onClick={() => setPaymentMethod(\"toyyibpay\")}\n                    className={`p-6 rounded-2xl border-2 transition-all ${\n                      paymentMethod === \"toyyibpay\"\n                        ? \"border-neon-yellow bg-neon-yellow/10\"\n                        : \"border-white/10 hover:border-white/20\"\n                    }`}\n                    data-testid=\"button-payment-toyyibpay\"\n                  >\n                    <Wallet className=\"w-12 h-12 mx-auto mb-3 text-neon-yellow\" />\n                    <p className=\"font-rajdhani font-bold text-white text-center\">\n                      ToyyibPay\n                    </p>\n                    <p className=\"text-xs text-gray-400 text-center mt-1\">\n                      FPX, Online Banking\n                    </p>\n                  </button>\n\n                  <button\n                    onClick={() => setPaymentMethod(\"billplz\")}\n                    className={`p-6 rounded-2xl border-2 transition-all ${\n                      paymentMethod === \"billplz\"\n                        ? \"border-neon-yellow bg-neon-yellow/10\"\n                        : \"border-white/10 hover:border-white/20\"\n                    }`}\n                    data-testid=\"button-payment-billplz\"\n                  >\n                    <Wallet className=\"w-12 h-12 mx-auto mb-3 text-neon-yellow\" />\n                    <p className=\"font-rajdhani font-bold text-white text-center\">\n                      Billplz\n                    </p>\n                    <p className=\"text-xs text-gray-400 text-center mt-1\">\n                      FPX, Cards, E-Wallets\n                    </p>\n                  </button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Form */}\n            <Card className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-neon-yellow/30 rounded-3xl\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bebas text-white uppercase tracking-wider\">\n                  Payment Details\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {paymentMethod === \"toyyibpay\" ? (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-400 text-sm text-center py-8\">\n                      You will be redirected to ToyyibPay to complete your payment\n                    </p>\n                    <Button\n                      onClick={handleCheckout}\n                      disabled={cartItems.length === 0 || isProcessingToyyibPay}\n                      className=\"w-full bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold uppercase text-base h-12 rounded-full font-rajdhani tracking-wide\"\n                      data-testid=\"button-place-order\"\n                    >\n                      {isProcessingToyyibPay ? (\n                        <>\n                          <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                          Redirecting...\n                        </>\n                      ) : (\n                        <>\n                          <Wallet className=\"w-5 h-5 mr-2\" />\n                          Continue to ToyyibPay\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-gray-400 text-sm text-center py-8\">\n                      You will be redirected to Billplz to complete your payment\n                    </p>\n                    <Button\n                      onClick={handleCheckout}\n                      disabled={cartItems.length === 0 || isProcessingBillplz}\n                      className=\"w-full bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold uppercase text-base h-12 rounded-full font-rajdhani tracking-wide\"\n                      data-testid=\"button-place-order-billplz\"\n                    >\n                      {isProcessingBillplz ? (\n                        <>\n                          <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\n                          Redirecting...\n                        </>\n                      ) : (\n                        <>\n                          <CreditCard className=\"w-5 h-5 mr-2\" />\n                          Continue to Billplz\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                )}\n\n                <p className=\"text-xs text-gray-400 text-center mt-6\">\n                  By completing this purchase, you agree to our terms and conditions.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Order Summary */}\n          <div className=\"lg:col-span-1\">\n            <Card className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-neon-yellow/30 rounded-3xl sticky top-4\">\n              <CardHeader>\n                <CardTitle className=\"text-2xl font-bebas text-white uppercase tracking-wider\">\n                  Order Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Cart Items */}\n                <div className=\"space-y-3\">\n                  {cartItems.map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"flex items-center gap-3 p-3 bg-[#000000]/50 rounded-xl border border-white/5\"\n                      data-testid={`checkout-item-${item.id}`}\n                    >\n                      <div className=\"flex-1\">\n                        <h3 className=\"font-rajdhani font-bold text-white text-sm\">\n                          {item.package.name}\n                        </h3>\n                        <p className=\"text-xs text-gray-400\">\n                          {item.package.aecoinAmount.toLocaleString()} AECOIN × {item.quantity}\n                        </p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-bold text-neon-yellow text-sm\">\n                          RM{(parseFloat(item.package.price) * item.quantity).toFixed(0)}\n                        </p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n\n                <Separator className=\"bg-white/10\" />\n\n                {/* Coupon Code */}\n                <div>\n                  <label className=\"block text-sm font-rajdhani font-semibold text-white mb-2\">\n                    <Tag className=\"w-4 h-4 inline mr-2\" />\n                    Coupon Code\n                  </label>\n                  {appliedCoupon ? (\n                    <div className=\"flex items-center gap-2 p-3 bg-green-500/10 border border-green-500/30 rounded-2xl\">\n                      <Badge className=\"bg-green-500 text-black font-bold\">\n                        {appliedCoupon.code}\n                      </Badge>\n                      <span className=\"text-sm text-green-400 flex-1\">\n                        {appliedCoupon.discountType === 'percentage' \n                          ? `${appliedCoupon.discountValue}% OFF` \n                          : `RM${appliedCoupon.discountValue} OFF`}\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={handleRemoveCoupon}\n                        className=\"text-red-400 hover:text-red-300 h-7\"\n                        data-testid=\"button-remove-coupon\"\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  ) : (\n                    <div className=\"flex gap-2\">\n                      <Input\n                        value={couponCode}\n                        onChange={(e) => setCouponCode(e.target.value.toUpperCase())}\n                        placeholder=\"Enter code\"\n                        className=\"bg-[#000000] border-white/10 text-white rounded-xl\"\n                        data-testid=\"input-coupon-code\"\n                      />\n                      <Button\n                        onClick={handleApplyCoupon}\n                        disabled={!couponCode.trim() || validateCoupon.isPending}\n                        className=\"bg-white/10 hover:bg-white/20 text-white rounded-xl\"\n                        data-testid=\"button-apply-coupon\"\n                      >\n                        {validateCoupon.isPending ? (\n                          <Loader2 className=\"w-4 h-4 animate-spin\" />\n                        ) : (\n                          \"Apply\"\n                        )}\n                      </Button>\n                    </div>\n                  )}\n                </div>\n\n                <Separator className=\"bg-white/10\" />\n\n                {/* Price Breakdown */}\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between text-white\">\n                    <span className=\"font-rajdhani\">Subtotal:</span>\n                    <span data-testid=\"text-subtotal\">RM{subtotal.toFixed(0)}</span>\n                  </div>\n                  {appliedCoupon && (\n                    <div className=\"flex justify-between text-green-400\">\n                      <span className=\"font-rajdhani\">\n                        Discount{appliedCoupon.discountType === 'percentage' ? ` (${appliedCoupon.discountValue}%)` : ''}:\n                      </span>\n                      <span data-testid=\"text-discount\">-RM{discountAmount.toFixed(0)}</span>\n                    </div>\n                  )}\n                  <Separator className=\"bg-white/10\" />\n                  <div className=\"flex justify-between text-xl font-bold\">\n                    <span className=\"text-white font-rajdhani\">Total:</span>\n                    <span className=\"text-neon-yellow\" data-testid=\"text-total\">\n                      RM{total.toFixed(0)}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21244},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { ReferenceHero } from \"@/components/ReferenceHero\";\nimport { ScrollFadeIn } from \"@/components/ScrollFadeIn\";\nimport { BackToTop } from \"@/components/BackToTop\";\nimport { PackagesSection } from \"@/components/PackagesSection\";\nimport { GallerySection } from \"@/components/GallerySection\";\nimport { HowItWorksSection } from \"@/components/HowItWorksSection\";\nimport { FAQSection } from \"@/components/FAQSection\";\nimport { Footer } from \"@/components/Footer\";\nimport { CartDrawer } from \"@/components/CartDrawer\";\nimport { useAuth } from \"@/lib/auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Package as DBPackage } from \"@shared/schema\";\nimport type { Package } from \"@/components/PackageCard\";\nimport type { FAQItem } from \"@/components/FAQSection\";\n\nimport coinImage from \"@assets/stock_images/gold_coins_money_cas_b3778293.jpg\";\nimport cashImage1 from \"@assets/stock_images/money_cash_dollar_bi_d659bb42.jpg\";\nimport cashImage2 from \"@assets/stock_images/money_cash_dollar_bi_b379e39e.jpg\";\nimport goldImage1 from \"@assets/stock_images/treasure_gold_bars_v_9895e34c.jpg\";\nimport goldImage2 from \"@assets/stock_images/treasure_gold_bars_v_0d8d4f59.jpg\";\nimport gta1 from \"@assets/gta1_1759562666071.png\";\nimport gta2 from \"@assets/gta2_1759562666072.png\";\nimport gta3 from \"@assets/gta3_1759562666074.png\";\nimport gta4 from \"@assets/gta4_1759562666075.png\";\nimport gta5 from \"@assets/GTA-5-Characters-GTA-6_1759562666076.png\";\nimport gta6 from \"@assets/gta6_1759562666077.png\";\nimport gta7 from \"@assets/gta7_1759562666078.png\";\nimport gta8 from \"@assets/gta8_1759562666079.png\";\n\nconst galleryImages = [gta1, gta2, gta3, gta4, gta5, gta6, gta7, gta8];\n\n// Map images to packages\nconst packageImages = [\n  coinImage,\n  cashImage1,\n  cashImage2,\n  goldImage1,\n  goldImage2,\n];\n\nconst faqs: FAQItem[] = [\n  {\n    question: \"How fast will I receive my codes?\",\n    answer:\n      \"Instantly after payment confirmation. Your AECOIN code will be delivered to your email within seconds.\",\n  },\n  {\n    question: \"What payment methods do you accept?\",\n    answer: \"We accept ToyyibPay and Billplz for your convenience.\",\n  },\n  {\n    question: \"Can I get a refund?\",\n    answer:\n      \"Refunds are not available for digital codes. Please ensure you select the correct package before purchase.\",\n  },\n  {\n    question: \"How do I redeem codes?\",\n    answer:\n      \"Simply enter your code in the ae official donation menu to instantly add AECOIN to your account.\",\n  },\n];\n\nexport default function Home() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [cartOpen, setCartOpen] = useState(false);\n\n  // Fetch packages from API\n  const { data: dbPackages = [] } = useQuery<DBPackage[]>({\n    queryKey: [\"/api/packages\"],\n  });\n\n  // Fetch cart items to get count\n  const { data: cartItems = [] } = useQuery<any[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: !!user,\n  });\n\n  // Add to cart mutation with optimistic updates\n  const addToCart = useMutation({\n    mutationFn: async (packageId: string) => {\n      await apiRequest(\"POST\", \"/api/cart\", { packageId, quantity: 1 });\n    },\n    onMutate: async (packageId) => {\n      // Find the package first\n      const pkg = dbPackages.find((p) => p.id === packageId);\n\n      // If package not found, don't proceed with optimistic update\n      if (!pkg) {\n        return { previousCart: undefined };\n      }\n\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: [\"/api/cart\"] });\n\n      // Snapshot previous value\n      const previousCart = queryClient.getQueryData([\"/api/cart\"]);\n\n      // Optimistically update cart (add item for instant feedback)\n      queryClient.setQueryData([\"/api/cart\"], (old: any[] = []) => [\n        ...old,\n        {\n          id: `temp-${Date.now()}`,\n          packageId,\n          quantity: 1,\n          package: pkg,\n        },\n      ]);\n\n      // Show instant success toast\n      toast({\n        title: \"Added to Cart!\",\n        description: \"Package added to your cart successfully.\",\n      });\n\n      return { previousCart };\n    },\n    onError: (err: any, _packageId, context) => {\n      // Rollback on error\n      if (context?.previousCart) {\n        queryClient.setQueryData([\"/api/cart\"], context.previousCart);\n      }\n\n      // Show appropriate error message\n      const errorMessage =\n        err?.message || \"Failed to add item to cart. Please try again.\";\n      toast({\n        title: \"Failed to Add\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      // Always refetch to sync with server\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n  });\n\n  // Convert DB packages to display format\n  const packages: Package[] = dbPackages.map((pkg, index) => ({\n    id: pkg.id,\n    amount: pkg.aecoinAmount,\n    price: Math.round(parseFloat(pkg.price)),\n    originalPrice: pkg.originalPrice\n      ? Math.round(parseFloat(pkg.originalPrice))\n      : Math.round(parseFloat(pkg.price)),\n    image: pkg.imageUrl || packageImages[index % packageImages.length],\n    badge: pkg.featured ? \"FEATURED\" : undefined,\n  }));\n\n  const handleAddToCart = (pkg: Package) => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in with Discord to add items to cart.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    addToCart.mutate(pkg.id);\n  };\n\n  const handleCartClick = () => {\n    if (!user) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please log in to view your cart.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setCartOpen(true);\n  };\n\n  const handleCheckout = () => {\n    setCartOpen(false);\n    navigate(\"/checkout\");\n  };\n\n  const scrollToPackages = () => {\n    const element = document.getElementById(\"packages\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const scrollToGallery = () => {\n    const element = document.getElementById(\"gallery\");\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  const goToRankings = () => {\n    navigate(\"/rankings\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#000000]\">\n      <Header cartItemCount={cartItems.length} onCartClick={handleCartClick} />\n      <ReferenceHero\n        onShopClick={scrollToPackages}\n        onPackagesClick={scrollToPackages}\n        onRankingsClick={goToRankings}\n      />\n\n      <ScrollFadeIn delay={0.1}>\n        <PackagesSection packages={packages} onAddToCart={handleAddToCart} />\n      </ScrollFadeIn>\n\n      <ScrollFadeIn delay={0.1}>\n        <GallerySection images={galleryImages} onCtaClick={scrollToPackages} />\n      </ScrollFadeIn>\n\n      <ScrollFadeIn delay={0.1}>\n        <HowItWorksSection />\n      </ScrollFadeIn>\n\n      <ScrollFadeIn delay={0.1}>\n        <FAQSection faqs={faqs} />\n      </ScrollFadeIn>\n\n      <Footer />\n\n      <BackToTop />\n\n      <CartDrawer\n        open={cartOpen}\n        onClose={() => setCartOpen(false)}\n        onCheckout={handleCheckout}\n      />\n    </div>\n  );\n}\n","size_bytes":7390},"client/src/pages/Orders.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  ArrowLeft, \n  CheckCircle, \n  Package, \n  Loader2, \n  ChevronDown, \n  ChevronUp, \n  Copy,\n  Check,\n  Mail,\n  ShoppingBag,\n  User as UserIcon\n} from \"lucide-react\";\nimport { SiDiscord } from \"react-icons/si\";\nimport { useAuth } from \"@/lib/auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Order, RedemptionCode } from \"@shared/schema\";\n\nfunction OrderCard({ order }: { order: Order }) {\n  const [expanded, setExpanded] = useState(false);\n  const [copiedCode, setCopiedCode] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: codes = [], isLoading: loadingCodes } = useQuery<RedemptionCode[]>({\n    queryKey: [`/api/orders/${order.id}/codes`],\n    enabled: expanded,\n  });\n\n  const copyCode = async (code: string) => {\n    await navigator.clipboard.writeText(code);\n    setCopiedCode(code);\n    toast({\n      title: \"Copied!\",\n      description: \"Redemption code copied to clipboard.\",\n    });\n    setTimeout(() => setCopiedCode(null), 2000);\n  };\n\n  return (\n    <Card\n      className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-neon-yellow/30 rounded-3xl\"\n      data-testid={`card-order-${order.id}`}\n    >\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-xl font-bebas text-white uppercase\">\n            Order #{order.id.slice(0, 8)}\n          </CardTitle>\n          <Badge \n            className={`${\n              order.status === 'completed' || order.status === 'fulfilled'\n                ? 'bg-green-500' \n                : 'bg-yellow-500'\n            } text-black font-bold`}\n          >\n            {order.status}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"grid grid-cols-2 gap-3 text-sm\">\n          <div>\n            <span className=\"text-gray-400 font-rajdhani\">Total:</span>\n            <p className=\"text-neon-yellow font-rajdhani font-bold text-lg\">\n              RM{Math.round(parseFloat(order.finalAmount))}\n            </p>\n          </div>\n          <div>\n            <span className=\"text-gray-400 font-rajdhani\">Date:</span>\n            <p className=\"text-white font-rajdhani\">\n              {new Date(order.createdAt).toLocaleDateString()}\n            </p>\n          </div>\n        </div>\n\n        {(order.status === 'completed' || order.status === 'fulfilled') && (\n          <>\n            <Separator className=\"bg-white/10\" />\n            <Button\n              variant=\"ghost\"\n              onClick={() => setExpanded(!expanded)}\n              className=\"w-full justify-between text-white hover:text-neon-yellow\"\n              data-testid={`button-toggle-codes-${order.id}`}\n            >\n              <span className=\"font-rajdhani\">\n                {expanded ? 'Hide' : 'View'} Redemption Codes\n              </span>\n              {expanded ? <ChevronUp /> : <ChevronDown />}\n            </Button>\n\n            {expanded && (\n              <div className=\"space-y-3 pt-2\">\n                {loadingCodes ? (\n                  <div className=\"flex items-center justify-center py-4\">\n                    <Loader2 className=\"w-5 h-5 text-neon-yellow animate-spin\" />\n                  </div>\n                ) : codes.length > 0 ? (\n                  <>\n                    <div className=\"bg-black/20 border border-neon-yellow/30 rounded-xl p-3 mb-3\">\n                      <p className=\"text-xs text-gray-300 font-rajdhani flex items-center gap-2\">\n                        <CheckCircle className=\"w-4 h-4 text-neon-yellow\" />\n                        <span>Use these codes in GTA 5 to redeem your AECOIN</span>\n                      </p>\n                    </div>\n                    {codes.map((code, index) => (\n                      <div\n                        key={code.id}\n                        className=\"group relative bg-gradient-to-br from-black/40 to-black/20 border-2 border-neon-yellow/30 hover:border-neon-yellow/60 rounded-xl p-4 transition-all duration-200 hover:shadow-lg hover:shadow-neon-yellow/20\"\n                        data-testid={`code-${code.id}`}\n                      >\n                        <div className=\"flex items-center justify-between gap-3\">\n                          <div className=\"flex-1 min-w-0\">\n                            <div className=\"flex items-center gap-2 mb-2\">\n                              <Badge className=\"bg-neon-yellow/20 text-neon-yellow border border-neon-yellow/40 font-bebas text-sm\">\n                                {code.aecoinAmount.toLocaleString()} AECOIN\n                              </Badge>\n                              <span className=\"text-xs text-gray-500 font-rajdhani\">\n                                Code #{index + 1}\n                              </span>\n                            </div>\n                            <code className=\"text-neon-yellow font-mono text-base font-bold tracking-wider block break-all\">\n                              {code.code}\n                            </code>\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => copyCode(code.code)}\n                            className=\"h-10 px-3 text-white hover:text-neon-yellow hover:bg-neon-yellow/10 border border-transparent hover:border-neon-yellow/30 transition-all\"\n                            data-testid={`button-copy-${code.id}`}\n                          >\n                            {copiedCode === code.code ? (\n                              <>\n                                <Check className=\"w-4 h-4 mr-2\" />\n                                <span className=\"text-xs font-rajdhani\">Copied!</span>\n                              </>\n                            ) : (\n                              <>\n                                <Copy className=\"w-4 h-4 mr-2\" />\n                                <span className=\"text-xs font-rajdhani\">Copy</span>\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </>\n                ) : (\n                  <p className=\"text-gray-400 text-sm font-rajdhani text-center py-4\">\n                    No redemption codes available.\n                  </p>\n                )}\n              </div>\n            )}\n          </>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function Orders() {\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n\n  const { data: orders = [], isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: !!user,\n  });\n\n  if (!user) {\n    navigate(\"/\");\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-[#000000] flex items-center justify-center\">\n        <Loader2 className=\"w-8 h-8 text-neon-yellow animate-spin\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-[#000000]\">\n      {/* Header */}\n      <header className=\"border-b-4 border-neon-yellow bg-gradient-to-r from-[#000000] to-[#1a1a1a] sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4 flex items-center justify-between\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => navigate(\"/\")}\n            className=\"text-white hover:text-neon-yellow\"\n            data-testid=\"button-back-home\"\n          >\n            <ArrowLeft className=\"w-5 h-5 mr-2\" />\n            Back to Shop\n          </Button>\n          <h1 className=\"text-3xl font-bebas text-neon-yellow uppercase tracking-wider\">\n            Profile & Orders\n          </h1>\n          <div className=\"w-24\" />\n        </div>\n      </header>\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* User Profile Section */}\n        <Card className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-neon-yellow/30 rounded-3xl mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"flex flex-col md:flex-row items-center md:items-start gap-6\">\n              {/* Avatar */}\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-neon-yellow/20 blur-2xl rounded-full\"></div>\n                <Avatar className=\"w-24 h-24 ring-4 ring-neon-yellow/50 relative\">\n                  <AvatarImage src={user.avatar || undefined} alt={user.username} />\n                  <AvatarFallback className=\"bg-neon-yellow text-black font-bold text-3xl\">\n                    {user.username.charAt(0).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n\n              {/* User Info */}\n              <div className=\"flex-1 text-center md:text-left\">\n                <div className=\"flex items-center justify-center md:justify-start gap-2 mb-2\">\n                  <h2 className=\"text-3xl font-bebas text-white uppercase tracking-wider\">\n                    {user.username}\n                  </h2>\n                  <Badge className=\"bg-black text-neon-yellow border border-neon-yellow/50 font-rajdhani\">\n                    <SiDiscord className=\"w-3 h-3 mr-1\" />\n                    Discord\n                  </Badge>\n                </div>\n                \n                <div className=\"space-y-2 text-gray-300 font-rajdhani\">\n                  {user.email && (\n                    <div className=\"flex items-center justify-center md:justify-start gap-2\">\n                      <Mail className=\"w-4 h-4 text-neon-yellow\" />\n                      <span className=\"text-sm\">{user.email}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center justify-center md:justify-start gap-2\">\n                    <ShoppingBag className=\"w-4 h-4 text-neon-yellow\" />\n                    <span className=\"text-sm\">{orders.length} Total Order{orders.length !== 1 ? 's' : ''}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"flex gap-4 md:gap-6\">\n                <div className=\"text-center bg-black/30 rounded-2xl p-4 min-w-[100px]\">\n                  <p className=\"text-3xl font-bebas text-neon-yellow\">\n                    {orders.filter(o => o.status === 'fulfilled' || o.status === 'completed').length}\n                  </p>\n                  <p className=\"text-xs text-gray-400 font-rajdhani uppercase\">Completed</p>\n                </div>\n                <div className=\"text-center bg-black/30 rounded-2xl p-4 min-w-[100px]\">\n                  <p className=\"text-3xl font-bebas text-neon-yellow\">\n                    RM{orders.reduce((sum, o) => sum + parseFloat(o.finalAmount), 0).toFixed(0)}\n                  </p>\n                  <p className=\"text-xs text-gray-400 font-rajdhani uppercase\">Total Spent</p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders List */}\n        <div className=\"space-y-4\">\n          <h2 className=\"text-2xl font-bebas text-white uppercase tracking-wider mb-4\">\n            Order History\n          </h2>\n\n          {orders.length === 0 ? (\n            <Card className=\"bg-gradient-to-br from-[#1a1a1a] to-[#000000] border-2 border-white/10 rounded-3xl\">\n              <CardContent className=\"p-12 text-center\">\n                <Package className=\"w-16 h-16 text-gray-500 mx-auto mb-4\" />\n                <p className=\"text-gray-400 font-rajdhani text-lg\">\n                  No orders yet. Your order history will appear here.\n                </p>\n                <Button\n                  onClick={() => navigate(\"/\")}\n                  className=\"mt-6 bg-neon-yellow hover:bg-neon-yellow/90 text-black font-bold\"\n                  data-testid=\"button-shop-now\"\n                >\n                  Start Shopping\n                </Button>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid gap-4\">\n              {orders.map((order) => (\n                <OrderCard key={order.id} order={order} />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12660},"client/src/pages/PaymentCancelled.tsx":{"content":"import { Link } from \"wouter\";\nimport { XCircle, ArrowLeft, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PaymentCancelled() {\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full text-center space-y-6\">\n        <div className=\"flex justify-center\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gray-500/20 blur-2xl rounded-full\"></div>\n            <XCircle\n              className=\"w-16 h-16 text-gray-400 relative\"\n              data-testid=\"icon-cancelled\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <h1\n            className=\"text-3xl font-bold text-white\"\n            data-testid=\"text-title\"\n          >\n            Payment Cancelled\n          </h1>\n          <p className=\"text-gray-400 text-lg\" data-testid=\"text-description\">\n            You cancelled the payment process\n          </p>\n        </div>\n\n        <div className=\"bg-zinc-900 border border-gray-700 rounded-lg p-6 space-y-4\">\n          <p className=\"text-sm text-gray-400\">\n            No charges have been made to your account. Your cart items are still saved.\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <Button\n              asChild\n              variant=\"outline\"\n              className=\"flex-1\"\n              data-testid=\"button-back-home\"\n            >\n              <Link href=\"/\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Link>\n            </Button>\n            \n            <Button\n              asChild\n              className=\"flex-1 bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n              style={{ boxShadow: \"0 0 20px rgba(255, 215, 0, 0.3)\" }}\n              data-testid=\"button-try-again\"\n            >\n              <Link href=\"/checkout\">\n                <ShoppingCart className=\"w-4 h-4 mr-2\" />\n                Try Again\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"text-xs text-gray-600\">\n          Need help? Contact our support team 24/7\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2289},"client/src/pages/PaymentFailed.tsx":{"content":"import { Link } from \"wouter\";\nimport { AlertCircle, ArrowLeft, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PaymentFailed() {\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full text-center space-y-6\">\n        <div className=\"flex justify-center\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-red-500/20 blur-2xl rounded-full\"></div>\n            <AlertCircle\n              className=\"w-16 h-16 text-red-500 relative\"\n              data-testid=\"icon-failed\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <h1\n            className=\"text-3xl font-bold text-red-500\"\n            style={{ textShadow: \"0 0 20px rgba(239, 68, 68, 0.5)\" }}\n            data-testid=\"text-title\"\n          >\n            Payment Failed\n          </h1>\n          <p className=\"text-gray-400 text-lg\" data-testid=\"text-description\">\n            We couldn't process your payment\n          </p>\n        </div>\n\n        <div className=\"bg-zinc-900 border border-red-500/20 rounded-lg p-6 space-y-4\">\n          <div className=\"text-left space-y-2\">\n            <p className=\"text-sm font-semibold text-white\">\n              Common reasons for payment failure:\n            </p>\n            <ul className=\"text-sm text-gray-400 space-y-1 list-disc list-inside\">\n              <li>Insufficient funds</li>\n              <li>Card expired or blocked</li>\n              <li>Incorrect card details</li>\n              <li>Bank declined the transaction</li>\n            </ul>\n          </div>\n          \n          <div className=\"flex flex-col sm:flex-row gap-3 pt-2\">\n            <Button\n              asChild\n              variant=\"outline\"\n              className=\"flex-1\"\n              data-testid=\"button-back-home\"\n            >\n              <Link href=\"/\">\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                Back to Home\n              </Link>\n            </Button>\n            \n            <Button\n              asChild\n              className=\"flex-1 bg-yellow-500 hover:bg-yellow-600 text-black font-bold\"\n              style={{ boxShadow: \"0 0 20px rgba(255, 215, 0, 0.3)\" }}\n              data-testid=\"button-try-again\"\n            >\n              <Link href=\"/checkout\">\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Try Again\n              </Link>\n            </Button>\n          </div>\n        </div>\n\n        <p className=\"text-xs text-gray-600\">\n          Still having issues? Contact support and we'll help you out\n        </p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2708},"client/src/pages/PaymentPending.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function PaymentPending() {\n  const [, navigate] = useLocation();\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      navigate(\"/orders\");\n    }, 3000);\n\n    return () => clearTimeout(timeout);\n  }, [navigate]);\n\n  return (\n    <div className=\"min-h-screen bg-black flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full text-center space-y-6\">\n        <div className=\"flex justify-center\">\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-yellow-500/20 blur-2xl rounded-full\"></div>\n            <Loader2\n              className=\"w-16 h-16 text-yellow-500 animate-spin relative\"\n              data-testid=\"icon-loading\"\n            />\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <h1\n            className=\"text-3xl font-bold text-yellow-500\"\n            style={{ textShadow: \"0 0 20px rgba(255, 215, 0, 0.5)\" }}\n            data-testid=\"text-title\"\n          >\n            Processing Payment\n          </h1>\n          <p className=\"text-gray-400 text-lg\" data-testid=\"text-description\">\n            Please wait while we verify your payment...\n          </p>\n        </div>\n\n        <div className=\"bg-zinc-900 border border-yellow-500/20 rounded-lg p-6\">\n          <p className=\"text-sm text-gray-500\">\n            This usually takes just a few seconds. You'll be redirected to your orders page automatically.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1607},"client/src/pages/Rankings.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/Header\";\nimport { Footer } from \"@/components/Footer\";\nimport { Star, Trophy, Crown, Medal } from \"lucide-react\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { PlayerRanking } from \"@shared/schema\";\n\nimport sultan1 from \"@assets/S2_1759294544784.png\";\nimport sultan2 from \"@assets/S1_1759294544782.png\";\nimport sultan3 from \"@assets/S3_1759294544785.png\";\nimport cityBg from \"@assets/stock_images/gta_5_cityscape_los__a8b6c683.jpg\";\n\ninterface PlayerRankingWithUser extends PlayerRanking {\n  user?: {\n    username: string;\n    avatar: string | null;\n  };\n}\n\nconst characterImages = [sultan1, sultan2, sultan3, sultan1, sultan2];\n\nexport default function Rankings() {\n  const { data: rankings = [], isLoading } = useQuery<PlayerRankingWithUser[]>({\n    queryKey: [\"/api/rankings\"],\n  });\n\n  const top3 = rankings.slice(0, 3);\n  const restOfRankings = rankings.slice(3);\n\n  const getPodiumOrder = (rank: number) => {\n    // Rank 1 = middle (order-2), Rank 2 = left (order-1), Rank 3 = right (order-3)\n    if (rank === 1) return 'order-2';\n    if (rank === 2) return 'order-1';\n    return 'order-3';\n  };\n\n  const getMedalColor = (rank: number) => {\n    if (rank === 1) return \"text-neon-yellow\";\n    if (rank === 2) return \"text-gray-300\";\n    if (rank === 3) return \"text-amber-600\";\n    return \"text-gray-600\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-[#000000]\">\n      <Header cartItemCount={0} onCartClick={() => {}} />\n      \n      {/* Hero Section with Background */}\n      <div className=\"relative overflow-hidden\">\n        {/* Background Image */}\n        <div className=\"absolute inset-0 z-0\">\n          <img \n            src={cityBg} \n            alt=\"GTA City Background\"\n            className=\"w-full h-full object-cover opacity-20\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-b from-[#000000]/80 via-[#000000]/90 to-[#000000]\" />\n        </div>\n\n        <div className=\"container mx-auto px-4 py-20 relative z-10\">\n          {/* Title */}\n          <div className=\"text-center mb-20\">\n            <div className=\"relative inline-block\">\n              <Trophy className=\"w-24 h-24 text-neon-yellow mx-auto mb-6 animate-pulse\" \n                     style={{ filter: \"drop-shadow(0 0 30px rgba(255, 215, 0, 0.8))\" }} />\n              <h1 className=\"text-7xl md:text-9xl font-bebas text-neon-yellow mb-4\" \n                  style={{ textShadow: \"0 0 40px rgba(255, 215, 0, 0.6)\" }}\n                  data-testid=\"title-rankings\">\n                SULTAN\n              </h1>\n              <div className=\"h-1 w-64 mx-auto bg-gradient-to-r from-transparent via-neon-yellow to-transparent\" />\n            </div>\n            <p className=\"text-gray-300 font-rajdhani text-2xl uppercase tracking-widest mt-4\">\n              HALL OF TOP SULTAN\n            </p>\n          </div>\n\n          {isLoading ? (\n            <div className=\"text-center py-20\">\n              <div className=\"inline-block w-16 h-16 border-4 border-neon-yellow border-t-transparent rounded-full animate-spin\" />\n            </div>\n          ) : rankings.length === 0 ? (\n            <div className=\"text-center py-20\">\n              <Trophy className=\"w-24 h-24 text-gray-600 mx-auto mb-6\" />\n              <p className=\"text-gray-400 text-2xl font-rajdhani\">No rankings available yet</p>\n            </div>\n          ) : (\n            <>\n              {/* Top 3 Podium */}\n              {top3.length > 0 && (\n                <div className=\"mb-24\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-7xl mx-auto items-end\">\n                    {top3.map((player, index) => {\n                      const orderClass = getPodiumOrder(player.rank);\n                      const isWinner = player.rank === 1;\n                      const heightClass = player.rank === 1 ? 'min-h-[400px]' : player.rank === 2 ? 'min-h-[350px]' : 'min-h-[320px]';\n                      const characterImage = characterImages[index % characterImages.length];\n                      \n                      return (\n                        <div\n                          key={player.id}\n                          className={`${orderClass} relative group`}\n                          data-testid={`podium-${player.rank}`}\n                        >\n                          <div className={`relative ${heightClass} bg-gradient-to-br from-[#1a1a1a] via-[#000000] to-black border-4 ${\n                            isWinner ? 'border-neon-yellow' : 'border-white/20'\n                          } rounded-3xl overflow-hidden transition-all duration-500 hover:scale-105 hover:border-neon-yellow`}\n                          style={isWinner ? { \n                            boxShadow: \"0 0 60px rgba(255, 215, 0, 0.4), inset 0 0 80px rgba(255, 215, 0, 0.1)\" \n                          } : {\n                            boxShadow: \"0 20px 60px rgba(0, 0, 0, 0.5)\"\n                          }}>\n                            \n                            {/* Character Background Image */}\n                            <div className=\"absolute inset-0\">\n                              <img \n                                src={characterImage} \n                                alt={player.playerName}\n                                className=\"w-full h-full object-cover opacity-40 group-hover:opacity-50 transition-opacity duration-500\"\n                              />\n                              <div className={`absolute inset-0 bg-gradient-to-t ${\n                                isWinner \n                                  ? 'from-black via-black/80 to-transparent' \n                                  : 'from-black via-black/60 to-transparent'\n                              }`} />\n                            </div>\n\n                            {/* Rank Badge */}\n                            <div className=\"absolute top-6 right-6 z-10\">\n                              <div className={`w-16 h-16 rounded-full ${\n                                isWinner ? 'bg-neon-yellow' : 'bg-gray-700'\n                              } border-4 border-black flex items-center justify-center shadow-2xl`}>\n                                <span className={`text-3xl font-bold font-bebas ${\n                                  isWinner ? 'text-black' : 'text-white'\n                                }`}>#{player.rank}</span>\n                              </div>\n                            </div>\n\n                            {/* Content */}\n                            <div className=\"absolute bottom-0 left-0 right-0 p-8 z-10\">\n                              {/* Player Name */}\n                              <div className=\"text-center mb-4\">\n                                <p className={`${isWinner ? 'text-4xl md:text-5xl' : 'text-3xl md:text-4xl'} font-bebas text-white tracking-wider mb-2`} \n                                   data-testid={`player-name-${player.rank}`}\n                                   style={isWinner ? { textShadow: \"0 0 30px rgba(255, 215, 0, 0.8)\" } : { textShadow: \"0 2px 10px rgba(0, 0, 0, 0.8)\" }}>\n                                  {player.playerName}\n                                </p>\n                                <div className={`inline-block px-4 py-1 rounded-full ${\n                                  isWinner ? 'bg-neon-yellow/20 border border-neon-yellow' : 'bg-white/10 border border-white/20'\n                                }`}>\n                                  <span className={`font-rajdhani font-bold text-sm uppercase ${\n                                    isWinner ? 'text-neon-yellow' : 'text-gray-300'\n                                  }`}>\n                                    {isWinner ? 'Champion' : `Rank ${player.rank}`}\n                                  </span>\n                                </div>\n                              </div>\n\n                              {/* Stars - Max 10 displayed */}\n                              <div className=\"flex gap-1 flex-wrap justify-center mb-3\">\n                                {Array.from({ length: Math.min(player.stars, 10) }).map((_, i) => (\n                                  <Crown\n                                    key={i}\n                                    className={`${isWinner ? 'w-7 h-7' : 'w-6 h-6'} fill-neon-yellow text-neon-yellow`}\n                                    style={{ filter: \"drop-shadow(0 0 8px rgba(255, 215, 0, 1))\" }}\n                                  />\n                                ))}\n                                {player.stars > 10 && (\n                                  <span className={`${isWinner ? 'text-2xl' : 'text-xl'} text-neon-yellow font-bold ml-1 font-bebas`}>\n                                    +{player.stars - 10}\n                                  </span>\n                                )}\n                              </div>\n                              <p className={`text-neon-yellow font-bebas text-center ${\n                                isWinner ? 'text-3xl' : 'text-2xl'\n                              }`}>\n                                {player.stars} STARS\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                </div>\n              )}\n\n              {/* Rankings Table */}\n              <div className=\"max-w-6xl mx-auto\">\n                <div className=\"bg-gradient-to-br from-[#1a1a1a]/80 to-[#000000]/80 backdrop-blur-sm border-2 border-white/10 rounded-3xl overflow-hidden shadow-2xl\">\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full\">\n                      <thead>\n                        <tr className=\"border-b-2 border-neon-yellow/30 bg-black/40\">\n                          <th className=\"py-6 px-8 text-left font-bebas text-2xl text-neon-yellow uppercase tracking-wider\">\n                            Rank\n                          </th>\n                          <th className=\"py-6 px-8 text-left font-bebas text-2xl text-neon-yellow uppercase tracking-wider\">\n                            Player\n                          </th>\n                          <th className=\"py-6 px-8 text-left font-bebas text-2xl text-neon-yellow uppercase tracking-wider\">\n                            Stars\n                          </th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {restOfRankings.map((player, index) => {\n                          const characterImage = characterImages[(index + 3) % characterImages.length];\n                          \n                          return (\n                            <tr\n                              key={player.id}\n                              className=\"border-b border-white/5 hover:bg-white/10 transition-all duration-300 group relative\"\n                              data-testid={`row-rank-${player.rank}`}\n                            >\n                              <td className=\"py-6 px-8 relative\">\n                                {/* Background character image on hover */}\n                                <div className=\"absolute inset-0 left-0 right-0 opacity-0 group-hover:opacity-10 transition-opacity duration-500 pointer-events-none -z-10\" style={{ width: 'calc(300%)' }}>\n                                  <img \n                                    src={characterImage}\n                                    alt=\"\"\n                                    className=\"w-full h-full object-cover\"\n                                  />\n                                </div>\n                                <div className=\"flex items-center gap-4\">\n                                  {player.rank <= 6 && (\n                                    <Medal className={`w-8 h-8 ${getMedalColor(player.rank)}`} />\n                                  )}\n                                  <span className={`text-3xl font-bold font-bebas ${getMedalColor(player.rank)}`}>\n                                    #{player.rank}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"py-6 px-8 relative\">\n                                <div className=\"flex items-center gap-5\">\n                                  <div className=\"relative\">\n                                    <Avatar className=\"w-16 h-16 ring-4 ring-white/20 group-hover:ring-neon-yellow/50 transition-all shadow-xl\">\n                                      <AvatarImage src={player.user?.avatar || undefined} />\n                                      <AvatarFallback className=\"bg-gradient-to-br from-gray-700 to-gray-900 text-white font-bold text-xl\">\n                                        {player.playerName.charAt(0).toUpperCase()}\n                                      </AvatarFallback>\n                                    </Avatar>\n                                  </div>\n                                  <span className=\"text-2xl text-white font-rajdhani font-bold group-hover:text-neon-yellow transition-colors\" \n                                        data-testid={`player-name-${player.rank}`}>\n                                    {player.playerName}\n                                  </span>\n                                </div>\n                              </td>\n                              <td className=\"py-6 px-8 relative\">\n                                <div className=\"flex items-center gap-3\">\n                                  <div className=\"flex gap-1.5\">\n                                    {Array.from({ length: Math.min(player.stars, 7) }).map((_, i) => (\n                                      <Crown\n                                        key={i}\n                                        className=\"w-6 h-6 fill-neon-yellow text-neon-yellow\"\n                                        style={{ filter: \"drop-shadow(0 0 4px rgba(255, 215, 0, 0.8))\" }}\n                                      />\n                                    ))}\n                                    {player.stars > 7 && (\n                                      <span className=\"text-neon-yellow font-bold text-xl ml-2 font-bebas\">\n                                        +{player.stars - 7}\n                                      </span>\n                                    )}\n                                  </div>\n                                </div>\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14880},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/FAQSection.tsx":{"content":"import { FAQSection } from \"../FAQSection\";\n\nexport default function FAQSectionExample() {\n  const faqs = [\n    {\n      question: \"How fast will I receive my codes?\",\n      answer: \"Instantly after payment confirmation. Your AECOIN code will be delivered to your email within seconds.\",\n    },\n    {\n      question: \"What payment methods do you accept?\",\n      answer: \"We accept FPX, ToyyibPay, Billplz, Visa, and Mastercard for your convenience.\",\n    },\n    {\n      question: \"Can I get a refund?\",\n      answer: \"Refunds are only available for unused codes within 24 hours of purchase. Once redeemed, codes cannot be refunded.\",\n    },\n    {\n      question: \"How do I redeem codes?\",\n      answer: \"Simply enter your code in the GTA Online redeem menu to instantly add AECOIN to your account.\",\n    },\n  ];\n\n  return <FAQSection faqs={faqs} />;\n}\n","size_bytes":851},"client/src/components/examples/Footer.tsx":{"content":"import { Footer } from \"../Footer\";\n\nexport default function FooterExample() {\n  return <Footer />;\n}\n","size_bytes":102},"client/src/components/examples/GallerySection.tsx":{"content":"import { GallerySection } from \"../GallerySection\";\nimport car1Image from \"@assets/stock_images/gta_5_sports_car_mus_ecdea8c8.jpg\";\nimport car2Image from \"@assets/stock_images/gta_5_sports_car_mus_07d7cbe9.jpg\";\nimport bike1Image from \"@assets/stock_images/gta_5_motorcycle_bik_bfe4c529.jpg\";\nimport char1Image from \"@assets/stock_images/gta_5_character_gang_408947e4.jpg\";\nimport cityImage from \"@assets/stock_images/gta_5_los_santos_cit_cb9a6b5e.jpg\";\n\nexport default function GallerySectionExample() {\n  const images = [car1Image, bike1Image, char1Image, cityImage, car2Image, bike1Image, char1Image, car1Image];\n\n  return <GallerySection images={images} onCtaClick={() => console.log(\"Get AECOIN clicked\")} />;\n}\n","size_bytes":717},"client/src/components/examples/Header.tsx":{"content":"import { Header } from \"../Header\";\n\nexport default function HeaderExample() {\n  return <Header cartItemCount={3} onCartClick={() => console.log(\"Cart clicked\")} />;\n}\n","size_bytes":168},"client/src/components/examples/HeroSection.tsx":{"content":"import { HeroSection } from \"../HeroSection\";\n\nexport default function HeroSectionExample() {\n  return (\n    <HeroSection\n      onShopClick={() => console.log(\"Shop now clicked\")}\n      onGalleryClick={() => console.log(\"View gallery clicked\")}\n    />\n  );\n}\n","size_bytes":259},"client/src/components/examples/HeroSlider.tsx":{"content":"import { HeroSlider } from \"../HeroSlider\";\n\nexport default function HeroSliderExample() {\n  return (\n    <HeroSlider\n      onShopClick={() => console.log(\"Shop clicked\")}\n      onGalleryClick={() => console.log(\"Gallery clicked\")}\n    />\n  );\n}\n","size_bytes":246},"client/src/components/examples/HowItWorksSection.tsx":{"content":"import { HowItWorksSection } from \"../HowItWorksSection\";\n\nexport default function HowItWorksSectionExample() {\n  return <HowItWorksSection />;\n}\n","size_bytes":146},"client/src/components/examples/ModernHero.tsx":{"content":"import { ModernHero } from \"../ModernHero\";\n\nexport default function ModernHeroExample() {\n  return (\n    <ModernHero\n      onShopClick={() => console.log(\"Shop clicked\")}\n      onGalleryClick={() => console.log(\"Gallery clicked\")}\n    />\n  );\n}\n","size_bytes":246},"client/src/components/examples/PackageCard.tsx":{"content":"import { PackageCard } from \"../PackageCard\";\nimport coinImage from \"@assets/stock_images/gold_coins_money_cas_b3778293.jpg\";\n\nexport default function PackageCardExample() {\n  const samplePackage = {\n    id: \"1\",\n    amount: 1000,\n    price: 98,\n    originalPrice: 110,\n    image: coinImage,\n    badge: \"POPULAR\",\n  };\n\n  return (\n    <div className=\"max-w-sm\">\n      <PackageCard package={samplePackage} onAddToCart={(pkg) => console.log(\"Added to cart:\", pkg)} />\n    </div>\n  );\n}\n","size_bytes":484},"client/src/components/examples/PackagesSection.tsx":{"content":"import { PackagesSection } from \"../PackagesSection\";\nimport coinImage from \"@assets/stock_images/gold_coins_money_cas_b3778293.jpg\";\n\nexport default function PackagesSectionExample() {\n  const packages = [\n    { id: \"1\", amount: 500, price: 60, originalPrice: 65, image: coinImage },\n    { id: \"2\", amount: 1000, price: 98, originalPrice: 110, image: coinImage, badge: \"POPULAR\" },\n    { id: \"3\", amount: 3000, price: 295, originalPrice: 310, image: coinImage },\n    { id: \"4\", amount: 5000, price: 490, originalPrice: 510, image: coinImage, badge: \"BEST VALUE\" },\n    { id: \"5\", amount: 10000, price: 980, originalPrice: 1000, image: coinImage },\n  ];\n\n  return <PackagesSection packages={packages} onAddToCart={(pkg) => console.log(\"Added:\", pkg)} />;\n}\n","size_bytes":757},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"UBUNTU_DEPLOYMENT.md":{"content":"# AECOIN Store - Ubuntu VPS Deployment Guide\n\n## System Requirements\n\n- Ubuntu 20.04 LTS or newer\n- Minimum 2GB RAM\n- 20GB disk space\n- Root or sudo access\n\n## 1. Initial Server Setup\n\n### Update System\n```bash\nsudo apt update && sudo apt upgrade -y\n```\n\n### Install Essential Tools\n```bash\nsudo apt install -y curl git build-essential nginx certbot python3-certbot-nginx\n```\n\n## 2. Install Node.js 20.x\n\n```bash\n# Install Node.js 20.x via NodeSource\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Verify installation\nnode --version  # Should show v20.x.x\nnpm --version\n```\n\n## 3. Install PostgreSQL (Main Database)\n\n```bash\n# Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Start and enable PostgreSQL\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create database and user\nsudo -u postgres psql <<EOF\nCREATE DATABASE aecoin_store;\nCREATE USER aecoin_user WITH PASSWORD 'your_secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE aecoin_store TO aecoin_user;\n\\q\nEOF\n```\n\n## 4. Install MySQL (FiveM Database)\n\n```bash\n# Install MySQL Server\nsudo apt install -y mysql-server\n\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create database connection for FiveM\nsudo mysql <<EOF\nCREATE DATABASE IF NOT EXISTS fivem_database;\nCREATE USER IF NOT EXISTS 'fivem_user'@'%' IDENTIFIED BY 'your_fivem_password';\nGRANT ALL PRIVILEGES ON fivem_database.* TO 'fivem_user'@'%';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## 5. Clone and Setup Application\n\n```bash\n# Create application directory\nsudo mkdir -p /var/www/aecoin-store\nsudo chown -R $USER:$USER /var/www/aecoin-store\ncd /var/www/aecoin-store\n\n# Clone your repository (or upload files via SFTP/SCP)\ngit clone <your-repo-url> .\n\n# Install dependencies\nnpm install\n```\n\n## 6. Environment Variables Setup\n\nCreate `.env` file in the project root:\n\n```bash\nnano .env\n```\n\nAdd the following environment variables:\n\n```env\n# Application\nNODE_ENV=production\nPORT=5000\n\n# PostgreSQL Database (Main)\nDATABASE_URL=postgresql://aecoin_user:your_secure_password_here@localhost:5432/aecoin_store\nPGHOST=localhost\nPGPORT=5432\nPGUSER=aecoin_user\nPGPASSWORD=your_secure_password_here\nPGDATABASE=aecoin_store\n\n# FiveM MySQL Database\nFIVEM_DB_HOST=localhost\nFIVEM_DB_PORT=3306\nFIVEM_DB_USER=fivem_user\nFIVEM_DB_PASSWORD=your_fivem_password\nFIVEM_DB_NAME=fivem_database\nFIVEM_DB_TABLE=ak4y_donatesystem_codes\nFIVEM_DB_COLUMN_CODE=code\nFIVEM_DB_COLUMN_CREDITSVALUE=creditsvalue\n\n# Discord OAuth\nDISCORD_CLIENT_ID=your_discord_client_id\nDISCORD_CLIENT_SECRET=your_discord_client_secret\nDISCORD_REDIRECT_URI=https://yourdomain.com/api/auth/discord/callback\n\n# Stripe Payment Gateway\nSTRIPE_SECRET_KEY=sk_live_your_stripe_secret_key\nVITE_STRIPE_PUBLIC_KEY=pk_live_your_stripe_public_key\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n\n# ToyyibPay Payment Gateway (Malaysia)\nTOYYIBPAY_SECRET_KEY=your_toyyibpay_secret_key\n\n# Billplz Payment Gateway (Malaysia)\nBILLPLZ_SECRET_KEY=your_billplz_api_key\nBILLPLZ_SIGNATURE_KEY=your_billplz_signature_key\n\n# Session Secret (generate random string)\nSESSION_SECRET=$(openssl rand -base64 32)\n```\n\n**Note**: Replace all placeholder values with your actual credentials.\n\n## 7. Database Migration\n\n```bash\n# Generate database schema\nnpm run db:push\n\n# Verify tables were created\npsql postgresql://aecoin_user:your_secure_password_here@localhost:5432/aecoin_store -c \"\\dt\"\n```\n\n## 8. Build Application\n\n```bash\n# Build frontend\nnpm run build\n\n# Test the application locally\nNODE_ENV=production npm start\n```\n\nPress `Ctrl+C` after verifying it starts successfully.\n\n## 9. Install PM2 Process Manager\n\n```bash\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem file\ncat > ecosystem.config.cjs << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'aecoin-store',\n    script: 'npm',\n    args: 'start',\n    cwd: '/var/www/aecoin-store',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: '/var/log/pm2/aecoin-error.log',\n    out_file: '/var/log/pm2/aecoin-out.log',\n    log_file: '/var/log/pm2/aecoin-combined.log',\n    time: true\n  }]\n};\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/pm2\nsudo chown -R $USER:$USER /var/log/pm2\n\n# Start application with PM2\npm2 start ecosystem.config.cjs\n\n# Save PM2 configuration\npm2 save\n\n# Setup PM2 to start on boot\npm2 startup systemd\n# Follow the command it outputs\n```\n\n## 10. Configure Nginx Reverse Proxy\n\n```bash\n# Create Nginx configuration\nsudo nano /etc/nginx/sites-available/aecoin-store\n```\n\nAdd the following configuration:\n\n```nginx\nserver {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n\n    # Client max body size\n    client_max_body_size 10M;\n\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n\n    # Static files cache\n    location ~* \\.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {\n        proxy_pass http://localhost:5000;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n}\n```\n\n```bash\n# Enable the site\nsudo ln -s /etc/nginx/sites-available/aecoin-store /etc/nginx/sites-enabled/\n\n# Test Nginx configuration\nsudo nginx -t\n\n# Restart Nginx\nsudo systemctl restart nginx\n```\n\n## 11. SSL Certificate with Let's Encrypt\n\n```bash\n# Obtain SSL certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# Test auto-renewal\nsudo certbot renew --dry-run\n```\n\n## 12. Firewall Configuration\n\n```bash\n# Enable UFW firewall\nsudo ufw enable\n\n# Allow necessary ports\nsudo ufw allow 22/tcp      # SSH\nsudo ufw allow 80/tcp      # HTTP\nsudo ufw allow 443/tcp     # HTTPS\n\n# Check firewall status\nsudo ufw status\n```\n\n## 13. Configure Stripe Webhooks\n\n1. Go to Stripe Dashboard → Developers → Webhooks\n2. Add endpoint: `https://yourdomain.com/api/webhooks/stripe`\n3. Select events:\n   - `payment_intent.succeeded`\n   - `payment_intent.payment_failed`\n4. Copy the webhook signing secret and update `.env`:\n   ```env\n   STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n   ```\n5. Restart application:\n   ```bash\n   pm2 restart aecoin-store\n   ```\n\n## 14. Database Backup Setup\n\nCreate automated backup script:\n\n```bash\n# Create backup script\nsudo nano /usr/local/bin/backup-aecoin-db.sh\n```\n\nAdd the following:\n\n```bash\n#!/bin/bash\nBACKUP_DIR=\"/var/backups/aecoin-store\"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nDB_NAME=\"aecoin_store\"\nDB_USER=\"aecoin_user\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# PostgreSQL backup\nPGPASSWORD='your_secure_password_here' pg_dump -h localhost -U $DB_USER $DB_NAME > $BACKUP_DIR/backup_$TIMESTAMP.sql\n\n# Compress backup\ngzip $BACKUP_DIR/backup_$TIMESTAMP.sql\n\n# Delete backups older than 7 days\nfind $BACKUP_DIR -name \"backup_*.sql.gz\" -mtime +7 -delete\n\necho \"Backup completed: backup_$TIMESTAMP.sql.gz\"\n```\n\n```bash\n# Make script executable\nsudo chmod +x /usr/local/bin/backup-aecoin-db.sh\n\n# Add to crontab (daily at 2 AM)\n(crontab -l 2>/dev/null; echo \"0 2 * * * /usr/local/bin/backup-aecoin-db.sh\") | crontab -\n```\n\n## 15. Monitoring and Logs\n\n### View Application Logs\n```bash\n# PM2 logs\npm2 logs aecoin-store\n\n# Nginx access logs\nsudo tail -f /var/log/nginx/access.log\n\n# Nginx error logs\nsudo tail -f /var/log/nginx/error.log\n```\n\n### PM2 Monitoring\n```bash\n# Real-time monitoring\npm2 monit\n\n# Application status\npm2 status\n\n# Resource usage\npm2 list\n```\n\n## 16. Maintenance Commands\n\n### Restart Application\n```bash\npm2 restart aecoin-store\n```\n\n### Update Application\n```bash\ncd /var/www/aecoin-store\ngit pull origin main\nnpm install\nnpm run build\npm2 restart aecoin-store\n```\n\n### Database Migration After Update\n```bash\nnpm run db:push\npm2 restart aecoin-store\n```\n\n## 17. Security Hardening\n\n### Disable Root Login\n```bash\nsudo nano /etc/ssh/sshd_config\n```\nSet: `PermitRootLogin no`\n\n### Keep System Updated\n```bash\nsudo apt update && sudo apt upgrade -y\n```\n\n### Enable Fail2Ban\n```bash\nsudo apt install -y fail2ban\nsudo systemctl enable fail2ban\nsudo systemctl start fail2ban\n```\n\n## 18. Troubleshooting\n\n### Application Won't Start\n```bash\n# Check logs\npm2 logs aecoin-store --lines 100\n\n# Check if port 5000 is in use\nsudo lsof -i :5000\n\n# Restart application\npm2 restart aecoin-store\n```\n\n### Database Connection Issues\n```bash\n# Test PostgreSQL connection\npsql postgresql://aecoin_user:your_secure_password_here@localhost:5432/aecoin_store -c \"SELECT version();\"\n\n# Check PostgreSQL status\nsudo systemctl status postgresql\n```\n\n### Nginx Issues\n```bash\n# Test configuration\nsudo nginx -t\n\n# Restart Nginx\nsudo systemctl restart nginx\n\n# Check Nginx status\nsudo systemctl status nginx\n```\n\n## 19. Performance Optimization\n\n### Enable Nginx Gzip Compression\nEdit `/etc/nginx/nginx.conf`:\n```nginx\ngzip on;\ngzip_vary on;\ngzip_proxied any;\ngzip_comp_level 6;\ngzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss;\n```\n\n### PostgreSQL Tuning\nEdit `/etc/postgresql/*/main/postgresql.conf`:\n```\nshared_buffers = 256MB\neffective_cache_size = 1GB\nmaintenance_work_mem = 64MB\n```\n\nThen restart PostgreSQL:\n```bash\nsudo systemctl restart postgresql\n```\n\n## 20. Going Live Checklist\n\n- [ ] All environment variables configured correctly\n- [ ] Database migrations completed\n- [ ] SSL certificate installed\n- [ ] Firewall configured\n- [ ] Application running with PM2\n- [ ] Nginx reverse proxy configured\n- [ ] Stripe webhooks configured\n- [ ] Discord OAuth redirect URIs updated\n- [ ] Database backups automated\n- [ ] Monitoring and logs accessible\n- [ ] Domain DNS pointed to server IP\n- [ ] Test all payment flows (Stripe & ToyyibPay)\n- [ ] Test Discord login\n- [ ] Test FiveM code redemption\n\n## Support\n\nFor issues or questions:\n- Check logs: `pm2 logs aecoin-store`\n- Monitor: `pm2 monit`\n- Restart: `pm2 restart aecoin-store`\n\n---\n\n**Note**: Replace all placeholder values (passwords, API keys, domain names) with your actual production credentials. Keep your `.env` file secure and never commit it to version control.\n","size_bytes":10810},"server/billplz.ts":{"content":"import crypto from 'crypto';\n\nconst BILLPLZ_BASE_URL = 'https://www.billplz.com/api';\n\ninterface CreateCollectionResponse {\n  id: string;\n  title: string;\n  description: string;\n  status: string;\n}\n\ninterface CreateBillResponse {\n  id: string;\n  collection_id: string;\n  paid: boolean;\n  state: string;\n  amount: number;\n  paid_amount: number;\n  due_at: string;\n  email: string;\n  mobile: string | null;\n  name: string;\n  url: string;\n  reference_1_label: string | null;\n  reference_1: string | null;\n  reference_2_label: string | null;\n  reference_2: string | null;\n  redirect_url: string | null;\n  callback_url: string | null;\n  description: string;\n}\n\ninterface GetBillResponse {\n  id: string;\n  collection_id: string;\n  paid: boolean;\n  state: string;\n  amount: number;\n  paid_amount: number;\n  due_at: string;\n  email: string;\n  mobile: string | null;\n  name: string;\n  url: string;\n  paid_at: string | null;\n}\n\nlet collectionId: string | null = null;\n\nasync function ensureCollectionExists(): Promise<string> {\n  if (collectionId) {\n    return collectionId;\n  }\n\n  if (!process.env.BILLPLZ_SECRET_KEY) {\n    throw new Error('BILLPLZ_SECRET_KEY not configured');\n  }\n\n  try {\n    // Create collection for AECOIN Store\n    const response = await fetch(`${BILLPLZ_BASE_URL}/v3/collections`, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(process.env.BILLPLZ_SECRET_KEY + ':').toString('base64'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        title: 'AECOIN Store',\n        description: 'GTA Online virtual currency packages',\n      }),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Billplz collection creation failed:', errorText);\n      throw new Error(`Failed to create Billplz collection: ${errorText}`);\n    }\n\n    const data = await response.json() as CreateCollectionResponse;\n    \n    if (!data.id) {\n      console.error('Invalid collection response:', data);\n      throw new Error('Failed to create Billplz collection: No ID returned');\n    }\n\n    collectionId = data.id;\n    console.log('✓ Billplz collection created:', collectionId);\n    \n    return collectionId;\n  } catch (error) {\n    console.error('Billplz collection creation error:', error);\n    throw error;\n  }\n}\n\nexport async function createBill(params: {\n  description: string;\n  amount: number; // in MYR (will be converted to cents)\n  name: string;\n  email: string;\n  mobile?: string;\n  callbackUrl: string;\n  redirectUrl: string;\n  reference1Label?: string;\n  reference1?: string;\n}): Promise<CreateBillResponse> {\n  if (!process.env.BILLPLZ_SECRET_KEY) {\n    throw new Error('BILLPLZ_SECRET_KEY not configured');\n  }\n\n  const collId = await ensureCollectionExists();\n\n  try {\n    // Convert amount to cents (Billplz expects amount in cents)\n    const amountInCents = Math.round(params.amount * 100);\n\n    const billData: any = {\n      collection_id: collId,\n      description: params.description,\n      email: params.email,\n      name: params.name,\n      amount: amountInCents,\n      callback_url: params.callbackUrl,\n      redirect_url: params.redirectUrl,\n    };\n\n    if (params.mobile) {\n      billData.mobile = params.mobile;\n    }\n\n    if (params.reference1Label && params.reference1) {\n      billData.reference_1_label = params.reference1Label;\n      billData.reference_1 = params.reference1;\n    }\n\n    const response = await fetch(`${BILLPLZ_BASE_URL}/v3/bills`, {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(process.env.BILLPLZ_SECRET_KEY + ':').toString('base64'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(billData),\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Billplz bill creation failed:', errorText);\n      throw new Error(`Failed to create Billplz bill: ${errorText}`);\n    }\n\n    const data = await response.json() as CreateBillResponse;\n    \n    if (!data.id || !data.url) {\n      console.error('Invalid bill response:', data);\n      throw new Error('Failed to create Billplz bill: Invalid response');\n    }\n\n    console.log('✓ Billplz bill created:', data.id);\n    return data;\n  } catch (error) {\n    console.error('Billplz bill creation error:', error);\n    throw error;\n  }\n}\n\nexport async function getBill(billId: string): Promise<GetBillResponse> {\n  if (!process.env.BILLPLZ_SECRET_KEY) {\n    throw new Error('BILLPLZ_SECRET_KEY not configured');\n  }\n\n  try {\n    const response = await fetch(`${BILLPLZ_BASE_URL}/v3/bills/${billId}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Basic ' + Buffer.from(process.env.BILLPLZ_SECRET_KEY + ':').toString('base64'),\n      },\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Billplz get bill failed:', errorText);\n      throw new Error(`Failed to get Billplz bill: ${errorText}`);\n    }\n\n    const data = await response.json() as GetBillResponse;\n    return data;\n  } catch (error) {\n    console.error('Billplz get bill error:', error);\n    throw error;\n  }\n}\n\nexport async function verifyBillPayment(billId: string): Promise<boolean> {\n  try {\n    const bill = await getBill(billId);\n    return bill.paid === true && bill.state === 'paid';\n  } catch (error) {\n    console.error('Billplz payment verification error:', error);\n    return false;\n  }\n}\n\n/**\n * Verify Billplz X-Signature callback authenticity\n * @param payload - The callback payload (as string)\n * @param signature - The X-Billplz-Signature header value\n * @returns true if signature is valid\n */\nexport function verifyBillplzSignature(payload: string, signature: string): boolean {\n  if (!process.env.BILLPLZ_SIGNATURE_KEY) {\n    console.warn('BILLPLZ_SIGNATURE_KEY not configured - skipping signature verification (DEVELOPMENT ONLY)');\n    return true; // Allow in development\n  }\n\n  try {\n    const expectedSignature = crypto\n      .createHmac('sha256', process.env.BILLPLZ_SIGNATURE_KEY)\n      .update(payload)\n      .digest('hex');\n    \n    return expectedSignature === signature;\n  } catch (error) {\n    console.error('Billplz signature verification error:', error);\n    return false;\n  }\n}\n","size_bytes":6263},"DEPLOYMENT_README.md":{"content":"# AECOIN Store - Deployment Package\n\n## 📦 Deployment Files Created\n\n### 1. **VPS_DEPLOYMENT.md** (22KB)\nComprehensive step-by-step deployment guide covering:\n- ✅ Multiple VPS providers (DigitalOcean, AWS EC2, Linode, Vultr)\n- ✅ Manual deployment instructions for all components\n- ✅ All three payment gateways (Stripe, ToyyibPay, Billplz)  \n- ✅ SSL/HTTPS setup with Let's Encrypt\n- ✅ Security hardening (firewall, SSH, Fail2Ban)\n- ✅ Monitoring and logging setup\n- ✅ Backup and restore procedures\n- ✅ Troubleshooting guide\n- ✅ Performance optimization tips\n\n### 2. **deploy.sh** (19KB, executable)\nAutomated deployment script that:\n- ✅ Detects OS automatically (Ubuntu, Debian, CentOS, RHEL)\n- ✅ Installs all dependencies (Node.js, PostgreSQL, MySQL, Nginx, PM2)\n- ✅ Collects configuration interactively\n- ✅ Sets up databases\n- ✅ Configures environment variables\n- ✅ Builds and deploys application\n- ✅ Sets up SSL certificates\n- ✅ Configures Nginx reverse proxy\n- ✅ Automates backups\n- ✅ Verifies deployment\n\n### 3. **.env.example** (2.6KB)\nComplete environment variable template with:\n- All database configurations (PostgreSQL + MySQL)\n- Discord OAuth settings\n- **All three payment gateways** (Stripe, ToyyibPay, Billplz)\n- Session secrets\n- Clear section organization\n\n### 4. **database_backup_20251006_043457.sql** (25KB)\nLatest PostgreSQL database backup ready for VPS deployment\n\n## 🚀 Quick Start Deployment\n\n### Option 1: Automated (Recommended)\n\n```bash\n# 1. SSH into your VPS\nssh root@your-vps-ip\n\n# 2. Download the deployment script\ncurl -o deploy.sh https://your-repo/deploy.sh\nchmod +x deploy.sh\n\n# 3. Run deployment\nsudo ./deploy.sh\n\n# 4. Follow the interactive prompts\n# - Enter domain name\n# - Provide database passwords\n# - Enter Discord OAuth credentials\n# - Add Stripe API keys\n# - Add ToyyibPay secret key\n# - Add Billplz API keys\n# - Provide SSL admin email\n```\n\n### Option 2: Manual Deployment\n\nFollow the step-by-step guide in **VPS_DEPLOYMENT.md**\n\n## 🔧 Important Configuration Steps\n\n### After Deployment:\n\n1. **Configure Payment Gateway Webhooks:**\n   - **Stripe:** Add webhook at `https://yourdomain.com/api/stripe-webhook`\n   - **ToyyibPay:** Set return URL to `https://yourdomain.com/api/toyyibpay-return`\n   - **Billplz:** Set callback URL to `https://yourdomain.com/api/billplz-callback`\n\n2. **Update Discord OAuth:**\n   - Add redirect URI: `https://yourdomain.com/api/auth/discord/callback`\n\n3. **Test Payment Flows:**\n   - Test Stripe payment\n   - Test ToyyibPay payment\n   - Test Billplz payment\n\n## 🔐 Security Checklist\n\n- [ ] SSL certificate installed and auto-renewal configured\n- [ ] Firewall configured (ports 22, 80, 443 only)\n- [ ] SSH key authentication enabled\n- [ ] Root login disabled\n- [ ] MySQL secured (run `mysql_secure_installation`)\n- [ ] Environment variables secured (`.env` with 600 permissions)\n- [ ] Automatic backups configured\n- [ ] Payment webhook secrets configured\n\n## 📁 File Locations on VPS\n\n```\n/var/www/aecoin-store/          # Application root\n/var/www/aecoin-store/.env      # Environment variables\n/var/log/pm2/                   # Application logs\n/var/log/nginx/                 # Nginx logs\n/var/backups/aecoin-store/      # Database backups\n/etc/nginx/sites-available/     # Nginx config\n```\n\n## 🛠️ Useful Commands\n\n```bash\n# Application Management\npm2 status                      # Check app status\npm2 logs aecoin-store          # View logs\npm2 restart aecoin-store       # Restart app\npm2 monit                      # Real-time monitoring\n\n# Nginx\nsudo nginx -t                  # Test config\nsudo systemctl reload nginx    # Reload Nginx\n\n# Database\npsql $DATABASE_URL             # Connect to PostgreSQL\nnpm run db:push                # Run migrations\n\n# SSL\nsudo certbot certificates      # Check SSL status\nsudo certbot renew             # Renew certificates\n\n# Backups\nls -lh /var/backups/aecoin-store/  # View backups\n```\n\n## 📊 Deployment Architecture\n\n```\nInternet\n    ↓\nNginx (Port 80/443) → SSL/TLS\n    ↓\nNode.js App (Port 5000) → PM2 Process Manager\n    ↓\nPostgreSQL (Main DB) + MySQL (FiveM DB)\n    ↓\nPayment Gateways: Stripe + ToyyibPay + Billplz\n```\n\n## ⚡ Performance Notes\n\n- Application runs on PM2 with auto-restart\n- Nginx acts as reverse proxy with security headers\n- SSL certificates auto-renew via Certbot\n- Daily automated backups at 2 AM\n- Old backups auto-deleted after 7 days\n\n## 🐛 Troubleshooting\n\n### Application won't start:\n```bash\npm2 logs aecoin-store --err\n```\n\n### Payment webhooks not working:\n```bash\nsudo tail -f /var/log/nginx/access.log | grep -E 'stripe|toyyibpay|billplz'\n```\n\n### Database connection issues:\n```bash\npsql $DATABASE_URL -c \"SELECT 1;\"\n```\n\n### SSL certificate issues:\n```bash\nsudo certbot certificates\nsudo certbot renew --force-renewal\n```\n\n## 📝 Environment Variables Reference\n\nSee `.env.example` for complete list. Key variables:\n\n```env\n# Application\nNODE_ENV=production\nPORT=5000\n\n# Databases\nDATABASE_URL=postgresql://...\nFIVEM_DB_HOST=...\n\n# Payment Gateways\nSTRIPE_SECRET_KEY=sk_live_...\nTOYYIBPAY_SECRET_KEY=...\nBILLPLZ_SECRET_KEY=...\nBILLPLZ_SIGNATURE_KEY=...\n\n# Discord OAuth\nDISCORD_CLIENT_ID=...\nDISCORD_CLIENT_SECRET=...\n```\n\n## 🎯 Next Steps\n\n1. ✅ Choose deployment method (automated or manual)\n2. ✅ Prepare VPS with Ubuntu 20.04/22.04\n3. ✅ Point domain to VPS IP address\n4. ✅ Gather all API keys and credentials\n5. ✅ Run deployment\n6. ✅ Configure payment webhooks\n7. ✅ Test all payment flows\n8. ✅ Monitor logs and performance\n\n---\n\n**📚 Full Documentation:** See `VPS_DEPLOYMENT.md` for complete details\n\n**🔧 Deployment Script:** Run `./deploy.sh` for automated deployment\n\n**🗄️ Database Backup:** Use `database_backup_20251006_043457.sql` to restore data\n","size_bytes":5808},"VPS_DEPLOYMENT.md":{"content":"# AECOIN Store - Multi-VPS Production Deployment Guide\n\nComplete step-by-step guide for deploying AECOIN Store to any VPS provider.\n\n## 📋 Table of Contents\n\n1. [System Requirements](#system-requirements)\n2. [Provider-Specific Setup](#provider-specific-setup)\n3. [Automated Deployment](#automated-deployment)\n4. [Manual Deployment Steps](#manual-deployment-steps)\n5. [Payment Gateway Configuration](#payment-gateway-configuration)\n6. [SSL/HTTPS Setup](#ssl-https-setup)\n7. [Security Hardening](#security-hardening)\n8. [Monitoring & Logging](#monitoring--logging)\n9. [Backup & Restore](#backup--restore)\n10. [Troubleshooting](#troubleshooting)\n\n---\n\n## System Requirements\n\n### Minimum Specifications\n- **OS**: Ubuntu 20.04/22.04 LTS, Debian 11+, CentOS 8+, or RHEL 8+\n- **RAM**: 2GB (4GB recommended for production)\n- **Storage**: 20GB SSD\n- **CPU**: 2 cores\n- **Network**: 1Gbps network interface\n\n### Required Software\n- Node.js 20.x\n- PostgreSQL 13+ (main database)\n- MySQL 8.0+ (FiveM integration)\n- Nginx (reverse proxy)\n- PM2 (process manager)\n- Certbot (SSL certificates)\n\n### Domain Requirements\n- Domain name pointed to your VPS IP\n- DNS A records configured\n- SSL certificate (free via Let's Encrypt)\n\n---\n\n## Provider-Specific Setup\n\n### DigitalOcean\n\n1. **Create Droplet**\n```bash\n# Via CLI (requires doctl)\ndoctl compute droplet create aecoin-store \\\n  --image ubuntu-22-04-x64 \\\n  --size s-2vcpu-4gb \\\n  --region sgp1 \\\n  --ssh-keys YOUR_SSH_KEY_ID\n\n# Via Web: droplets → Create → Ubuntu 22.04, $24/mo plan\n```\n\n2. **Configure Firewall**\n```bash\n# Add firewall rules\nufw allow 22/tcp    # SSH\nufw allow 80/tcp    # HTTP\nufw allow 443/tcp   # HTTPS\nufw enable\n```\n\n### AWS EC2\n\n1. **Launch Instance**\n```bash\n# Via AWS CLI\naws ec2 run-instances \\\n  --image-id ami-0c55b159cbfafe1f0 \\\n  --instance-type t3.medium \\\n  --key-name your-key-pair \\\n  --security-group-ids sg-xxxxx \\\n  --subnet-id subnet-xxxxx\n\n# Via Console: EC2 → Launch Instance → Ubuntu 22.04, t3.medium\n```\n\n2. **Security Group Rules**\n- Inbound: SSH (22), HTTP (80), HTTPS (443)\n- Outbound: All traffic\n\n### Linode\n\n1. **Create Linode**\n```bash\n# Via Linode CLI\nlinode-cli linodes create \\\n  --type g6-standard-2 \\\n  --region ap-south \\\n  --image linode/ubuntu22.04 \\\n  --root_pass YOUR_PASSWORD\n\n# Via Cloud Manager: Create → Linode → Ubuntu 22.04, Dedicated 4GB\n```\n\n2. **Network Configuration**\n- Cloud Firewall: Allow 22, 80, 443\n\n### Vultr\n\n1. **Deploy Server**\n```bash\n# Via Vultr API\ncurl \"https://api.vultr.com/v2/instances\" \\\n  -X POST \\\n  -H \"Authorization: Bearer YOUR_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  --data '{\"region\":\"sgp\",\"plan\":\"vc2-2c-4gb\",\"os_id\":1743}'\n\n# Via Portal: Deploy → Cloud Compute → Ubuntu 22.04, 4GB plan\n```\n\n2. **Firewall Rules**\n- SSH (22), HTTP (80), HTTPS (443)\n\n### Generic VPS Setup\n\nFor any provider, ensure:\n1. Root or sudo access\n2. SSH key authentication enabled\n3. Firewall allows ports 22, 80, 443\n4. Server time synchronized (NTP)\n\n---\n\n## Automated Deployment\n\n### Quick Start (Recommended)\n\n1. **Download Deployment Script**\n```bash\n# SSH into your VPS\nssh root@your-server-ip\n\n# Download deployment script\ncurl -o deploy.sh https://raw.githubusercontent.com/YOUR_REPO/main/deploy.sh\nchmod +x deploy.sh\n\n# Run automated deployment\nsudo ./deploy.sh\n```\n\n2. **Follow Interactive Prompts**\nThe script will ask for:\n- Domain name\n- Database passwords\n- Discord OAuth credentials\n- Stripe API keys\n- ToyyibPay secret key\n- Billplz API keys\n- Admin email for SSL\n\n3. **Wait for Completion**\n- Installation: ~10-15 minutes\n- SSL certificate: ~2 minutes\n- Total: ~20 minutes\n\n---\n\n## Manual Deployment Steps\n\n### Step 1: Initial Server Setup\n\n```bash\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install essential tools\nsudo apt install -y curl git build-essential nginx certbot python3-certbot-nginx ufw\n\n# Configure firewall\nsudo ufw allow 22/tcp\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw --force enable\n\n# Set timezone\nsudo timedatectl set-timezone Asia/Kuala_Lumpur\n```\n\n### Step 2: Install Node.js 20.x\n\n```bash\n# Install Node.js via NodeSource\ncurl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Verify installation\nnode --version  # Should be v20.x.x\nnpm --version\n```\n\n### Step 3: Install PostgreSQL\n\n```bash\n# Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Start and enable service\nsudo systemctl start postgresql\nsudo systemctl enable postgresql\n\n# Create database and user\nsudo -u postgres psql <<EOF\nCREATE DATABASE aecoin_store;\nCREATE USER aecoin_user WITH PASSWORD 'CHANGE_ME_SECURE_PASSWORD';\nGRANT ALL PRIVILEGES ON DATABASE aecoin_store TO aecoin_user;\nALTER DATABASE aecoin_store OWNER TO aecoin_user;\n\\c aecoin_store\nGRANT ALL ON SCHEMA public TO aecoin_user;\n\\q\nEOF\n```\n\n### Step 4: Install MySQL (FiveM Database)\n\n```bash\n# Install MySQL\nsudo apt install -y mysql-server\n\n# Secure installation\nsudo mysql_secure_installation\n# Answer: Y, 2, strong_password, Y, Y, Y, Y\n\n# Create FiveM database\nsudo mysql <<EOF\nCREATE DATABASE IF NOT EXISTS fivem_database;\nCREATE USER IF NOT EXISTS 'fivem_user'@'%' IDENTIFIED BY 'CHANGE_ME_FIVEM_PASSWORD';\nGRANT ALL PRIVILEGES ON fivem_database.* TO 'fivem_user'@'%';\nFLUSH PRIVILEGES;\nEOF\n\n# If connecting to remote FiveM MySQL, skip local MySQL installation\n```\n\n### Step 5: Clone Application\n\n```bash\n# Create application directory\nsudo mkdir -p /var/www/aecoin-store\nsudo chown -R $USER:$USER /var/www/aecoin-store\ncd /var/www/aecoin-store\n\n# Clone repository\ngit clone https://github.com/YOUR_USERNAME/aecoin-store.git .\n\n# Or upload via SCP\n# scp -r ./aecoin-store root@your-server-ip:/var/www/\n\n# Install dependencies\nnpm install --production\n```\n\n### Step 6: Environment Configuration\n\n```bash\n# Create .env file\nnano .env\n```\n\n**Copy and configure:**\n\n```env\n# Application\nNODE_ENV=production\nPORT=5000\n\n# PostgreSQL Database\nDATABASE_URL=postgresql://aecoin_user:YOUR_PG_PASSWORD@localhost:5432/aecoin_store\nPGHOST=localhost\nPGPORT=5432\nPGUSER=aecoin_user\nPGPASSWORD=YOUR_PG_PASSWORD\nPGDATABASE=aecoin_store\n\n# FiveM MySQL Database\nFIVEM_DB_HOST=YOUR_FIVEM_SERVER_IP\nFIVEM_DB_PORT=3306\nFIVEM_DB_USER=fivem_user\nFIVEM_DB_PASSWORD=YOUR_FIVEM_PASSWORD\nFIVEM_DB_NAME=fivem_database\nFIVEM_DB_TABLE=ak4y_donatesystem_codes\nFIVEM_DB_COLUMN_CODE=code\nFIVEM_DB_COLUMN_CREDITSVALUE=creditsvalue\n\n# Discord OAuth\nDISCORD_CLIENT_ID=your_discord_client_id\nDISCORD_CLIENT_SECRET=your_discord_client_secret\nDISCORD_REDIRECT_URI=https://yourdomain.com/api/auth/discord/callback\n\n# Stripe Payment Gateway\nSTRIPE_SECRET_KEY=sk_live_your_stripe_secret\nVITE_STRIPE_PUBLIC_KEY=pk_live_your_stripe_public\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret\n\n# ToyyibPay Payment Gateway\nTOYYIBPAY_SECRET_KEY=your_toyyibpay_secret\n\n# Billplz Payment Gateway\nBILLPLZ_SECRET_KEY=your_billplz_api_key\nBILLPLZ_SIGNATURE_KEY=your_billplz_signature_key\n\n# Session Security\nSESSION_SECRET=$(openssl rand -base64 32)\n```\n\n### Step 7: Database Migration\n\n```bash\n# Run database migrations\nnpm run db:push\n\n# Verify tables created\npsql $DATABASE_URL -c \"\\dt\"\n\n# Optional: Restore from backup\npsql $DATABASE_URL < database_backup_20251006_043457.sql\n```\n\n### Step 8: Build Application\n\n```bash\n# Build frontend and backend\nnpm run build\n\n# Test production build\nNODE_ENV=production npm start\n# Press Ctrl+C after verification\n```\n\n### Step 9: Setup PM2 Process Manager\n\n```bash\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem file\ncat > ecosystem.config.cjs << 'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'aecoin-store',\n    script: 'npm',\n    args: 'start',\n    cwd: '/var/www/aecoin-store',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: '/var/log/pm2/aecoin-error.log',\n    out_file: '/var/log/pm2/aecoin-out.log',\n    log_file: '/var/log/pm2/aecoin-combined.log',\n    time: true\n  }]\n};\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/pm2\nsudo chown -R $USER:$USER /var/log/pm2\n\n# Start application\npm2 start ecosystem.config.cjs\n\n# Save PM2 configuration\npm2 save\n\n# Setup PM2 startup script\npm2 startup systemd\n# Run the command it outputs\n\n# Monitor application\npm2 status\npm2 logs aecoin-store\n```\n\n### Step 10: Configure Nginx Reverse Proxy\n\n```bash\n# Create Nginx configuration\nsudo nano /etc/nginx/sites-available/aecoin-store\n```\n\n**Add configuration:**\n\n```nginx\nserver {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n\n    # Proxy to Node.js app\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n\n    # Webhook endpoints - increase timeout\n    location ~ ^/api/(stripe-webhook|toyyibpay-return|billplz-callback) {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 60s;\n        proxy_connect_timeout 60s;\n    }\n\n    # Client max body size\n    client_max_body_size 10M;\n}\n```\n\n**Enable site:**\n\n```bash\n# Enable configuration\nsudo ln -s /etc/nginx/sites-available/aecoin-store /etc/nginx/sites-enabled/\n\n# Remove default site\nsudo rm /etc/nginx/sites-enabled/default\n\n# Test configuration\nsudo nginx -t\n\n# Reload Nginx\nsudo systemctl reload nginx\n```\n\n---\n\n## Payment Gateway Configuration\n\n### Stripe Setup\n\n1. **Get API Keys**\n   - Go to https://dashboard.stripe.com/apikeys\n   - Copy Secret Key (`sk_live_...`) and Publishable Key (`pk_live_...`)\n\n2. **Configure Webhook**\n   - Go to Developers → Webhooks\n   - Add endpoint: `https://yourdomain.com/api/stripe-webhook`\n   - Select events: `payment_intent.succeeded`, `payment_intent.payment_failed`\n   - Copy Signing Secret (`whsec_...`)\n\n3. **Update .env**\n```env\nSTRIPE_SECRET_KEY=sk_live_...\nVITE_STRIPE_PUBLIC_KEY=pk_live_...\nSTRIPE_WEBHOOK_SECRET=whsec_...\n```\n\n### ToyyibPay Setup\n\n1. **Get Secret Key**\n   - Login to https://toyyibpay.com/\n   - Go to Settings → API Keys\n   - Copy Secret Key\n\n2. **Configure Return URL**\n   - Add return URL: `https://yourdomain.com/api/toyyibpay-return`\n\n3. **Update .env**\n```env\nTOYYIBPAY_SECRET_KEY=your_secret_key\n```\n\n### Billplz Setup\n\n1. **Get API Keys**\n   - Login to https://www.billplz.com/\n   - Go to Settings → API\n   - Copy API Secret Key and X Signature Key\n\n2. **Configure Callback URL**\n   - Add callback URL: `https://yourdomain.com/api/billplz-callback`\n\n3. **Update .env**\n```env\nBILLPLZ_SECRET_KEY=your_api_key\nBILLPLZ_SIGNATURE_KEY=your_signature_key\n```\n\n### Discord OAuth Setup\n\n1. **Create Application**\n   - Go to https://discord.com/developers/applications\n   - Create new application \"AECOIN Store\"\n\n2. **Configure OAuth2**\n   - OAuth2 → Add Redirect: `https://yourdomain.com/api/auth/discord/callback`\n   - Scopes: `identify`, `email`\n\n3. **Update .env**\n```env\nDISCORD_CLIENT_ID=your_client_id\nDISCORD_CLIENT_SECRET=your_client_secret\nDISCORD_REDIRECT_URI=https://yourdomain.com/api/auth/discord/callback\n```\n\n---\n\n## SSL/HTTPS Setup\n\n### Let's Encrypt (Certbot)\n\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d yourdomain.com -d www.yourdomain.com\n\n# Follow prompts:\n# - Enter email address\n# - Agree to terms\n# - Choose redirect (option 2)\n\n# Verify auto-renewal\nsudo certbot renew --dry-run\n\n# Certificate will auto-renew via cron\n```\n\n### Manual SSL Certificate\n\nIf using custom SSL:\n\n```bash\n# Edit Nginx config\nsudo nano /etc/nginx/sites-available/aecoin-store\n```\n\nAdd SSL configuration:\n\n```nginx\nserver {\n    listen 443 ssl http2;\n    server_name yourdomain.com www.yourdomain.com;\n\n    ssl_certificate /etc/ssl/certs/yourdomain.crt;\n    ssl_certificate_key /etc/ssl/private/yourdomain.key;\n    \n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n    ssl_prefer_server_ciphers on;\n\n    # ... rest of configuration\n}\n\nserver {\n    listen 80;\n    server_name yourdomain.com www.yourdomain.com;\n    return 301 https://$host$request_uri;\n}\n```\n\n---\n\n## Security Hardening\n\n### SSH Security\n\n```bash\n# Edit SSH config\nsudo nano /etc/ssh/sshd_config\n```\n\n**Recommended settings:**\n```\nPermitRootLogin no\nPasswordAuthentication no\nPubkeyAuthentication yes\nPort 2222  # Change default port\n```\n\n```bash\n# Restart SSH\nsudo systemctl restart sshd\n```\n\n### Fail2Ban\n\n```bash\n# Install Fail2Ban\nsudo apt install -y fail2ban\n\n# Create local config\nsudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n\n# Edit configuration\nsudo nano /etc/fail2ban/jail.local\n```\n\n**Enable jails:**\n```ini\n[sshd]\nenabled = true\nmaxretry = 3\nbantime = 3600\n\n[nginx-http-auth]\nenabled = true\n```\n\n```bash\n# Start Fail2Ban\nsudo systemctl start fail2ban\nsudo systemctl enable fail2ban\n\n# Check status\nsudo fail2ban-client status\n```\n\n### PostgreSQL Security\n\n```bash\n# Edit PostgreSQL config\nsudo nano /etc/postgresql/*/main/pg_hba.conf\n```\n\n**Restrict access:**\n```\nlocal   all             postgres                                peer\nlocal   all             all                                     md5\nhost    all             all             127.0.0.1/32            md5\n```\n\n```bash\n# Reload PostgreSQL\nsudo systemctl reload postgresql\n```\n\n### System Updates\n\n```bash\n# Enable automatic security updates\nsudo apt install -y unattended-upgrades\n\n# Configure automatic updates\nsudo dpkg-reconfigure -plow unattended-upgrades\n```\n\n---\n\n## Monitoring & Logging\n\n### PM2 Monitoring\n\n```bash\n# Real-time monitoring\npm2 monit\n\n# View logs\npm2 logs aecoin-store --lines 100\n\n# Check status\npm2 status\n\n# View metrics\npm2 describe aecoin-store\n```\n\n### Log Rotation\n\n```bash\n# Install logrotate config\nsudo nano /etc/logrotate.d/aecoin-store\n```\n\n**Add configuration:**\n```\n/var/log/pm2/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    missingok\n    sharedscripts\n    postrotate\n        pm2 reloadLogs\n    endscript\n}\n```\n\n### Nginx Logs\n\n```bash\n# Access logs\nsudo tail -f /var/log/nginx/access.log\n\n# Error logs\nsudo tail -f /var/log/nginx/error.log\n```\n\n### Database Monitoring\n\n```bash\n# PostgreSQL activity\nsudo -u postgres psql -c \"SELECT * FROM pg_stat_activity;\"\n\n# MySQL processes\nsudo mysql -e \"SHOW FULL PROCESSLIST;\"\n```\n\n---\n\n## Backup & Restore\n\n### Database Backup Script\n\n```bash\n# Create backup script\ncat > /var/www/aecoin-store/backup.sh << 'EOF'\n#!/bin/bash\n\nBACKUP_DIR=\"/var/backups/aecoin-store\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Backup PostgreSQL\npg_dump $DATABASE_URL > $BACKUP_DIR/postgres_$DATE.sql\n\n# Backup .env file\ncp /var/www/aecoin-store/.env $BACKUP_DIR/env_$DATE.backup\n\n# Compress backups\ntar -czf $BACKUP_DIR/aecoin_backup_$DATE.tar.gz \\\n  $BACKUP_DIR/postgres_$DATE.sql \\\n  $BACKUP_DIR/env_$DATE.backup\n\n# Remove old backups (keep 7 days)\nfind $BACKUP_DIR -name \"aecoin_backup_*.tar.gz\" -mtime +7 -delete\n\n# Clean temporary files\nrm $BACKUP_DIR/postgres_$DATE.sql $BACKUP_DIR/env_$DATE.backup\n\necho \"Backup completed: $BACKUP_DIR/aecoin_backup_$DATE.tar.gz\"\nEOF\n\nchmod +x /var/www/aecoin-store/backup.sh\n```\n\n### Automate Backups (Cron)\n\n```bash\n# Edit crontab\ncrontab -e\n\n# Add daily backup at 2 AM\n0 2 * * * /var/www/aecoin-store/backup.sh >> /var/log/aecoin-backup.log 2>&1\n```\n\n### Restore from Backup\n\n```bash\n# Extract backup\ntar -xzf /var/backups/aecoin-store/aecoin_backup_YYYYMMDD_HHMMSS.tar.gz -C /tmp\n\n# Restore PostgreSQL\npsql $DATABASE_URL < /tmp/postgres_YYYYMMDD_HHMMSS.sql\n\n# Restore .env\ncp /tmp/env_YYYYMMDD_HHMMSS.backup /var/www/aecoin-store/.env\n\n# Restart application\npm2 restart aecoin-store\n```\n\n---\n\n## Troubleshooting\n\n### Application Won't Start\n\n**Check PM2 logs:**\n```bash\npm2 logs aecoin-store --err --lines 50\n```\n\n**Common issues:**\n- Missing environment variables → Check `.env` file\n- Database connection failed → Verify `DATABASE_URL`\n- Port 5000 in use → `sudo lsof -i :5000`\n\n### Database Connection Errors\n\n**PostgreSQL:**\n```bash\n# Test connection\npsql $DATABASE_URL -c \"SELECT 1;\"\n\n# Check PostgreSQL status\nsudo systemctl status postgresql\n\n# View PostgreSQL logs\nsudo tail -f /var/log/postgresql/postgresql-*-main.log\n```\n\n**MySQL:**\n```bash\n# Test connection\nmysql -h $FIVEM_DB_HOST -u $FIVEM_DB_USER -p$FIVEM_DB_PASSWORD $FIVEM_DB_NAME -e \"SELECT 1;\"\n\n# Check MySQL status\nsudo systemctl status mysql\n```\n\n### Payment Gateway Issues\n\n**Stripe webhook not receiving events:**\n```bash\n# Check webhook logs\npm2 logs aecoin-store | grep stripe-webhook\n\n# Test webhook endpoint\ncurl -X POST https://yourdomain.com/api/stripe-webhook \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"type\":\"test\"}'\n\n# Verify Stripe webhook secret\nenv | grep STRIPE_WEBHOOK_SECRET\n```\n\n**ToyyibPay/Billplz callback not working:**\n```bash\n# Check Nginx logs\nsudo tail -f /var/log/nginx/access.log | grep -E 'toyyibpay|billplz'\n\n# Test endpoints\ncurl https://yourdomain.com/api/toyyibpay-return\ncurl https://yourdomain.com/api/billplz-callback\n```\n\n### SSL Certificate Issues\n\n```bash\n# Check certificate expiry\nsudo certbot certificates\n\n# Renew certificate manually\nsudo certbot renew --force-renewal\n\n# Test SSL configuration\ncurl -I https://yourdomain.com\n```\n\n### High Memory Usage\n\n```bash\n# Check memory usage\nfree -h\npm2 describe aecoin-store | grep memory\n\n# Restart application\npm2 restart aecoin-store\n\n# Increase PM2 memory limit\n# Edit ecosystem.config.cjs: max_memory_restart: '2G'\npm2 reload ecosystem.config.cjs\n```\n\n### Nginx 502 Bad Gateway\n\n```bash\n# Check if app is running\npm2 status aecoin-store\n\n# Verify port 5000\ncurl http://localhost:5000\n\n# Check Nginx error logs\nsudo tail -f /var/log/nginx/error.log\n\n# Test Nginx config\nsudo nginx -t\n```\n\n---\n\n## Performance Optimization\n\n### Node.js Optimization\n\n```javascript\n// ecosystem.config.cjs\nmodule.exports = {\n  apps: [{\n    name: 'aecoin-store',\n    script: 'npm',\n    args: 'start',\n    instances: 'max',  // Use all CPU cores\n    exec_mode: 'cluster',\n    max_memory_restart: '2G',\n    node_args: '--max-old-space-size=2048'\n  }]\n};\n```\n\n### Nginx Caching\n\n```nginx\n# Add to Nginx config\nlocation /assets/ {\n    expires 1y;\n    add_header Cache-Control \"public, immutable\";\n}\n\nlocation ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ {\n    expires 7d;\n    add_header Cache-Control \"public\";\n}\n```\n\n### Database Optimization\n\n```sql\n-- Add indexes for better performance\nCREATE INDEX idx_orders_user_id ON orders(user_id);\nCREATE INDEX idx_orders_status ON orders(status);\nCREATE INDEX idx_redemption_codes_order_id ON redemption_codes(order_id);\n```\n\n---\n\n## Support & Maintenance\n\n### Regular Maintenance Tasks\n\n**Weekly:**\n- Check disk space: `df -h`\n- Review error logs: `pm2 logs --err --lines 100`\n- Monitor SSL expiry: `sudo certbot certificates`\n\n**Monthly:**\n- Update packages: `sudo apt update && sudo apt upgrade`\n- Review security patches: `sudo unattended-upgrades --dry-run`\n- Rotate logs: `sudo logrotate /etc/logrotate.conf`\n\n**Quarterly:**\n- Review backup integrity\n- Test restore procedures\n- Update Node.js if needed\n\n### Health Check Endpoint\n\nAdd to your application:\n\n```typescript\n// server/routes.ts\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'ok',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n```\n\n### Monitoring Script\n\n```bash\n#!/bin/bash\n# /var/www/aecoin-store/healthcheck.sh\n\nHEALTH_URL=\"https://yourdomain.com/health\"\nRESPONSE=$(curl -s -o /dev/null -w \"%{http_code}\" $HEALTH_URL)\n\nif [ $RESPONSE -ne 200 ]; then\n  echo \"Health check failed with status $RESPONSE\"\n  pm2 restart aecoin-store\n  # Send alert (email, Slack, etc.)\nfi\n```\n\n---\n\n## Quick Reference\n\n### Common Commands\n\n```bash\n# Application\npm2 start ecosystem.config.cjs\npm2 restart aecoin-store\npm2 stop aecoin-store\npm2 logs aecoin-store\n\n# Nginx\nsudo nginx -t\nsudo systemctl reload nginx\nsudo systemctl restart nginx\n\n# Database\npsql $DATABASE_URL\nnpm run db:push\n\n# SSL\nsudo certbot renew\nsudo certbot certificates\n\n# System\nsudo systemctl status postgresql\nsudo systemctl status mysql\nsudo ufw status\n```\n\n### Important File Locations\n\n```\n/var/www/aecoin-store/          # Application root\n/var/www/aecoin-store/.env      # Environment variables\n/var/log/pm2/                   # Application logs\n/var/log/nginx/                 # Nginx logs\n/etc/nginx/sites-available/     # Nginx configs\n/var/backups/aecoin-store/      # Backups\n```\n\n---\n\n## Deployment Checklist\n\n- [ ] VPS provisioned and accessible via SSH\n- [ ] Domain DNS pointed to VPS IP\n- [ ] Node.js 20.x installed\n- [ ] PostgreSQL installed and configured\n- [ ] MySQL installed (if needed for FiveM)\n- [ ] Application cloned and dependencies installed\n- [ ] .env file configured with all secrets\n- [ ] Database migrated (npm run db:push)\n- [ ] Application built (npm run build)\n- [ ] PM2 configured and application running\n- [ ] Nginx installed and configured\n- [ ] SSL certificate obtained\n- [ ] Firewall configured (ports 22, 80, 443)\n- [ ] Payment gateway webhooks configured\n- [ ] Discord OAuth redirect URI updated\n- [ ] Backups automated via cron\n- [ ] Health checks configured\n- [ ] Monitoring setup complete\n\n---\n\n**Deployment completed successfully! 🚀**\n\nFor automated deployment, use the `deploy.sh` script in the repository.\n","size_bytes":22019},"deploy.sh":{"content":"#!/bin/bash\n\n################################################################################\n# AECOIN Store - Automated VPS Deployment Script\n# \n# This script automates the complete deployment of AECOIN Store on any VPS\n# Supports: Ubuntu 20.04+, Debian 11+, CentOS 8+, RHEL 8+\n#\n# Usage: sudo ./deploy.sh\n################################################################################\n\nset -e  # Exit on error\n\n# Color codes for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration variables\nAPP_NAME=\"aecoin-store\"\nAPP_DIR=\"/var/www/aecoin-store\"\nLOG_DIR=\"/var/log/pm2\"\nBACKUP_DIR=\"/var/backups/aecoin-store\"\nNODE_VERSION=\"20\"\n\n################################################################################\n# Helper Functions\n################################################################################\n\nprint_header() {\n    echo -e \"\\n${BLUE}========================================${NC}\"\n    echo -e \"${BLUE}$1${NC}\"\n    echo -e \"${BLUE}========================================${NC}\\n\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}✓ $1${NC}\"\n}\n\nprint_error() {\n    echo -e \"${RED}✗ $1${NC}\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}⚠ $1${NC}\"\n}\n\nprint_info() {\n    echo -e \"${BLUE}ℹ $1${NC}\"\n}\n\n# Check if running as root\ncheck_root() {\n    if [[ $EUID -ne 0 ]]; then\n        print_error \"This script must be run as root (use sudo)\"\n        exit 1\n    fi\n}\n\n# Detect OS and package manager\ndetect_os() {\n    print_header \"Detecting Operating System\"\n    \n    if [ -f /etc/os-release ]; then\n        . /etc/os-release\n        OS=$ID\n        OS_VERSION=$VERSION_ID\n    else\n        print_error \"Cannot detect OS. /etc/os-release not found\"\n        exit 1\n    fi\n    \n    case $OS in\n        ubuntu|debian)\n            PKG_MANAGER=\"apt\"\n            PKG_UPDATE=\"apt update\"\n            PKG_INSTALL=\"apt install -y\"\n            ;;\n        centos|rhel|fedora)\n            PKG_MANAGER=\"yum\"\n            PKG_UPDATE=\"yum update -y\"\n            PKG_INSTALL=\"yum install -y\"\n            ;;\n        *)\n            print_error \"Unsupported OS: $OS\"\n            exit 1\n            ;;\n    esac\n    \n    print_success \"Detected: $OS $OS_VERSION\"\n    print_info \"Package Manager: $PKG_MANAGER\"\n}\n\n# Update system\nupdate_system() {\n    print_header \"Updating System Packages\"\n    $PKG_UPDATE\n    print_success \"System updated\"\n}\n\n# Install essential tools\ninstall_essentials() {\n    print_header \"Installing Essential Tools\"\n    \n    if [ \"$PKG_MANAGER\" = \"apt\" ]; then\n        $PKG_INSTALL curl git build-essential nginx certbot python3-certbot-nginx ufw\n    else\n        $PKG_INSTALL curl git gcc gcc-c++ make nginx certbot python3-certbot-nginx firewalld\n    fi\n    \n    print_success \"Essential tools installed\"\n}\n\n# Configure firewall\nconfigure_firewall() {\n    print_header \"Configuring Firewall\"\n    \n    if [ \"$PKG_MANAGER\" = \"apt\" ]; then\n        ufw allow 22/tcp\n        ufw allow 80/tcp\n        ufw allow 443/tcp\n        ufw --force enable\n        print_success \"UFW firewall configured\"\n    else\n        systemctl start firewalld\n        systemctl enable firewalld\n        firewall-cmd --permanent --add-service=ssh\n        firewall-cmd --permanent --add-service=http\n        firewall-cmd --permanent --add-service=https\n        firewall-cmd --reload\n        print_success \"Firewalld configured\"\n    fi\n}\n\n# Install Node.js\ninstall_nodejs() {\n    print_header \"Installing Node.js $NODE_VERSION\"\n    \n    # Check if Node.js is already installed\n    if command -v node &> /dev/null; then\n        CURRENT_NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)\n        if [ \"$CURRENT_NODE_VERSION\" = \"$NODE_VERSION\" ]; then\n            print_success \"Node.js $NODE_VERSION already installed\"\n            return\n        fi\n    fi\n    \n    # Install Node.js via NodeSource\n    curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -\n    \n    if [ \"$PKG_MANAGER\" = \"apt\" ]; then\n        apt install -y nodejs\n    else\n        yum install -y nodejs\n    fi\n    \n    # Verify installation\n    node --version\n    npm --version\n    print_success \"Node.js $NODE_VERSION installed\"\n}\n\n# Install PostgreSQL\ninstall_postgresql() {\n    print_header \"Installing PostgreSQL\"\n    \n    if [ \"$PKG_MANAGER\" = \"apt\" ]; then\n        $PKG_INSTALL postgresql postgresql-contrib\n    else\n        $PKG_INSTALL postgresql-server postgresql-contrib\n        postgresql-setup --initdb\n    fi\n    \n    systemctl start postgresql\n    systemctl enable postgresql\n    print_success \"PostgreSQL installed and started\"\n}\n\n# Install MySQL\ninstall_mysql() {\n    print_header \"Installing MySQL\"\n    \n    # Ask if MySQL is needed\n    echo -n \"Do you need local MySQL for FiveM? (y/N): \"\n    read -r INSTALL_MYSQL\n    \n    if [[ \"$INSTALL_MYSQL\" =~ ^[Yy]$ ]]; then\n        if [ \"$PKG_MANAGER\" = \"apt\" ]; then\n            $PKG_INSTALL mysql-server\n        else\n            $PKG_INSTALL mysql-server\n        fi\n        \n        systemctl start mysqld || systemctl start mysql\n        systemctl enable mysqld || systemctl enable mysql\n        print_success \"MySQL installed and started\"\n        \n        # Note about mysql_secure_installation\n        print_warning \"Run 'mysql_secure_installation' after deployment to secure MySQL\"\n    else\n        print_info \"Skipping MySQL installation (using remote FiveM database)\"\n    fi\n}\n\n# Collect configuration from user\ncollect_config() {\n    print_header \"Configuration Setup\"\n    \n    echo -e \"${YELLOW}Please provide the following information:${NC}\\n\"\n    \n    # Domain\n    read -p \"Enter your domain name (e.g., aeofficial.my): \" DOMAIN\n    \n    # Database passwords\n    read -sp \"Enter PostgreSQL password for aecoin_user: \" PG_PASSWORD\n    echo\n    read -sp \"Confirm PostgreSQL password: \" PG_PASSWORD_CONFIRM\n    echo\n    \n    if [ \"$PG_PASSWORD\" != \"$PG_PASSWORD_CONFIRM\" ]; then\n        print_error \"Passwords do not match\"\n        exit 1\n    fi\n    \n    # FiveM Database\n    echo -e \"\\n${BLUE}FiveM Database Configuration${NC}\"\n    read -p \"Enter FiveM MySQL host (IP or hostname): \" FIVEM_HOST\n    read -p \"Enter FiveM MySQL port (default 3306): \" FIVEM_PORT\n    FIVEM_PORT=${FIVEM_PORT:-3306}\n    read -p \"Enter FiveM MySQL database name: \" FIVEM_DB\n    read -p \"Enter FiveM MySQL username: \" FIVEM_USER\n    read -sp \"Enter FiveM MySQL password: \" FIVEM_PASSWORD\n    echo\n    read -p \"Enter FiveM table name (default: ak4y_donatesystem_codes): \" FIVEM_TABLE\n    FIVEM_TABLE=${FIVEM_TABLE:-ak4y_donatesystem_codes}\n    read -p \"Enter FiveM code column name (default: code): \" FIVEM_CODE_COLUMN\n    FIVEM_CODE_COLUMN=${FIVEM_CODE_COLUMN:-code}\n    read -p \"Enter FiveM credits column name (default: creditsvalue): \" FIVEM_CREDITS_COLUMN\n    FIVEM_CREDITS_COLUMN=${FIVEM_CREDITS_COLUMN:-creditsvalue}\n    \n    # Discord OAuth\n    echo -e \"\\n${BLUE}Discord OAuth Configuration${NC}\"\n    read -p \"Enter Discord Client ID: \" DISCORD_CLIENT_ID\n    read -p \"Enter Discord Client Secret: \" DISCORD_CLIENT_SECRET\n    \n    # ToyyibPay\n    echo -e \"\\n${BLUE}ToyyibPay Configuration (Malaysian Payment Gateway)${NC}\"\n    read -p \"Enter ToyyibPay Secret Key: \" TOYYIBPAY_SECRET_KEY\n    \n    # Billplz\n    echo -e \"\\n${BLUE}Billplz Configuration (Malaysian Payment Gateway)${NC}\"\n    read -p \"Enter Billplz API Secret Key: \" BILLPLZ_SECRET_KEY\n    read -p \"Enter Billplz X Signature Key: \" BILLPLZ_SIGNATURE_KEY\n    \n    # SSL Configuration\n    echo -e \"\\n${BLUE}SSL Certificate Configuration${NC}\"\n    echo -n \"Do you want to enable SSL/HTTPS with Let's Encrypt? (y/N): \"\n    read -r ENABLE_SSL\n    \n    if [[ \"$ENABLE_SSL\" =~ ^[Yy]$ ]]; then\n        read -p \"Enter admin email for SSL certificate: \" ADMIN_EMAIL\n        print_info \"SSL will be configured after Nginx setup\"\n    else\n        print_info \"Skipping SSL configuration (you can enable it later)\"\n    fi\n    \n    # Repository URL\n    echo -e \"\\n${BLUE}Repository Configuration${NC}\"\n    read -p \"Enter Git repository URL (or press Enter to skip): \" REPO_URL\n    \n    print_success \"Configuration collected\"\n}\n\n# Setup PostgreSQL database\nsetup_postgresql() {\n    print_header \"Setting up PostgreSQL Database\"\n    \n    sudo -u postgres psql <<EOF\nCREATE DATABASE aecoin_store;\nCREATE USER aecoin_user WITH PASSWORD '$PG_PASSWORD';\nGRANT ALL PRIVILEGES ON DATABASE aecoin_store TO aecoin_user;\nALTER DATABASE aecoin_store OWNER TO aecoin_user;\n\\c aecoin_store\nGRANT ALL ON SCHEMA public TO aecoin_user;\n\\q\nEOF\n    \n    print_success \"PostgreSQL database configured\"\n}\n\n# Clone or upload application\nsetup_application() {\n    print_header \"Setting up Application\"\n    \n    # Create app directory\n    mkdir -p $APP_DIR\n    \n    if [ -n \"$REPO_URL\" ]; then\n        print_info \"Cloning repository from $REPO_URL\"\n        git clone $REPO_URL $APP_DIR\n    else\n        print_warning \"No repository URL provided\"\n        print_info \"Please upload your application files to $APP_DIR manually\"\n        echo -n \"Press Enter when files are uploaded...\"\n        read\n    fi\n    \n    cd $APP_DIR\n    \n    # Install dependencies (including devDependencies for drizzle-kit)\n    print_info \"Installing dependencies...\"\n    npm install\n    \n    print_success \"Application setup complete\"\n}\n\n# Create environment file\ncreate_env_file() {\n    print_header \"Creating Environment Configuration\"\n    \n    # Generate session secret\n    SESSION_SECRET=$(openssl rand -base64 32)\n    \n    cat > $APP_DIR/.env <<EOF\n# Application\nNODE_ENV=production\nPORT=5000\n\n# PostgreSQL Database\nDATABASE_URL=postgresql://aecoin_user:$PG_PASSWORD@localhost:5432/aecoin_store\nPGHOST=localhost\nPGPORT=5432\nPGUSER=aecoin_user\nPGPASSWORD=$PG_PASSWORD\nPGDATABASE=aecoin_store\n\n# FiveM MySQL Database\nFIVEM_DB_HOST=$FIVEM_HOST\nFIVEM_DB_PORT=$FIVEM_PORT\nFIVEM_DB_USER=$FIVEM_USER\nFIVEM_DB_PASSWORD=$FIVEM_PASSWORD\nFIVEM_DB_NAME=$FIVEM_DB\nFIVEM_DB_TABLE=$FIVEM_TABLE\nFIVEM_DB_COLUMN_CODE=$FIVEM_CODE_COLUMN\nFIVEM_DB_COLUMN_CREDITSVALUE=$FIVEM_CREDITS_COLUMN\n\n# Discord OAuth\nDISCORD_CLIENT_ID=$DISCORD_CLIENT_ID\nDISCORD_CLIENT_SECRET=$DISCORD_CLIENT_SECRET\nDISCORD_REDIRECT_URI=https://$DOMAIN/api/auth/discord/callback\n\n# ToyyibPay Payment Gateway (Malaysia)\nTOYYIBPAY_SECRET_KEY=$TOYYIBPAY_SECRET_KEY\n\n# Billplz Payment Gateway (Malaysia)\nBILLPLZ_SECRET_KEY=$BILLPLZ_SECRET_KEY\nBILLPLZ_SIGNATURE_KEY=$BILLPLZ_SIGNATURE_KEY\n\n# Session Security\nSESSION_SECRET=$SESSION_SECRET\nEOF\n    \n    chmod 600 $APP_DIR/.env\n    print_success \"Environment file created\"\n}\n\n# Run database migrations\nrun_migrations() {\n    print_header \"Running Database Migrations\"\n    \n    cd $APP_DIR\n    npm run db:push\n    \n    print_success \"Database schema created\"\n}\n\n# Build application\nbuild_application() {\n    print_header \"Building Application\"\n    \n    cd $APP_DIR\n    npm run build\n    \n    print_success \"Application built successfully\"\n}\n\n# Install and configure PM2\nsetup_pm2() {\n    print_header \"Setting up PM2 Process Manager\"\n    \n    # Install PM2 globally\n    npm install -g pm2\n    \n    # Create log directory\n    mkdir -p $LOG_DIR\n    \n    # Create PM2 ecosystem file\n    cat > $APP_DIR/ecosystem.config.cjs <<'EOF'\nmodule.exports = {\n  apps: [{\n    name: 'aecoin-store',\n    script: 'npm',\n    args: 'start',\n    cwd: '/var/www/aecoin-store',\n    instances: 1,\n    autorestart: true,\n    watch: false,\n    max_memory_restart: '1G',\n    env: {\n      NODE_ENV: 'production',\n      PORT: 5000\n    },\n    error_file: '/var/log/pm2/aecoin-error.log',\n    out_file: '/var/log/pm2/aecoin-out.log',\n    log_file: '/var/log/pm2/aecoin-combined.log',\n    time: true\n  }]\n};\nEOF\n    \n    # Start application with PM2\n    cd $APP_DIR\n    pm2 start ecosystem.config.cjs\n    pm2 save\n    \n    # Setup PM2 startup script\n    pm2 startup systemd -u root --hp /root\n    \n    print_success \"PM2 configured and application started\"\n}\n\n# Configure Nginx\nsetup_nginx() {\n    print_header \"Configuring Nginx\"\n    \n    # Create Nginx configuration\n    cat > /etc/nginx/sites-available/$APP_NAME <<EOF\nserver {\n    listen 80;\n    server_name $DOMAIN www.$DOMAIN;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n\n    # Proxy to Node.js app\n    location / {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n    }\n\n    # Payment gateway callback endpoints\n    location ~ ^/api/(toyyibpay-return|billplz-callback) {\n        proxy_pass http://localhost:5000;\n        proxy_http_version 1.1;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_read_timeout 60s;\n        proxy_connect_timeout 60s;\n    }\n\n    client_max_body_size 10M;\n}\nEOF\n    \n    # Enable site\n    if [ \"$PKG_MANAGER\" = \"apt\" ]; then\n        ln -sf /etc/nginx/sites-available/$APP_NAME /etc/nginx/sites-enabled/\n        rm -f /etc/nginx/sites-enabled/default\n    else\n        ln -sf /etc/nginx/sites-available/$APP_NAME /etc/nginx/conf.d/$APP_NAME.conf\n    fi\n    \n    # Test configuration\n    nginx -t\n    \n    # Reload Nginx\n    systemctl reload nginx\n    \n    print_success \"Nginx configured\"\n}\n\n# Setup SSL with Let's Encrypt\nsetup_ssl() {\n    if [[ ! \"$ENABLE_SSL\" =~ ^[Yy]$ ]]; then\n        print_info \"Skipping SSL setup (not enabled)\"\n        return 0\n    fi\n    \n    print_header \"Setting up SSL Certificate\"\n    \n    print_warning \"Make sure your domain DNS is pointing to this server's IP address\"\n    echo -n \"Continue with SSL setup? (y/N): \"\n    read -r CONFIRM_SSL\n    \n    if [[ ! \"$CONFIRM_SSL\" =~ ^[Yy]$ ]]; then\n        print_info \"SSL setup skipped. You can run certbot manually later:\"\n        echo -e \"${YELLOW}  sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN${NC}\"\n        return 0\n    fi\n    \n    # Obtain certificate\n    if certbot --nginx -d $DOMAIN -d www.$DOMAIN \\\n        --non-interactive \\\n        --agree-tos \\\n        --email $ADMIN_EMAIL \\\n        --redirect; then\n        \n        # Test auto-renewal\n        certbot renew --dry-run\n        print_success \"SSL certificate installed\"\n    else\n        print_error \"SSL certificate installation failed\"\n        print_info \"You can run certbot manually later after fixing DNS:\"\n        echo -e \"${YELLOW}  sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN${NC}\"\n        return 0\n    fi\n}\n\n# Setup backup cron job\nsetup_backup() {\n    print_header \"Setting up Automated Backups\"\n    \n    # Create backup directory\n    mkdir -p $BACKUP_DIR\n    \n    # Create backup script\n    cat > $APP_DIR/backup.sh <<'EOF'\n#!/bin/bash\n\nBACKUP_DIR=\"/var/backups/aecoin-store\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup PostgreSQL\npg_dump $DATABASE_URL > $BACKUP_DIR/postgres_$DATE.sql\n\n# Backup .env\ncp /var/www/aecoin-store/.env $BACKUP_DIR/env_$DATE.backup\n\n# Compress\ntar -czf $BACKUP_DIR/aecoin_backup_$DATE.tar.gz \\\n  $BACKUP_DIR/postgres_$DATE.sql \\\n  $BACKUP_DIR/env_$DATE.backup\n\n# Cleanup\nrm $BACKUP_DIR/postgres_$DATE.sql $BACKUP_DIR/env_$DATE.backup\n\n# Remove old backups (keep 7 days)\nfind $BACKUP_DIR -name \"aecoin_backup_*.tar.gz\" -mtime +7 -delete\n\necho \"Backup completed: $BACKUP_DIR/aecoin_backup_$DATE.tar.gz\"\nEOF\n    \n    chmod +x $APP_DIR/backup.sh\n    \n    # Add to crontab (daily at 2 AM)\n    (crontab -l 2>/dev/null; echo \"0 2 * * * $APP_DIR/backup.sh >> /var/log/aecoin-backup.log 2>&1\") | crontab -\n    \n    print_success \"Backup automation configured\"\n}\n\n# Verify deployment\nverify_deployment() {\n    print_header \"Verifying Deployment\"\n    \n    # Check if app is running\n    if pm2 list | grep -q \"aecoin-store.*online\"; then\n        print_success \"Application is running\"\n    else\n        print_error \"Application is not running\"\n        print_info \"Check logs: pm2 logs aecoin-store\"\n    fi\n    \n    # Check Nginx\n    if systemctl is-active --quiet nginx; then\n        print_success \"Nginx is running\"\n    else\n        print_error \"Nginx is not running\"\n    fi\n    \n    # Check PostgreSQL\n    if systemctl is-active --quiet postgresql; then\n        print_success \"PostgreSQL is running\"\n    else\n        print_error \"PostgreSQL is not running\"\n    fi\n    \n    # Check SSL certificate\n    if certbot certificates | grep -q \"$DOMAIN\"; then\n        print_success \"SSL certificate installed\"\n    else\n        print_warning \"SSL certificate not found\"\n    fi\n    \n    # Test application endpoint\n    if curl -s http://localhost:5000 > /dev/null; then\n        print_success \"Application responding on port 5000\"\n    else\n        print_error \"Application not responding\"\n    fi\n}\n\n# Print deployment summary\nprint_summary() {\n    print_header \"Deployment Summary\"\n    \n    echo -e \"${GREEN}Deployment completed successfully!${NC}\\n\"\n    \n    echo -e \"${BLUE}Application Details:${NC}\"\n    echo -e \"  URL: https://$DOMAIN\"\n    echo -e \"  App Directory: $APP_DIR\"\n    echo -e \"  Log Directory: $LOG_DIR\"\n    echo -e \"  Backup Directory: $BACKUP_DIR\"\n    \n    echo -e \"\\n${BLUE}Useful Commands:${NC}\"\n    echo -e \"  PM2 Status:    pm2 status\"\n    echo -e \"  PM2 Logs:      pm2 logs aecoin-store\"\n    echo -e \"  PM2 Restart:   pm2 restart aecoin-store\"\n    echo -e \"  Nginx Reload:  systemctl reload nginx\"\n    echo -e \"  View Backups:  ls -lh $BACKUP_DIR\"\n    \n    echo -e \"\\n${BLUE}Next Steps:${NC}\"\n    echo -e \"  1. Configure payment gateway callback URLs:\"\n    echo -e \"     - ToyyibPay Return URL: https://$DOMAIN/api/toyyibpay-return\"\n    echo -e \"     - Billplz Callback URL: https://$DOMAIN/api/billplz-callback\"\n    echo -e \"  2. Update Discord OAuth redirect URI:\"\n    echo -e \"     - https://$DOMAIN/api/auth/discord/callback\"\n    echo -e \"  3. Test the application at https://$DOMAIN\"\n    \n    echo -e \"\\n${YELLOW}Security Reminders:${NC}\"\n    echo -e \"  - Run 'mysql_secure_installation' if MySQL was installed\"\n    echo -e \"  - Keep your system updated: apt update && apt upgrade\"\n    echo -e \"  - Monitor logs regularly: pm2 logs aecoin-store\"\n    echo -e \"  - Backup .env file securely\"\n    \n    echo -e \"\\n${GREEN}🚀 AECOIN Store is now live!${NC}\\n\"\n}\n\n################################################################################\n# Main Execution\n################################################################################\n\nmain() {\n    clear\n    \n    echo -e \"${BLUE}\"\n    echo \"╔═══════════════════════════════════════════════════════════╗\"\n    echo \"║                                                           ║\"\n    echo \"║          AECOIN Store - Automated Deployment             ║\"\n    echo \"║                                                           ║\"\n    echo \"╚═══════════════════════════════════════════════════════════╝\"\n    echo -e \"${NC}\\n\"\n    \n    # Pre-flight checks\n    check_root\n    \n    # Detect OS\n    detect_os\n    \n    # Collect configuration\n    collect_config\n    \n    # System setup\n    update_system\n    install_essentials\n    configure_firewall\n    \n    # Install software\n    install_nodejs\n    install_postgresql\n    install_mysql\n    \n    # Database setup\n    setup_postgresql\n    \n    # Application setup\n    setup_application\n    create_env_file\n    run_migrations\n    build_application\n    \n    # Process management\n    setup_pm2\n    \n    # Web server\n    setup_nginx\n    setup_ssl\n    \n    # Backup automation\n    setup_backup\n    \n    # Verification\n    verify_deployment\n    \n    # Summary\n    print_summary\n}\n\n# Run main function\nmain \"$@\"\n","size_bytes":20160}},"version":1}